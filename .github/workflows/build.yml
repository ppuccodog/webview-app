name: 构建安卓应用
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1：拉取仓库代码
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      # 步骤2：安装Node.js
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # 步骤3：切换国内npm镜像+安装Cordova
      - name: 切换国内npm镜像并安装Cordova
        run: |
          npm config set registry https://registry.npmmirror.com/
          npm cache clean -f
          echo "第一次尝试安装Cordova..."
          npm install -g cordova@11.0.0
          cordova -v && echo "✅ Cordova安装成功" || echo "❌ 第一次安装失败，重试一次"
          
          if ! command -v cordova &> /dev/null; then
            echo "正在重试安装Cordova..."
            npm install -g cordova@11.0.0
            cordova -v && echo "✅ 重试后Cordova安装成功" || (echo "❌ 两次安装均失败" && exit 1)
          fi

      # 步骤4：安装安卓SDK
      - name: 安装安卓SDK
        uses: android-actions/setup-android@v3

      # 步骤5：创建项目+安装安卓平台（关键：按日志实际路径调整）
      - name: 创建项目并安装安卓平台（匹配实际路径）
        run: |
          # 创建Cordova项目（日志显示安卓平台会生成在根目录platforms）
          cordova create myapp com.my.simpleapp "我的网页APP"
          
          # 进入项目目录安装安卓平台（但实际platforms会生成在根目录）
          cd myapp
          npm config set registry https://registry.npmmirror.com/
          echo "正在安装安卓平台..."
          cordova platform add android@10.1.2 --verbose
          cd ..
          
          # 关键修复：检查根目录的platforms/android（日志实际生成路径）
          if [ -d "platforms/android" ]; then
            echo "✅ 安卓平台安装成功！实际路径：platforms/android"
          else
            echo "❌ 安卓平台安装失败，未找到根目录platforms文件夹"
            exit 1
          fi

      # 步骤6：创建目标文件夹（用根目录platforms路径）
      - name: 创建文件复制所需的目标文件夹
        run: |
          # 用根目录platforms路径（匹配日志实际位置）
          mkdir -p platforms/android/app/src/main/assets/
          mkdir -p platforms/android/app/src/main/res/xml/
          mkdir -p platforms/android/app/src/main/assets/www/
          echo "✅ 所有目标文件夹创建完成"

      # 步骤7：复制文件（目标路径改为根目录platforms）
      - name: 复制项目文件到安卓目录
        run: |
          # 复制网页文件到根目录platforms的assets/www
          cp -r www/* platforms/android/app/src/main/assets/www/
          # 复制config.xml到根目录platforms的res/xml
          cp config.xml platforms/android/app/src/main/res/xml/
          # 复制config.txt到网页目录
          cp config.txt platforms/android/app/src/main/assets/www/
          echo "✅ 所有文件复制完成"

      # 步骤8：配置Gradle版本（用根目录platforms路径）
      - name: 配置Gradle 7.5版本（兼容Cordova）
        run: |
          cd platforms/android  # 根目录的platforms路径
          mkdir -p gradle/wrapper
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip" > gradle/wrapper/gradle-wrapper.properties
          echo "✅ Gradle版本配置完成"

      # 步骤9：编译生成APK（用根目录platforms路径）
      - name: 编译生成APK
        run: |
          # 进入根目录的platforms/android编译（避免路径混乱）
          cd platforms/android
          echo "开始编译APK，首次编译可能需要10-15分钟..."
          ./gradlew assembleRelease  # 用Gradle原生命令，更稳定
          
          # 检查APK是否生成（根目录platforms路径）
          if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "✅ APK编译成功"
          else
            echo "❌ APK编译失败"
            exit 1
          fi

      # 步骤10：保存APK（路径改为根目录platforms）
      - name: 上传APK文件供下载
        uses: actions/upload-artifact@v4
        with:
          name: 我的安卓应用
          # 根目录platforms的APK实际路径
          path: platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk
