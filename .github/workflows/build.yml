      ########################################################################
      # 步骤7：生成项目核心代码（修正CordovaLib Manifest XML语法）
      ########################################################################
      - name: 生成项目核心代码
        run: |
          # 1. 生成CordovaActivity（核心页面逻辑，不变）
          CORDOVA_ACTIVITY="${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova/CordovaActivity.java"
          cat > "$CORDOVA_ACTIVITY" << 'EOF'
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }};

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  // 启用JavaScript和DOM存储
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  
                  // 配置缩放和显示
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  // 允许混合内容（HTTP+HTTPS）
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }

                  // 配置WebViewClient处理页面跳转和SSL
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }

                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略SSL错误（生产环境慎用）
                      }
                  });

                  // 配置WebChromeClient处理JavaScript对话框
                  webView.setWebChromeClient(new WebChromeClient());
                  setContentView(webView);

                  // 加载目标URL
                  webView.loadUrl("${{ env.CUSTOM_URL }}");
                  
                  // 设置超时关闭页面
                  new android.os.Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              // 支持返回键导航
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
          }
          EOF
          [ -f "$CORDOVA_ACTIVITY" ] && echo "✅ 生成CordovaActivity.java" || exit 1

          # 2. 生成app模块的AndroidManifest.xml（不变）
          APP_MANIFEST_FILE="${{ env.PROJECT_ROOT }}/app/src/main/AndroidManifest.xml"
          cat > "$APP_MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="${{ env.APP_PACKAGE }}">
              
              <!-- 必要权限声明 -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme">
                  
                  <activity
                      android:name="org.apache.cordova.CordovaActivity"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode"
                      android:label="@string/app_name"
                      android:launchMode="singleTask">
                      
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          [ -f "$APP_MANIFEST_FILE" ] && echo "✅ 生成app模块AndroidManifest.xml" || exit 1

          # 3. 生成CordovaLib模块的AndroidManifest.xml（修正XML语法）
          CORDOVALIB_MANIFEST_DIR="${{ env.PROJECT_ROOT }}/CordovaLib/src/main"
          # 先创建CordovaLib的Manifest目录（确保目录存在）
          mkdir -p "$CORDOVALIB_MANIFEST_DIR" || { echo "❌ 创建CordovaLib目录失败"; exit 1; }
          CORDOVALIB_MANIFEST_FILE="$CORDOVALIB_MANIFEST_DIR/AndroidManifest.xml"
          
          # 核心修正：确保manifest标签属性完整、引号闭合、无多余空格
          cat > "$CORDOVALIB_MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="org.apache.cordova"
              android:versionCode="1"
              android:versionName="1.0">

              <!-- 声明SDK版本（与app模块一致） -->
              <uses-sdk
                  android:minSdkVersion="21"
                  android:targetSdkVersion="30" />

              <!-- 库模块无需额外配置，仅保留基础application标签 -->
              <application
                  android:allowBackup="true"
                  android:supportsRtl="true" />

          </manifest>
          EOF
          
          # 验证文件生成结果
          if [ -f "$CORDOVALIB_MANIFEST_FILE" ] && [ -s "$CORDOVALIB_MANIFEST_FILE" ]; then
            echo "✅ 生成CordovaLib模块AndroidManifest.xml（语法已修正）"
            # 输出文件内容供调试（可选，确认语法正确性）
            echo "📄 CordovaLib Manifest内容："
            cat "$CORDOVALIB_MANIFEST_FILE"
          else
            echo "❌ CordovaLib模块AndroidManifest.xml生成失败"
            exit 1
          fi
