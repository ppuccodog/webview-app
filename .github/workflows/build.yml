name: 安卓自定义APP自动构建（精准解析config.xml）
on:
  workflow_dispatch:  # 手动触发构建
permissions:
  contents: write     # 允许写入Releases

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：拉取代码+安装基础依赖
      ########################################################################
      - name: 拉取GitHub项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装核心依赖工具
        run: |
          sudo apt-get update -y
          sudo apt-get install -y xmlstarlet imagemagick openjdk-11-jdk tree
          # 配置JDK环境
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          
          # 验证Java安装
          java -version
          javac -version

      ########################################################################
      # 步骤2：配置Android SDK+Gradle环境
      ########################################################################
      - name: 配置Android构建环境
        run: |
          export TIMEOUT=300
          # 1. 清理旧环境
          rm -rf "$HOME/android-sdk" "$HOME/gradle-7.0.2"
          
          # 2. 安装Android SDK
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 3. 下载SDK Tools
          SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            echo "❌ 下载SDK Tools失败，重试1次"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          # 解压并整理SDK目录结构
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 4. 接受SDK许可证+安装必要组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" \
            "platforms;android-30" \
            "build-tools;30.0.2" \
            "platform-tools" \
            "extras;android;m2repository" \
            --verbose --no_https || exit 1

          # 5. 安装并验证Gradle 7.0.2
          GRADLE_VERSION="7.0.2"
          GRADLE_PATH="$HOME/gradle-$GRADLE_VERSION"
          GRADLE_URL="https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip"
          
          # 确保干净的安装
          rm -rf "$GRADLE_PATH"
          
          # 下载并验证Gradle
          if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
            echo "❌ 下载Gradle失败，重试1次"
            wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
          fi
          
          # 验证压缩包完整性
          unzip -t gradle.zip || {
            echo "❌ Gradle压缩包损坏，删除并重试"
            rm gradle.zip
            wget "$GRADLE_URL" -O gradle.zip || exit 1
            unzip -t gradle.zip || {
              echo "❌ 再次验证失败，Gradle压缩包损坏"
              exit 1
            }
          }
          
          # 解压并设置权限
          unzip -q gradle.zip -d "$HOME"
          chmod -R 755 "$GRADLE_PATH"
          
          # 验证Gradle安装
          echo "✅ 验证Gradle版本："
          "$GRADLE_PATH/bin/gradle" --version || {
            echo "❌ Gradle安装失败"
            exit 1
          }
          
          # 配置环境变量
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "GRADLE_URL=$GRADLE_URL" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      ########################################################################
      # 步骤3：解析配置文件（针对提供的config.xml优化解析）
      ########################################################################
      - name: 解析配置文件（精准解析config.xml）
        run: |
          # 初始化默认配置
          APP_PACKAGE="com.my.defaultapp"
          APP_NAME="我的应用"
          APP_VERSION="1.0.0"
          LOAD_TIMEOUT="60000"
          CUSTOM_URL="https://www.baidu.com"

          # 显示当前工作目录文件，确认config.xml是否存在
          echo "📂 当前工作目录文件："
          ls -la
          
          # 读取config.xml（若存在）- 精准解析
          if [ -f "config.xml" ]; then
            echo "✅ 发现config.xml，尝试解析..."
            
            # 验证XML格式是否有效
            if xmlstarlet val -q "config.xml"; then
              echo "✅ config.xml格式有效，开始解析..."
              
              # 读取包名（widget/@id）
              CONFIG_PACKAGE=$(xmlstarlet sel -t -v "/widget/@id" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_PACKAGE" ] && [[ "$CONFIG_PACKAGE" =~ ^[a-zA-Z0-9.]+$ ]]; then
                APP_PACKAGE="$CONFIG_PACKAGE"
                echo "📦 从config.xml获取包名：$APP_PACKAGE"
              else
                echo "⚠️ config.xml中未找到有效包名，使用默认值"
              fi
              
              # 读取应用名称（widget/name）
              CONFIG_NAME=$(xmlstarlet sel -t -v "/widget/name" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_NAME" ]; then
                APP_NAME="$CONFIG_NAME"
                echo "🏷️ 从config.xml获取应用名称：$APP_NAME"
              else
                echo "⚠️ config.xml中未找到应用名称，使用默认值"
              fi
              
              # 读取版本号（widget/@version）
              CONFIG_VERSION=$(xmlstarlet sel -t -v "/widget/@version" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_VERSION" ] && [[ "$CONFIG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                APP_VERSION="$CONFIG_VERSION"
                echo "🔢 从config.xml获取版本号：$APP_VERSION"
              else
                echo "⚠️ config.xml中未找到有效版本号，使用默认值"
              fi
              
              # 读取超时设置
              CONFIG_TIMEOUT=$(xmlstarlet sel -t -v "/widget/platform[@name='android']/preference[@name='LoadUrlTimeoutValue']/@value" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_TIMEOUT" ] && [[ "$CONFIG_TIMEOUT" =~ ^[0-9]+$ ]]; then
                LOAD_TIMEOUT="$CONFIG_TIMEOUT"
                echo "⏱️ 从config.xml获取超时设置：$LOAD_TIMEOUT"
              fi
            else
              echo "⚠️ config.xml格式无效，使用默认配置"
              cat "config.xml"  # 显示无效的XML内容用于调试
            fi
          else
            echo "⚠️ 未找到config.xml，使用默认配置"
          fi

          # 读取config.txt（若存在）
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt | tr -d '\r')
            [[ ! $CUSTOM_URL =~ ^http ]] && CUSTOM_URL="https://$CUSTOM_URL"
            echo "🌐 从config.txt获取网址：$CUSTOM_URL"
          fi

          # 处理应用名称特殊字符（确保不为空）
          APP_NAME_SAFE=$(echo "$APP_NAME" | sed 's/[^a-zA-Z0-9_-]/_/g')
          [ -z "$APP_NAME_SAFE" ] && APP_NAME_SAFE="my_app_${RANDOM:0:4}"

          # 输出最终配置信息（关键验证步骤）
          echo -e "\n📋 最终配置确认："
          echo "   - 包名：$APP_PACKAGE"
          echo "   - 应用名称：$APP_NAME"
          echo "   - 安全名称：$APP_NAME_SAFE"
          echo "   - 版本：$APP_VERSION"
          echo "   - 目标网址：$CUSTOM_URL"
          echo "   - 超时设置：$LOAD_TIMEOUT"

          # 保存到环境变量
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_NAME_SAFE=$APP_NAME_SAFE" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "LOAD_TIMEOUT=${LOAD_TIMEOUT:-60000}" >> $GITHUB_ENV
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV

          # 提前定义项目路径
          PROJECT_ROOT="$GITHUB_WORKSPACE/myapp/android-project"
          echo "PROJECT_ROOT=$PROJECT_ROOT" >> $GITHUB_ENV
          echo "APP_RES_DIR=$PROJECT_ROOT/app/src/main/res" >> $GITHUB_ENV

      ########################################################################
      # 步骤4：生成安卓项目基础结构
      ########################################################################
      - name: 创建安卓项目基础结构
        run: |
          echo "✅ 开始创建项目结构：${{ env.PROJECT_ROOT }}"
          
          # 创建完整项目目录结构
          mkdir -p "${{ env.PROJECT_ROOT }}/app/src/main"
          mkdir -p "${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova"
          
          # 创建资源目录
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-mdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-hdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xxhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xxxhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/values"
          
          # 创建Java源码目录（基于实际包名）
          JAVA_DIR="${{ env.PROJECT_ROOT }}/app/src/main/java/$(echo ${{ env.APP_PACKAGE }} | tr '.' '/')"
          mkdir -p "$JAVA_DIR"
          echo "JAVA_DIR=$JAVA_DIR" >> $GITHUB_ENV
          
          # 验证目录结构
          echo -e "\n📁 项目基础结构："
          tree -L 5 "${{ env.PROJECT_ROOT }}"

      ########################################################################
      # 步骤5：生成应用图标和资源文件
      ########################################################################
      - name: 生成应用图标和资源文件
        run: |
          echo "✅ 在${{ env.APP_RES_DIR }}生成资源文件"
          
          # 定义图标规格
          declare -A ICON_SPECS=(
            ["mdpi"]="48x48"
            ["hdpi"]="72x72"
            ["xhdpi"]="96x96"
            ["xxhdpi"]="144x144"
            ["xxxhdpi"]="192x192"
          )

          # 生成图标
          for DPI in "${!ICON_SPECS[@]}"; do
            SIZE=${ICON_SPECS[$DPI]}
            DEST_PATH="${{ env.APP_RES_DIR }}/mipmap-$DPI/ic_launcher.png"
            
            # 生成图标
            if ! convert -size "$SIZE" xc:transparent \
              -fill "#2196F3" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE/2)),0" \
              -fill "white" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE*3/10)),0" \
              -fill "#2196F3" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE/10)),0" \
              "$DEST_PATH"; then
              
              # 备选方案
              convert -size "$SIZE" xc:"#2196F3" "$DEST_PATH"
            fi
            
            # 验证图标
            if [ ! -f "$DEST_PATH" ] || [ ! -s "$DEST_PATH" ]; then
              echo "❌ 图标生成失败：$DEST_PATH"
              exit 1
            fi
            echo "✅ 生成图标：$DEST_PATH"
          done

          # 生成strings.xml（使用从config.xml获取的应用名称）
          STRINGS_FILE="${{ env.APP_RES_DIR }}/values/strings.xml"
          cat > "$STRINGS_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">${{ env.APP_NAME }}</string>
              <string name="launcher_name">${{ env.APP_NAME }}</string>
          </resources>
          EOF
          [ -f "$STRINGS_FILE" ] && echo "✅ 生成strings.xml" || { echo "❌ strings.xml生成失败"; exit 1; }

          # 生成styles.xml
          STYLES_FILE="${{ env.APP_RES_DIR }}/values/styles.xml"
          cat > "$STYLES_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                  <item name="android:windowNoTitle">true</item>
                  <item name="android:windowActionBar">false</item>
                  <item name="android:windowBackground">@android:color/white</item>
              </style>
          </resources>
          EOF
          [ -f "$STYLES_FILE" ] && echo "✅ 生成styles.xml" || { echo "❌ styles.xml生成失败"; exit 1; }

          # 验证资源
          echo -e "\n📄 资源文件列表："
          find "${{ env.APP_RES_DIR }}" -type f

      ########################################################################
      # 步骤6：生成安卓项目代码和配置文件
      ########################################################################
      - name: 生成安卓项目代码和配置
        run: |
          # 生成CordovaActivity核心代码
          CORDOVA_ACTIVITY="${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova/CordovaActivity.java"
          cat > "$CORDOVA_ACTIVITY" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }};

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  // 基础配置
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  // 允许HTTP/HTTPS混合内容
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }

                  // 处理链接和证书错误
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }

                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略证书错误（调试用）
                      }
                  });

                  // 支持JS弹窗
                  webView.setWebChromeClient(new WebChromeClient());

                  // 加载目标网址
                  webView.loadUrl("${{ env.CUSTOM_URL }}");
                  setContentView(webView);
              }

              // 返回键后退功能
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
          }
          EOF

          # 生成主活动代码（使用从config.xml获取的包名）
          MAIN_ACTIVITY="${{ env.JAVA_DIR }}/MainActivity.java"
          cat > "$MAIN_ACTIVITY" << EOF
          package ${{ env.APP_PACKAGE }};
          import org.apache.cordova.CordovaActivity;
          public class MainActivity extends CordovaActivity {}
          EOF

          # 生成AndroidManifest.xml
          MANIFEST_FILE="${{ env.PROJECT_ROOT }}/app/src/main/AndroidManifest.xml"
          cat > "$MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="${{ env.APP_PACKAGE }}">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <!-- 必要权限 -->
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              
              <application
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true"
                  android:icon="@mipmap/ic_launcher">
                  
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 生成Gradle配置文件（使用从config.xml获取的版本号）
          cat > "${{ env.PROJECT_ROOT }}/app/build.gradle" << EOF
          apply plugin: 'com.android.application'
          android {
              compileSdk 30
              namespace '${{ env.APP_PACKAGE }}'
              defaultConfig {
                  applicationId "${{ env.APP_PACKAGE }}"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "${{ env.APP_VERSION }}"
                  multiDexEnabled true
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              lintOptions {
                  abortOnError false
              }
              sourceSets {
                  main {
                      res.srcDirs = ['src/main/res']
                  }
              }
          }
          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
              implementation 'androidx.multidex:multidex:2.0.1'
          }
          EOF

          # 其他Gradle配置文件
          cat > "${{ env.PROJECT_ROOT }}/gradle.properties" << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          EOF

          cat > "${{ env.PROJECT_ROOT }}/build.gradle" << 'EOF'
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          allprojects {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
          }
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          cat > "${{ env.PROJECT_ROOT }}/settings.gradle" << 'EOF'
          include ':app', ':CordovaLib'
          EOF

          cat > "${{ env.PROJECT_ROOT }}/CordovaLib/build.gradle" << 'EOF'
          apply plugin: 'com.android.library'
          android {
              compileSdk 30
              namespace 'org.apache.cordova'
              defaultConfig {
                  minSdkVersion 21
                  targetSdkVersion 30
              }
              lintOptions { abortOnError false }
          }
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 配置Gradle wrapper
          mkdir -p "${{ env.PROJECT_ROOT }}/gradle/wrapper"
          cat > "${{ env.PROJECT_ROOT }}/gradle/wrapper/gradle-wrapper.properties" << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=${{ env.GRADLE_URL }}
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          cat > "${{ env.PROJECT_ROOT }}/gradlew" << 'EOF'
          #!/usr/bin/env sh
          GRADLE_HOME="${HOME}/gradle-7.0.2"
          export PATH="$GRADLE_HOME/bin:$PATH"
          exec gradle "$@"
          EOF
          chmod +x "${{ env.PROJECT_ROOT }}/gradlew"

      ########################################################################
      # 步骤7：编译与发布
      ########################################################################
      - name: 编译APK
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_HOME="${{ env.GRADLE_PATH }}"
          export PATH="$GRADLE_HOME/bin:$PATH"
          
          cd "${{ env.PROJECT_ROOT }}" || { echo "❌ 项目目录不存在"; exit 1; }
          
          # 执行构建
          echo "✅ 开始构建APK..."
          gradle clean :app:assembleRelease --stacktrace --info || {
            echo "❌ 编译失败"
            exit 1
          }
          
          # 查找APK文件
          APK_PATH=$(find "app/build/outputs/apk/release" -name "*.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "❌ 未找到APK文件"
            exit 1
          fi
          
          # 使用从config.xml获取的名称和版本号命名APK
          cp "$APK_PATH" "$GITHUB_WORKSPACE/${{ env.APP_NAME_SAFE }}_v${{ env.APP_VERSION }}.apk"
          echo "APK_PATH=$GITHUB_WORKSPACE/${{ env.APP_NAME_SAFE }}_v${{ env.APP_VERSION }}.apk" >> $GITHUB_ENV

      - name: 发布到Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.APP_VERSION }}"
          release_name: "${{ env.APP_NAME }} v${{ env.APP_VERSION }}"
          files: ${{ env.APK_PATH }}
          body: |
            自动构建的${{ env.APP_NAME }}安装包
            - 版本：v${{ env.APP_VERSION }}
            - 包名：${{ env.APP_PACKAGE }}
            - 目标网址：${{ env.CUSTOM_URL }}
    
