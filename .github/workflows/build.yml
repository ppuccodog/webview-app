name: 安卓自定义APP自动构建（支持config.xml+图标）
on:
  workflow_dispatch:  # 手动触发构建（也可改为push自动触发）
permissions:
  contents: write     # 允许写入Releases

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：拉取代码+安装依赖（解析XML+处理图标）
      ########################################################################
      - name: 拉取GitHub项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装依赖工具（xmlstarlet解析XML，imagemagick处理图标）
        run: |
          # 安装XML解析工具（读取config.xml）和图片处理工具（生成默认图标）
          sudo apt-get update -y
          sudo apt-get install -y xmlstarlet imagemagick openjdk-11-jdk
          
          # 配置JDK环境
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          ########################################################################
          # 步骤2：下载Android SDK+Gradle（构建安卓环境）
          ########################################################################
          export TIMEOUT=300
          # 1. 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 2. 下载SDK Tools（优先阿里云镜像，加速下载）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          # 解压SDK Tools到指定目录
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 3. 接受SDK许可证+安装安卓构建组件（API 30+构建工具）
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" \
            "platforms;android-30" \
            "build-tools;30.0.2" \
            "platform-tools" \
            "extras;android;m2repository" \
            --verbose --no_https || exit 1

          # 4. 下载Gradle 7.0.2（构建工具）
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      ########################################################################
      # 步骤3：解析config.xml和config.txt配置（核心：自动读取用户自定义信息）
      ########################################################################
      - name: 解析配置文件（config.xml + config.txt）
        run: |
          # -------------------------- 解析config.xml --------------------------
          echo "📝 开始解析config.xml配置"
          # 检查config.xml是否存在，不存在则用默认值
          if [ ! -f "config.xml" ]; then
            echo "⚠️ 未找到config.xml，使用默认配置"
            APP_PACKAGE="com.my.defaultapp"  # 默认包名
            APP_NAME="默认应用"               # 默认应用名称
            APP_VERSION="1.0.0"              # 默认版本号
            APP_DESCRIPTION="自定义网址APP"  # 默认描述
            LOAD_TIMEOUT="60000"             # 默认加载超时（60秒）
          else
            # 从config.xml读取配置（使用xmlstarlet工具）
            APP_PACKAGE=$(xmlstarlet sel -t -v "/widget/@id" config.xml)
            APP_NAME=$(xmlstarlet sel -t -v "/widget/name" config.xml)
            APP_VERSION=$(xmlstarlet sel -t -v "/widget/@version" config.xml)
            APP_DESCRIPTION=$(xmlstarlet sel -t -v "/widget/description" config.xml)
            LOAD_TIMEOUT=$(xmlstarlet sel -t -v "/widget/platform[@name='android']/preference[@name='LoadUrlTimeoutValue']/@value" config.xml)
            
            # 补全默认值（防止用户未配置某字段）
            APP_PACKAGE=${APP_PACKAGE:-"com.my.defaultapp"}
            APP_NAME=${APP_NAME:-"默认应用"}
            APP_VERSION=${APP_VERSION:-"1.0.0"}
            APP_DESCRIPTION=${APP_DESCRIPTION:-"自定义网址APP"}
            LOAD_TIMEOUT=${LOAD_TIMEOUT:-"60000"}
          fi

          # -------------------------- 解析config.txt --------------------------
          echo "🌐 开始解析config.txt网址"
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt)
            # 处理网址格式（确保http/https前缀）
            if [[ ! $CUSTOM_URL =~ ^http ]]; then
              CUSTOM_URL="https://$CUSTOM_URL"
              echo "⚠️ 网址缺少http/https前缀，自动补全为：$CUSTOM_URL"
            fi
          else
            CUSTOM_URL="https://www.baidu.com"
            echo "⚠️ 未找到config.txt，使用默认网址：$CUSTOM_URL"
          fi

          # -------------------------- 输出配置信息 --------------------------
          echo -e "\n✅ 最终配置信息："
          echo "   - 应用包名：$APP_PACKAGE"
          echo "   - 应用名称：$APP_NAME"
          echo "   - 版本号：$APP_VERSION"
          echo "   - 描述：$APP_DESCRIPTION"
          echo "   - 加载超时：$LOAD_TIMEOUT ms"
          echo "   - 目标网址：$CUSTOM_URL"

          # -------------------------- 保存到环境变量 --------------------------
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "LOAD_TIMEOUT=$LOAD_TIMEOUT" >> $GITHUB_ENV
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV

      ########################################################################
      # 步骤4：处理应用图标（从icon目录读取，缺失则生成默认图标）
      ########################################################################
      - name: 处理应用图标（自定义/默认）
        run: |
          # 创建安卓资源目录（存放不同分辨率图标）
          RES_DIR="/home/runner/work/webview-app/webview-app/myapp/android-project/app/src/main/res"
          mkdir -p "$RES_DIR/mipmap-mdpi" "$RES_DIR/mipmap-hdpi" "$RES_DIR/mipmap-xhdpi" "$RES_DIR/mipmap-xxhdpi" "$RES_DIR/mipmap-xxxhdpi"
          
          # 图标映射表（用户图标路径 → 安卓图标路径 + 尺寸）
          declare -A ICON_MAP=(
            ["icon/icon-mdpi.png"]="$RES_DIR/mipmap-mdpi/ic_launcher.png:48x48"
            ["icon/icon-hdpi.png"]="$RES_DIR/mipmap-hdpi/ic_launcher.png:72x72"
            ["icon/icon-xhdpi.png"]="$RES_DIR/mipmap-xhdpi/ic_launcher.png:96x96"
            ["icon/icon-xxhdpi.png"]="$RES_DIR/mipmap-xxhdpi/ic_launcher.png:144x144"
            ["icon/icon-xxxhdpi.png"]="$RES_DIR/mipmap-xxxhdpi/ic_launcher.png:192x192"
          )

          # 遍历图标映射表，复制自定义图标或生成默认图标
          for USER_ICON in "${!ICON_MAP[@]}"; do
            DEST_INFO=${ICON_MAP[$USER_ICON]}
            DEST_PATH=${DEST_INFO%%:*}  # 安卓图标路径
            DEST_SIZE=${DEST_INFO#*:}   # 图标尺寸
            if [ -f "$USER_ICON" ]; then
              # 存在自定义图标：复制并缩放至目标尺寸
              convert "$USER_ICON" -resize "$DEST_SIZE!" "$DEST_PATH"
              echo "✅ 已使用自定义图标：$USER_ICON → $DEST_PATH（$DEST_SIZE）"
            else
              # 不存在自定义图标：生成蓝色默认图标（使用imagemagick）
              convert -size "$DEST_SIZE" xc:#2196F3 -fill white -font Arial -pointsize 16 -gravity center "APP" "$DEST_PATH"
              echo "⚠️ 未找到自定义图标：$USER_ICON，生成默认蓝色图标 → $DEST_PATH（$DEST_SIZE）"
            fi
          done

          # 保存图标配置到环境变量
          echo "RES_DIR=$RES_DIR" >> $GITHUB_ENV

      ########################################################################
      # 步骤5：生成安卓项目代码（使用解析的配置）
      ########################################################################
      - name: 生成安卓项目代码+配置文件
        run: |
          # 初始化项目路径
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          WWW_DIR="$APP_DIR/src/main/assets/www"
          
          # 创建项目目录（按包名拆分Java目录，如com.xxx.yyy → com/xxx/yyy）
          JAVA_DIR="$APP_DIR/src/main/java/$(echo ${{ env.APP_PACKAGE }} | tr '.' '/')"
          mkdir -p "$JAVA_DIR" "$WWW_DIR" "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"

          # -------------------------- 1. 生成WebView核心代码 --------------------------
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }}; // 从config.xml读取超时时间

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  // 基础配置（支持JS、跨域、缩放）
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  // 允许混合内容（HTTP资源在HTTPS页面加载）
                  if (android.os.Build.VERSION.SDK_INT >= android.os
