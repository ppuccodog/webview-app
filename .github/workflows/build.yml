name: 安卓套壳应用构建+自动发版
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换为阿里云Ubuntu镜像源
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 读取配置文件
        run: |
          # 默认配置
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取配置
          if [ -f "config.txt" ]; then
            echo "✅ 读取 config.txt 配置..."
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            echo "⚠️ 未找到 config.txt，使用默认配置..."
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 验证配置
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            echo "⚠️ 包名格式无效，使用默认包名：$DEFAULT_APP_PACKAGE"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            echo "⚠️ 版本号必须为整数，使用默认值：$DEFAULT_APP_VERSION_CODE"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 写入环境变量
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV

      - name: 构建安卓应用
        run: |
          # 加载环境变量
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取配置参数
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"

          # 创建项目目录
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          APP_LAYOUT_DIR="$APP_DIR/src/main/res/layout"
          APP_DRAWABLE_DIR="$APP_DIR/src/main/res/drawable"
          
          # 图标目录配置
          APP_ICON_DIRS=(
            "$APP_DIR/src/main/res/mipmap-mdpi"
            "$APP_DIR/src/main/res/mipmap-hdpi"
            "$APP_DIR/src/main/res/mipmap-xhdpi"
            "$APP_DIR/src/main/res/mipmap-xxhdpi"
          )
          for dir in "${APP_ICON_DIRS[@]}"; do
            mkdir -p "$dir"
          done
          
          # 图标复制逻辑
          declare -A ICON_MAPPING=(
            ["icon/48.png"]="$APP_DIR/src/main/res/mipmap-mdpi/ic_launcher.png"
            ["icon/72.png"]="$APP_DIR/src/main/res/mipmap-hdpi/ic_launcher.png"
            ["icon/96.png"]="$APP_DIR/src/main/res/mipmap-xhdpi/ic_launcher.png"
            ["icon/144.png"]="$APP_DIR/src/main/res/mipmap-xxhdpi/ic_launcher.png"
          )
          
          MISSING_ICON=0
          for src in "${!ICON_MAPPING[@]}"; do
            dest="${ICON_MAPPING[$src]}"
            if [ -f "$src" ]; then
              cp "$src" "$dest"
              echo "✅ 已复制图标：$src -> $dest"
            else
              echo "⚠️ 未找到图标文件：$src，将使用默认图标"
              MISSING_ICON=1
            fi
          done
          
          # 生成默认图标
          if [ $MISSING_ICON -eq 1 ]; then
            echo "ℹ️ 生成默认图标补充缺失资源..."
            for dest in "${ICON_MAPPING[@]}"; do
              if [ ! -f "$dest" ]; then
                cat > "$dest" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval">
    <solid android:color="#2196F3"/>
</shape>
EOF
                echo "✅ 生成默认图标：$dest"
              fi
            done
          fi

          # 清理旧项目并创建目录
          rm -rf "$PROJECT_PATH"
          mkdir -p "$APP_JAVA_DIR" "$APP_LAYOUT_DIR" "$APP_DRAWABLE_DIR"
          mkdir -p "$APP_DIR/src/main/res/values" "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"

          # 生成主布局文件
          cat > "$APP_LAYOUT_DIR/activity_main.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <WebView
        android:id="@+id/webview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

    <LinearLayout
        android:id="@+id/loading_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="center"
        android:orientation="vertical"
        android:background="@drawable/loading_bg_gradient">

        <ProgressBar
            android:id="@+id/loading_progress"
            android:layout_width="60dp"
            android:layout_height="60dp"
            android:indeterminate="true"
            android:indeterminateDrawable="@drawable/loading_circle" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="20dp"
            android:text="加载中..."
            android:textSize="18sp"
            android:textColor="#333333"
            android:textStyle="bold" />

    </LinearLayout>
</RelativeLayout>
EOF

          # 生成渐变背景
          cat > "$APP_DRAWABLE_DIR/loading_bg_gradient.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:angle="90"
        android:centerColor="#F8F8F8"
        android:endColor="#FFFFFF"
        android:startColor="#F0F0F0"
        android:type="linear" />
</shape>
EOF

          # 生成加载动画
          cat > "$APP_DRAWABLE_DIR/loading_circle.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1200"
    android:fromDegrees="0"
    android:pivotX="50%"
    android:pivotY="50%"
    android:toDegrees="360">

    <shape
        android:innerRadius="20dp"
        android:shape="ring"
        android:thickness="6dp"
        android:useLevel="false">

        <gradient
            android:centerColor="#40C4FF"
            android:endColor="#00BFA5"
            android:startColor="#2196F3"
            android:type="sweep" />
    </shape>
</animated-rotate>
EOF

          # 生成字符串资源
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$APP_NAME</string>
    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
</resources>
EOF

          # 生成WebView工具类
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << 'EOF'
package org.apache.cordova;
import android.content.Context;
import android.os.Handler;
import android.view.View;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.net.http.SslError;
import android.widget.LinearLayout;
import android.widget.Toast;

public class WebViewHelper {
    private WebView webView;
    private LinearLayout loadingLayout;
    private Context context;
    private static final int LOAD_TIMEOUT = 80000;

    public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
        this.context = context;
        this.webView = webView;
        this.loadingLayout = loadingLayout;
        initWebViewSettings();
    }

    private void initWebViewSettings() {
        WebSettings webSettings = webView.getSettings();
        webSettings.setJavaScriptEnabled(true);
        webSettings.setDomStorageEnabled(true);
        webSettings.setAllowFileAccess(true);
        webSettings.setAllowContentAccess(true);
        
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
        }
        
        webSettings.setSupportZoom(true);
        webSettings.setBuiltInZoomControls(true);
        webSettings.setDisplayZoomControls(false);
        webSettings.setLoadWithOverviewMode(true);
        webSettings.setUseWideViewPort(true);
        
        webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
    }

    public void setWebViewClient() {
        webView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
                if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                    loadingLayout.setVisibility(View.VISIBLE);
                }
            }
            
            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                    loadingLayout.setVisibility(View.GONE);
                }
            }
            
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                view.loadUrl(request.getUrl().toString());
                return true;
            }
            
            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                handler.proceed();
            }
            
            @Override
            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                Toast.makeText(context, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                    loadingLayout.setVisibility(View.GONE);
                }
            }
        });
        
        webView.setWebChromeClient(new WebChromeClient());
    }

    public void loadUrl(String url) {
        webView.loadUrl(url);
        new Handler().postDelayed(() -> {
            if (webView.getProgress() < 100) {
                Toast.makeText(context, "加载超时，即将关闭", Toast.LENGTH_SHORT).show();
                ((android.app.Activity) context).finish();
            }
        }, LOAD_TIMEOUT);
    }

    public WebView getWebView() {
        return webView;
    }
}
EOF

          # 生成主Activity
          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
package $APP_PACKAGE;
import android.app.Activity;
import android.os.Bundle;
import android.webkit.WebView;
import android.widget.LinearLayout;
import org.apache.cordova.WebViewHelper;
import $APP_PACKAGE.R;

public class MainActivity extends Activity {
    private WebViewHelper webViewHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        WebView webView = findViewById(R.id.webview);
        LinearLayout loadingLayout = findViewById(R.id.loading_layout);
        
        webViewHelper = new WebViewHelper(this, webView, loadingLayout);
        webViewHelper.setWebViewClient();
        webViewHelper.loadUrl("$CUSTOM_URL");
    }
    
    @Override
    public void onBackPressed() {
        if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
            webViewHelper.getWebView().goBack();
        } else {
            super.onBackPressed();
        }
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        if (webViewHelper != null) {
            webViewHelper.getWebView().onPause();
        }
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        if (webViewHelper != null) {
            webViewHelper.getWebView().onResume();
        }
    }
    
    @Override
    protected void onDestroy() {
        if (webViewHelper != null) {
            webViewHelper.getWebView().destroy();
        }
        super.onDestroy();
    }
}
EOF

          # 生成AndroidManifest.xml（已修复YAML语法）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
          package="$APP_PACKAGE">
    <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
    
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
    
    <application
        android:label="$APP_NAME"
        android:theme="@style/AppTheme"
        android:hardwareAccelerated="true"
        android:usesCleartextTraffic="true"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher">
        
        <activity 
            android:name=".MainActivity"
            android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
            android:launchMode="singleTask"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
            <intent-filter>
                <action android:name="android.intent.action.VIEW"/>
                <category android:name="android.intent.category.DEFAULT"/>
                <category android:name="android.intent.category.BROWSABLE"/>
                <data android:scheme="http"/>
                <data android:scheme="https"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
EOF

          # 生成gradle.properties
          cat > "$ANDROID_ROOT/gradle.properties" << 'EOF'
android.useAndroidX=true
android.enableJetifier=false
org.gradle.jvmargs=-Xmx1536m
org.gradle.parallel=true
org.gradle.caching=true
EOF

          # 生成settings.gradle
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
include ':app', ':CordovaLib'
rootProject.name = '$APP_NAME'
EOF

          # 生成CordovaLib/build.gradle
          cat > "$CORDOVA_LIB_DIR/build.gradle" << 'EOF'
buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}
apply plugin: 'com.android.library'

android {
    compileSdk 30
    namespace 'org.apache.cordova'
    
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
    
    lintOptions {
        abortOnError false
        disable 'UnusedResources'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
}
EOF

          # 生成app/build.gradle
          cat > "$APP_DIR/build.gradle" << EOF
buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/google' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}
apply plugin: 'com.android.application'

android {
    compileSdk 30
    namespace '$APP_PACKAGE'
    
    defaultConfig {
        applicationId "$APP_PACKAGE"
        minSdk 21
        targetSdk 30
        versionCode $APP_VERSION_CODE
        versionName "$APP_VERSION_NAME"
    }
    
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    lintOptions {
        abortOnError false
    }
    
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
    
    sourceSets {
        main {
            res.srcDirs = [
                'src/main/res',
                'src/main/res/mipmap-mdpi',
                'src/main/res/mipmap-hdpi',
                'src/main/res/mipmap-xhdpi',
                'src/main/res/mipmap-xxhdpi'
            ]
        }
    }
}

dependencies {
    implementation project(':CordovaLib')
    implementation 'androidx.appcompat:appcompat:1.0.2'
}
EOF

          # 生成混淆规则
          cat > "$APP_DIR/proguard-rules.pro" << EOF
-keepclassmembers class * extends android.webkit.WebViewClient {
    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
    public boolean *(android.webkit.WebView, java.lang.String);
}
-keepclassmembers class * extends android.webkit.WebChromeClient {
    public void *(android.webkit.WebView, java.lang.String);
}

-keep class $APP_PACKAGE.R { *; }
-keep class $APP_PACKAGE.R$layout { *; }
-keep class $APP_PACKAGE.R$id { *; }
-keep class $APP_PACKAGE.R$string { *; }
-keep class $APP_PACKAGE.R$mipmap { *; }
-keep class $APP_PACKAGE.R$drawable { *; }

-keep class org.apache.cordova.WebViewHelper { *; }
-keepclassmembers class org.apache.cordova.WebViewHelper {
    public <init>(android.content.Context, android.webkit.WebView, android.widget.LinearLayout);
    public void setWebViewClient();
    public void loadUrl(java.lang.String);
    public android.webkit.WebView getWebView();
}
EOF

          # 编译APK
          echo "=== 开始编译Release版本APK ==="
          cd "$ANDROID_ROOT" || exit 1
          
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew
          ./gradlew clean :app:assembleRelease --stacktrace --info
          
          # 复制APK
          APK_SOURCE_SIGNED="$APP_DIR/build/outputs/apk/release/app-release.apk"
          APK_SOURCE_UNSIGNED="$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk"
          APK_DEST="/home/runner/work/webview-app/webview-app/${APP_NAME}-v${APP_VERSION_NAME}.apk"
          
          if [ -f "$APK_SOURCE_SIGNED" ]; then
            cp "$APK_SOURCE_SIGNED" "$APK_DEST"
            echo "✅ 已复制已签名APK：$APK_DEST"
          elif [ -f "$APK_SOURCE_UNSIGNED" ]; then
            cp "$APK_SOURCE_UNSIGNED" "$APK_DEST"
            echo "✅ 已复制未签名APK：$APK_DEST"
          else
            echo "❌ 未找到APK文件"
            ls -R "$APP_DIR/build/outputs"
            exit 1
          fi

      - name: 创建并推送Git Tag
        run: |
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          TAG_NAME="v$APP_VERSION_NAME"
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if git rev-parse --verify --quiet "$TAG_NAME"; then
            echo "⚠️ 删除旧Tag $TAG_NAME"
            git tag -d "$TAG_NAME"
            git push origin --delete "$TAG_NAME" 2>/dev/null || true
          fi
          
          git tag -a "$TAG_NAME" -m "${{ env.APP_NAME }} v$APP_VERSION_NAME"
          if ! git push origin "$TAG_NAME"; then
            echo "⚠️ 重试推送Tag..."
            git push origin "$TAG_NAME" || exit 1
          fi
          echo "✅ Git Tag推送成功：$TAG_NAME"

      - name: 发布APK到GitHub Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.APP_VERSION_NAME }}"
          name: "${{ env.APP_NAME }} v${{ env.APP_VERSION_NAME }}"
          body: |
            ### 📱 应用信息
            - 应用名称：${{ env.APP_NAME }}
            - 包名：${{ env.APP_PACKAGE }}
            - 支持系统：Android 5.0+
            - 版本：v${{ env.APP_VERSION_NAME }}
            
            ### 📥 下载
            点击Assets中的APK文件下载安装
          files: /home/runner/work/webview-app/webview-app/${{ env.APP_NAME }}-v${{ env.APP_VERSION_NAME }}.apk
          draft: false
          prerelease: false
