name: 构建安卓应用（手动创建结构，摆脱缓存）
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局安装Cordova+清理全局缓存
        run: |
          npm config set registry https://registry.npmjs.org/
          # 清理npm全局缓存和Cordova模板缓存
          npm cache clean --force
          rm -rf ~/.cordova ~/.npm/_cacache
          npm install -g cordova@10.0.0 properties-parser@0.6.0 string.prototype.codepointat@1.0.1
          cordova -v

      - name: 安装JDK 8和11
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk openjdk-11-jdk -y
          echo "JDK8_PATH=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

      - name: 用JDK 11安装安卓SDK
        run: |
          export JAVA_HOME=$JDK11_PATH
          export PATH=$JAVA_HOME/bin:$PATH
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          echo "y" | $SDK_MANAGER --licenses
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

      - name: 安装Gradle 6.9
        run: |
          GRADLE_PATH="$HOME/gradle-6.9"
          wget https://services.gradle.org/distributions/gradle-6.9-bin.zip -O gradle-6.9-bin.zip
          unzip -q gradle-6.9-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 手动创建项目+无缓存配置
        run: |
          export JAVA_HOME=$JDK8_PATH
          export PATH=$JAVA_HOME/bin:$PATH
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export GRADLE_HOME=$GRADLE_PATH
          
          # 1. 彻底清空所有旧文件
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH" "$HOME/work/webview-app/webview-app/node_modules" ~/.cordova
          mkdir -p "$PROJECT_PATH/www"  # 手动创建www目录（Cordova核心目录）
          echo "✅ 手动创建项目根目录+www目录"
          
          # 2. 手动生成Cordova核心配置文件（无模板，无缓存）
          # package.json：用极特殊名称，绝对不会被当作模块
          echo '{"name": "x-webview-app-xyz123", "version": "1.0.0", "private": true, "cordova": {"platforms": ["android"]}}' > "$PROJECT_PATH/package.json"
          # config.xml：明确包名和配置，无旧缓存
          echo '<?xml version="1.0" encoding="utf-8"?>
          <widget id="com.xyz.webview123" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
            <name>XWebviewApp</name>
            <content src="index.html" />
            <access origin="*" />
            <preference name="AndroidXEnabled" value="false" />
            <preference name="android-targetSdkVersion" value="29" />
          </widget>' > "$PROJECT_PATH/config.xml"
          # www/index.html：默认首页（避免目录空）
          echo '<!DOCTYPE html><html><body>My Webview App</body></html>' > "$PROJECT_PATH/www/index.html"
          echo "✅ 手动生成所有核心配置文件"
          
          # 3. 直接添加安卓平台（不通过cordova create，无模板干扰）
          cd "$PROJECT_PATH"
          cordova platform add android@9.0.0
          echo "✅ 安卓平台添加成功"
          
          # 4. 强制覆盖platforms/android的gradle.properties（禁用AndroidX）
          ANDROID_PLATFORM_PATH="$PROJECT_PATH/platforms/android"
          echo "android.useAndroidX=false" > "$ANDROID_PLATFORM_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_PLATFORM_PATH/gradle.properties"
          echo "org.gradle.java.home=$JDK8_PATH" >> "$ANDROID_PLATFORM_PATH/gradle.properties"
          
          # 5. 验证平台目录
          if [ ! -d "$ANDROID_PLATFORM_PATH" ]; then
            echo "平台目录缺失"
            exit 1
          fi
          
          # 6. 复制网页文件
          if [ -d "/home/runner/work/webview-app/webview-app/www" ]; then
            cp -rf "$_"/* "$PROJECT_PATH/www/"
            echo "✅ 复制网页文件"
          fi
          if [ -f "/home/runner/work/webview-app/webview-app/config.txt" ]; then
            cp "$_" "$PROJECT_PATH/www/"
            echo "✅ 复制config.txt"
          fi
          
          # 7. 修复Gradle仓库
          sed -i '/jcenter.bintray.com/a \        maven { url "https://maven.google.com" }\n        maven { url "https://dl.google.com/maven/repo/" }' "$ANDROID_PLATFORM_PATH/build.gradle"
          
          # 8. 编译APK
          cordova build android --release -- --no-parallel
          
          # 9. 检查APK
          APK_PATH="$ANDROID_PLATFORM_PATH/app/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "🎉 APK生成成功！路径：$APK_PATH"
            cp "$APK_PATH" "/home/runner/work/webview-app/webview-app/final-app.apk"
          else
            echo "❌ 编译失败，日志："
            cat "$ANDROID_PLATFORM_PATH/build/outputs/logs/build.log"
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 我的安卓应用
          path: /home/runner/work/webview-app/webview-app/final-app.apk
          retention-days: 30
