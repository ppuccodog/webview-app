name: 安卓套壳应用构建+自动发版
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装依赖（含PNG生成工具）
        run: |
          export TIMEOUT=300
          # 安装基础依赖
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk imagemagick  # 用于生成PNG图标
          
          # 配置JDK环境
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools（阿里云镜像优先）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证并安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 读取配置文件
        run: |
          # 默认配置（可通过config.txt修改）
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取外部配置（不存在则用默认）
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 配置验证（避免非法格式）
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 写入环境变量（供后续步骤使用）
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV

      - name: 生成PNG默认图标（适配MT管理器替换）
        run: |
          # 定义Android标准图标尺寸（MT管理器可识别的mipmap目录）
          declare -A ICON_SIZES=(
            ["mdpi"]="48x48"    # 基础尺寸
            ["hdpi"]="72x72"    # 1.5倍
            ["xhdpi"]="96x96"   # 2倍
            ["xxhdpi"]="144x144" # 3倍
          )
          APP_ICON_BASE_DIR="$HOME/app_icons"
          mkdir -p $APP_ICON_BASE_DIR

          # 使用imagemagick生成纯色PNG图标（便于后期修改）
          for density in "${!ICON_SIZES[@]}"; do
            size=${ICON_SIZES[$density]}
            output_path="$APP_ICON_BASE_DIR/ic_launcher_$density.png"
            
            # 生成规则：蓝色背景（#2196F3）+ 白色圆形（简单易替换）
            convert -size $size xc:#2196F3 \
              -fill white -draw "circle $(( ${size%x*}/2 )) $(( ${size#*x}/2 )) $(( ${size%x*}*3/8 )) $(( ${size#*x}/2 ))" \
              $output_path
            echo "生成图标: $output_path (尺寸: $size)"
          done
          echo "ICON_BASE_DIR=$APP_ICON_BASE_DIR" >> $GITHUB_ENV

      - name: 构建安卓应用
        run: |
          # 加载环境变量
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取配置参数
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"
          ICON_BASE_DIR="${{ env.ICON_BASE_DIR }}"

          # 创建项目目录
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          mkdir -p "$APP_JAVA_DIR" "$APP_DIR/src/main/res/layout" "$APP_DIR/src/main/res/drawable" "$APP_DIR/src/main/res/values"

          # 图标目录配置（MT管理器可识别的标准路径）
          APP_ICON_DIRS=(
            "$APP_DIR/src/main/res/mipmap-mdpi"
            "$APP_DIR/src/main/res/mipmap-hdpi"
            "$APP_DIR/src/main/res/mipmap-xhdpi"
            "$APP_DIR/src/main/res/mipmap-xxhdpi"
          )
          for dir in "${APP_ICON_DIRS[@]}"; do
            mkdir -p "$dir"
          done

          # 复制生成的PNG图标到对应目录
          cp "$ICON_BASE_DIR/ic_launcher_mdpi.png" "$APP_DIR/src/main/res/mipmap-mdpi/ic_launcher.png"
          cp "$ICON_BASE_DIR/ic_launcher_hdpi.png" "$APP_DIR/src/main/res/mipmap-hdpi/ic_launcher.png"
          cp "$ICON_BASE_DIR/ic_launcher_xhdpi.png" "$APP_DIR/src/main/res/mipmap-xhdpi/ic_launcher.png"
          cp "$ICON_BASE_DIR/ic_launcher_xxhdpi.png" "$APP_DIR/src/main/res/mipmap-xxhdpi/ic_launcher.png"
          echo "已复制所有PNG图标到项目目录"

          # 生成主布局文件
          cat > "$APP_DIR/src/main/res/layout/activity_main.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <WebView
        android:id="@+id/webview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

    <LinearLayout
        android:id="@+id/loading_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="center"
        android:orientation="vertical"
        android:background="@drawable/loading_bg_gradient">

        <ProgressBar
            android:id="@+id/loading_progress"
            android:layout_width="60dp"
            android:layout_height="60dp"
            android:indeterminate="true"
            android:indeterminateDrawable="@drawable/loading_circle" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="20dp"
            android:text="加载中..."
            android:textSize="18sp"
            android:textColor="#333333"
            android:textStyle="bold" />

    </LinearLayout>
</RelativeLayout>
EOF

          # 生成渐变背景和加载动画
          cat > "$APP_DIR/src/main/res/drawable/loading_bg_gradient.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <gradient
        android:angle="90"
        android:centerColor="#F8F8F8"
        android:endColor="#FFFFFF"
        android:startColor="#F0F0F0"
        android:type="linear" />
</shape>
EOF

          cat > "$APP_DIR/src/main/res/drawable/loading_circle.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1200"
    android:fromDegrees="0"
    android:pivotX="50%"
    android:pivotY="50%"
    android:toDegrees="360">

    <shape
        android:innerRadius="20dp"
        android:shape="ring"
        android:thickness="6dp"
        android:useLevel="false">

        <gradient
            android:centerColor="#40C4FF"
            android:endColor="#00BFA5"
            android:startColor="#2196F3"
            android:type="sweep" />
    </shape>
</animated-rotate>
EOF

          # 生成字符串资源
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$APP_NAME</string>
    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
</resources>
EOF

          # 生成WebView工具类和主Activity
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << 'EOF'
package org.apache.cordova;
import android.content.Context;
import android.os.Handler;
import android.view.View;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.net.http.SslError;
import android.widget.LinearLayout;
import android.widget.Toast;

public class WebViewHelper {
    private WebView webView;
    private LinearLayout loadingLayout;
    private Context context;
    private static final int LOAD_TIMEOUT = 80000;

    public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
        this.context = context;
        this.webView = webView;
        this.loadingLayout = loadingLayout;
        initWebViewSettings();
    }

    private void initWebViewSettings() {
        WebSettings webSettings = webView.getSettings();
        webSettings.setJavaScriptEnabled(true);
        webSettings.setDomStorageEnabled(true);
        webSettings.setAllowFileAccess(true);
        webSettings.setAllowContentAccess(true);
        
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
            webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
        }
        
        webSettings.setSupportZoom(true);
        webSettings.setBuiltInZoomControls(true);
        webSettings.setDisplayZoomControls(false);
        webSettings.setLoadWithOverviewMode(true);
        webSettings.setUseWideViewPort(true);
    }

    public void setWebViewClient() {
        webView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
                if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                    loadingLayout.setVisibility(View.VISIBLE);
                }
            }
            
            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                    loadingLayout.setVisibility(View.GONE);
                }
            }
            
            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                view.loadUrl(request.getUrl().toString());
                return true;
            }
            
            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                handler.proceed();
            }
        });
        webView.setWebChromeClient(new WebChromeClient());
    }

    public void loadUrl(String url) {
        webView.loadUrl(url);
        new Handler().postDelayed(() -> {
            if (webView.getProgress() < 100) {
                Toast.makeText(context, "加载超时", Toast.LENGTH_SHORT).show();
                ((android.app.Activity) context).finish();
            }
        }, LOAD_TIMEOUT);
    }

    public WebView getWebView() {
        return webView;
    }
}
EOF

          # 生成主Activity
          cat > "$APP_JAVA_DIR/MainActivity.java" << 'EOF'
package $APP_PACKAGE;
import android.app.Activity;
import android.os.Bundle;
import android.webkit.WebView;
import android.widget.LinearLayout;
import org.apache.cordova.WebViewHelper;
import $APP_PACKAGE.R;

public class MainActivity extends Activity {
    private WebViewHelper webViewHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        WebView webView = findViewById(R.id.webview);
        LinearLayout loadingLayout = findViewById(R.id.loading_layout);
        
        webViewHelper = new WebViewHelper(this, webView, loadingLayout);
        webViewHelper.setWebViewClient();
        webViewHelper.loadUrl("$CUSTOM_URL");
    }
    
    @Override
    public void onBackPressed() {
        if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
            webViewHelper.getWebView().goBack();
        } else {
            super.onBackPressed();
        }
    }
}
EOF

          # 生成AndroidManifest.xml（修正YAML语法错误）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="$APP_PACKAGE">
    <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
    
    <application
        android:label="$APP_NAME"
        android:theme="@style/AppTheme"
        android:hardwareAccelerated="true"
        android:usesCleartextTraffic="true"
        android:icon="@mipmap/ic_launcher">
        
        <activity 
            android:name=".MainActivity"
            android:configChanges="orientation|screenSize|keyboard"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
EOF

          # 生成Gradle配置文件
          cat > "$ANDROID_ROOT/gradle.properties" << 'EOF'
android.useAndroidX=true
android.enableJetifier=false
org.gradle.jvmargs=-Xmx1536m
EOF

          cat > "$ANDROID_ROOT/settings.gradle" << EOF
include ':app', ':CordovaLib'
rootProject.name = '$APP_NAME'
EOF

          # 生成CordovaLib库配置
          cat > "$CORDOVA_LIB_DIR/build.gradle" << 'EOF'
buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}
apply plugin: 'com.android.library'

android {
    compileSdk 30
    namespace 'org.apache.cordova'
    
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
}
EOF

          # 生成app模块配置
          cat > "$APP_DIR/build.gradle" << EOF
buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/google' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}
apply plugin: 'com.android.application'

android {
    compileSdk 30
    namespace '$APP_PACKAGE'
    
    defaultConfig {
        applicationId "$APP_PACKAGE"
        minSdk 21
        targetSdk 30
        versionCode $APP_VERSION_CODE
        versionName "$APP_VERSION_NAME"
    }
    
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation project(':CordovaLib')
    implementation 'androidx.appcompat:appcompat:1.0.2'
}
EOF

          # 编译APK
          cd "$ANDROID_ROOT" || exit 1
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew
          ./gradlew clean :app:assembleRelease --stacktrace

          # 复制输出APK
          APK_DEST="/home/runner/work/webview-app/webview-app/${APP_NAME}-v${APP_VERSION_NAME}.apk"
          cp "$APP_DIR/build/outputs/apk/release/app-release.apk" "$APK_DEST" || \
          cp "$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk" "$APK_DEST"
          echo "APK生成路径: $APK_DEST"

      - name: 发布APK到GitHub Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.APP_VERSION_NAME }}"
          name: "${{ env.APP_NAME }} v${{ env.APP_VERSION_NAME }}"
          files: /home/runner/work/webview-app/webview-app/${{ env.APP_NAME }}-v${{ env.APP_VERSION_NAME }}.apk
          body: |
            ### 图标替换说明
            1. 用MT管理器打开APK
            2. 进入res/mipmap-mdpi、hdpi、xhdpi、xxhdpi目录
            3. 替换对应的ic_launcher.png文件（保持相同尺寸）
            4. 保存并签名即可
