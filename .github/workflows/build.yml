name: 安卓浏览器式套壳应用构建+自动发版
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换为阿里云Ubuntu镜像源（解决卡包问题）
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"
          # 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH
      - name: 读取 config.txt 配置（网址/包名/应用名/版本号）
        run: |
          # 定义默认配置（防止 config.txt 缺失）
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取 config.txt（格式：键=值，每行一个配置）
          if [ -f "config.txt" ]; then
            echo "✅ 读取 config.txt 配置..."
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            echo "⚠️ 未找到 config.txt，使用默认配置..."
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi
          # 验证配置有效性
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            echo "⚠️ 包名格式无效，使用默认包名：$DEFAULT_APP_PACKAGE"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            echo "⚠️ 版本号必须为整数，使用默认值：$DEFAULT_APP_VERSION_CODE"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 写入环境变量
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV

          # 打印最终配置
          echo -e "\n📋 最终构建配置："
          echo "目标网址：$CUSTOM_URL"
          echo "应用包名：$APP_PACKAGE"
          echo "应用名称：$APP_NAME"
          echo "版本名称：$APP_VERSION_NAME"
          echo "版本号（整数）：$APP_VERSION_CODE"
      - name: 构建安卓套壳应用（初始化项目结构）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA          JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取环境变量配置
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"

          # 动态创建项目目录（按包名生成Java目录结构）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          # app模块的Java目录（存放主Activity，引用布局资源）
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          # 布局资源放在app模块（CordovaLib不再依赖）
          APP_LAYOUT_DIR="$APP_DIR/src/main/res/layout"
          # 图片/动画资源目录
          APP_DRAWABLE_DIR="$APP_DIR/src/main/res/drawable"
          # 动画资源目录
          APP_ANIM_DIR="$APP_DIR/src/main/res/anim"
          
          # 清理旧项目残留并创建新目录
          rm -rf "$PROJECT_PATH"
          mkdir -p "$APP_JAVA_DIR"
          mkdir -p "$APP_LAYOUT_DIR"
          mkdir -p "$APP_DRAWABLE_DIR"
          mkdir -p "$APP_ANIM_DIR"
          mkdir -p "$APP_DIR/src/main/res/values"
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"
          # 生成主布局文件（带优化的加载动画）
          cat > "$APP_LAYOUT_DIR/activity_main.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

              <!-- WebView：加载目标网页 -->
              <WebView
                  android:id="@+id/webview"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"/>

              <!-- 加载动画容器：渐变背景+居中布局 -->
              <LinearLayout
                  android:id="@+id/loading_layout"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:gravity="center"
                  android:orientation="vertical"
                  android:background="@drawable/loading_bg_gradient">

                  <!-- 自定义圆形旋转进度条 -->
                  <ProgressBar
                      android:id="@+id/loading_progress"
                      android:layout_width="60dp"
                      android:layout_height="60dp"
                      android:indeterminate="true"
                      android:indeterminateDrawable="@drawable/loading_circle" />

                  <!-- 加载文字：加粗+大字号 -->
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:layout_marginTop="20dp"
                      android:text="加载中..."
                      android:textSize="18sp"
                      android:textColor="#333333"
                      android:textStyle="bold" />

              </LinearLayout>
          </RelativeLayout>
          EOF

          # 生成退出确认对话框布局
          cat > "$APP_LAYOUT_DIR/exit_dialog.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/dialog_container"
              android:layout_width="280dp"
              android:layout_height="wrap_content"
              android:background="@drawable/dialog_bg"
              android:orientation="vertical"
              android:padding="24dp">

              <TextView
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:text="确认退出应用？"
                  android:textColor="#333333"
                  android:textSize="18sp"
                  android:textStyle="bold"
                  android:gravity="center"
                  android:layout_marginBottom="16dp"/>

              <TextView
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:text="确定要离开当前应用吗？"
                  android:textColor="#666666"
                  android:textSize="14sp"
                  android:gravity="center"
                  android:layout_marginBottom="24dp"/>

              <LinearLayout
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:orientation="horizontal"
                  android:gravity="center"
                  android:spacing="16dp">

                  <Button
                      android:id="@+id/btn_cancel"
                      android:layout_width="100dp"
                      android:layout_height="40dp"
                      android:text="取消"
                      android:textColor="#333333"
                      android:background="@drawable/btn_cancel_bg"
                      android:textSize="16sp"/>

                  <Button
                      android:id="@+id/btn_exit"
                      android:layout_width="100dp"
                      android:layout_height="40dp"
                      android:text="退出"
                      android:textColor="#FFFFFF"
                      android:background="@drawable/btn_exit_bg"
                      android:textSize="16sp"/>
              </LinearLayout>
          </LinearLayout>
          EOF
          # 生成加载动画渐变背景
          cat > "$APP_DRAWABLE_DIR/loading ing_bg_gradient.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <gradient
                  android:angle="90"
                  android:centerColor="#F8F8F8"
                  android:endColor="#FFFFFF"
                  android:startColor="#F0F0F0"
                  android:type="linear" />
          </shape>
          EOF

          # 生成自定义圆形加载动画
          cat > "$APP_DRAWABLE_DIR/loading_circle.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
              android:duration="1200"
              android:fromDegrees="0"
              android:pivotX="50%"
              android:pivotY="50%"
              android:toDegrees="360">

              <shape
                  android:innerRadius="20dp"
                  android:shape="ring"
                  android:thickness="6dp"
                  android:useLevel="false">

                  <gradient
                      android:centerColor="#40C4FF"
                      android:endColor="#00BFA5"
                      android:startColor="#2196F3"
                      android:type="sweep" />
              </shape>
          </animated-rotate>
          EOF

          # 生成对话框背景
          cat > "$APP_DRAWABLE_DIR/dialog_bg.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <solid android:color="#FFFFFF"/>
              <corners android:radius="12dp"/>
              <elevation android:elevation="8dp"/>
          </shape>
          EOF

          # 生成取消按钮背景
          cat > "$APP_DRAWABLE_DIR/btn_cancel_bg.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <solid android:color="#F5F5F5"/>
              <corners android:radius="20dp"/>
          </shape>
          EOF

          # 生成退出按钮背景
          cat > "$APP_DRAWABLE_DIR/btn_exit_bg.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <solid android:color="#2196F3"/>
              <corners android:radius="20dp"/>
          </shape>
          EOF
          # 生成页面过渡动画（淡入）
          cat > "$APP_ANIM_DIR/fade_in.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <alpha xmlns:android="http://schemas.android.com/apk/res/android"
              android:duration="300"
              android:fromAlpha="0.0"
              android:toAlpha="1.0"/>
          EOF

          # 生成页面过渡动画（淡出）
          cat > "$APP_ANIM_DIR/fade_out.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <alpha xmlns:android="http://schemas.android.com/apk/res/android"
              android:duration="300"
              android:fromAlpha="1.0"
              android:toAlpha="0.0"/>
          EOF

          # 生成字符串资源文件
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">$APP_NAME</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # 生成CordovaLib模块的WebView工具类
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << EOF
          package org.apache.cordova;
          import android.content.Context;
          import android.os.Handler;
          import android.view.View;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.LinearLayout;
          import android.widget.Toast;

          // 通用WebView工具类：接收外部传入的WebView和加载布局，不直接引用R资源
          public class WebViewHelper {
              private WebView webView;
              private LinearLayout loadingLayout;
              private Context context;
              private static final int LOAD_TIMEOUT = 80000;  // 80秒加载超时

              // 构造方法：从外部传入Context、WebView、加载布局（消除资源依赖）
              public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
                  this.context = context;
                  this.webView = webView;
                  this.loadingLayout = loadingLayout;
                  initWebViewSettings();  // 初始化WebView配置
              }

              // 初始化WebView基础配置
              private void initWebViewSettings() {
                  WebSettings webSettings = webView.getSettings();
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
                  
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
              }
          EOF
              // 设置WebViewClient（控制加载              public void setWebViewClient() {
                  webView.setWebViewClient(new WebViewClient() {
                      // 网页开始加载：显示动画
                      @Override
                      public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                          super.onPageStarted(view, url, favicon);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                              loadingLayout.setVisibility(View.VISIBLE);
                          }
                      }
                      
                      // 网页加载完成：隐藏动画
                      @Override
                      public void onPageFinished(WebView view, String url) {
                          super.onPageFinished(view, url);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                      
                      // 链接跳转处理
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      // SSL证书错误处理
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed();
                      }
                      
                      // 加载错误处理
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(context, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                  });
                  
                  // JS弹窗支持
                  webView.setWebChromeClient(new WebChromeClient());
              }

              // 加载目标网址
              public void loadUrl(String url) {
                  webView.loadUrl(url);
                  // 加载超时处理
                  new Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          Toast.makeText(context, "加载超时，即将关闭", Toast.LENGTH_SHORT).show();
                          ((android.app.Activity) context).finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              // 获取WebView实例（供外部调用后退等方法）
              public WebView getWebView() {
                  return webView;
              }
          }
          EOF

          # 生成app模块的主Activity（带退出确认功能）
          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
          package $APP_PACKAGE;
          import android.app.Activity;
          import android.os.Bundle;
          import android.os.Handler;
          import android.view.Gravity;
          import android.view.View;
          import android.view.Window;
          import android.view.WindowManager;
          import android.webkit.WebView;
          import android.widget.LinearLayout;
          import android.widget.TextView;
          import android.widget.Button;
          import android.app.AlertDialog;
          import android.view.animation.Animation;
          import android.view.animation.ScaleAnimation;
          import android.view.animation.TranslateAnimation;
          import android.view.animation.AnimationSet;
          import android.graphics.Color;
          import android.graphics.drawable.ColorDrawable;

          // 导入CordovaLib的通用工具类
          import org.apache.cordova.WebViewHelper;
          // 引用app模块的R资源
          import $APP_PACKAGE.R;

          public class MainActivity extends Activity {
              private WebViewHelper webViewHelper;
              private AlertDialog exitDialog; // 退出确认对话框

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  // 加载app模块的布局资源
                  setContentView(R.layout.activity_main);
                  
                  // 从布局中获取WebView和加载动画控件
                  WebView webView = findViewById(R.id.webview);
                  LinearLayout loadingLayout = findViewById(R.id.loading_layout);
                  
                  // 初始化CordovaLib的工具类
                  webViewHelper = new WebViewHelper(this, webView, loadingLayout);
                  webViewHelper.setWebViewClient();
                  
                  // 初始化退出对话框
                  initExitDialog();
                  
                  // 加载目标网址
                  webViewHelper.loadUrl("$CUSTOM_URL");
              }
              
              // 初始化退出确认对话框
              private void initExitDialog() {
                  // 创建自定义对话框
                  exitDialog = new AlertDialog.Builder(this).create();
                  exitDialog.setCancelable(true);
                  
                  // 自定义对话框布局
                  View dialogView = getLayoutInflater().inflate(R.layout.exit_dialog, null);
                  exitDialog.setView(dialogView);
                  
                  // 设置对话框背景透明
                  Window window = exitDialog.getWindow();
                  if (window != null) {
                      window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
                      // 设置对话框位置和动画
                      WindowManager.LayoutParams params = window.getAttributes();
                      params.gravity = Gravity.CENTER;
                      window.setAttributes(params);
                  }
                  
                  // 绑定按钮事件
                  Button btnCancel = dialogView.findViewById(R.id.btn_cancel);
                  Button btnExit = dialogView.findViewById(R.id.btn_exit);
                  
                  btnCancel.setOnClickListener(v -> {
                      // 取消按钮动画
                      animateButton(btnCancel);
                      new Handler().postDelayed(exitDialog::dismiss, 200);
                  });
                  
                  btnExit.setOnClickListener(v -> {
                      // 退出按钮动画
                      animateButton(btnExit);
                      new Handler().postDelayed(() -> {
                          exitDialog.dismiss();
                          finish(); // 关闭应用
                          // 添加页面退出动画
                          overridePendingTransition(R.anim.fade_in, R.anim.fade_out);
                      }, 200);
                  });
              }
              
              // 按钮点击动画
              private void animateButton(View view) {
                  ScaleAnimation scaleAnim = new ScaleAnimation(
                      1.0f, 0.9f, 1.0f, 0.9f,
                      Animation.RELATIVE_TO_SELF, 0.5f,
                      Animation.RELATIVE_TO_SELF, 0.5f
                  );
                  scaleAnim.setDuration(150);
                  scaleAnim.setRepeatMode(Animation.REVERSE);
                  scaleAnim.setRepeatCount(1);
                  view.startAnimation(scaleAnim);
              }
              
              // 返回键处理
              @Override
              public void onBackPressed() {
                  if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
                      // 如果网页可以后退，则后退
                      webViewHelper.getWebView().goBack();
                  } else {
                      // 显示退出确认对话框
                      showExitDialogWithAnimation();
                  }
              }
              
              // 显示带动画的退出对话框
              private void showExitDialogWithAnimation() {
                  if (exitDialog != null && !exitDialog.isShowing()) {
                      exitDialog.show();
                      
                      // 给对话框添加弹出动画
                      View dialogView = exitDialog.findViewById(R.id.dialog_container);
                      if (dialogView != null) {
                          TranslateAnimation translateAnim = new TranslateAnimation(
                              0, 0, 500, 0
                          );
                          translateAnim.setDuration(300);
                          
                          ScaleAnimation scaleAnim = new ScaleAnimation(
                              0.8f, 1.0f, 0.8f, 1.0f,
                              Animation.RELATIVE_TO_SELF, 0.5f,
                              Animation.RELATIVE_TO_SELF, 0.5f
                          );
                          scaleAnim.setDuration(300);
                          
                          AnimationSet set = new AnimationSet(true);
                          set.addAnimation(translateAnim);
                          set.addAnimation(scaleAnim);
                          dialogView.startAnimation(set);
                      }
                  }
              }
              
              // 页面生命周期处理
              @Override
              protected void onPause() {
                  super.onPause();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onPause();
                  }
              }
              
              @Override
              protected void onResume() {
                  super.onResume();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onResume();
                  }
              }
              
              @Override
              protected void onDestroy() {
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().destroy();
                  }
                  if (exitDialog != null && exitDialog.isShowing()) {
                      exitDialog.dismiss();
                  }
                  super.onDestroy();
              }
          }
          EOF

          # 生成AndroidManifest.xml清单文件
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="$APP_PACKAGE">
              <!-- 配置支持的SDK版本 -->
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <!-- 申请必要权限 -->
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
              
              <application
                  android:label="$APP_NAME"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true">
                  
                  <!-- 主Activity配置 -->
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
                      android:launchMode="singleTask">
                      <!-- 配置为启动页 -->
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                      <!-- 支持HTTP/HTTPS链接跳转 -->
                      <intent-filter>
                          <action android:name="android.intent.action.VIEW"/>
                          <category android:name="android.intent.category.DEFAULT"/>
                          <category android:name="android.intent.category.BROWSABLE"/>
                          <data android:scheme="http"/>
                          <data android:scheme="https"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          # 生成Gradle基础配置
          cat > "$ANDROID_ROOT/gradle.properties" << EOF
          # 启用AndroidX支持
          android.useAndroidX=true
          # 关闭Jetifier
          android.enableJetifier=false
          
          # 配置Gradle内存
          org.gradle.jvmargs=-Xmx1536m
          
          # 启用并行构建
          org.gradle.parallel=true
          # 启用构建缓存
          org.gradle.caching=true
          EOF

          # 生成模块依赖配置
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          EOF

          # 生成CordovaLib库模块配置
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.library'
          
          android {
              compileSdk 30
              namespace 'org.apache.cordova'
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
              
              lintOptions {
                  abortOnError false
                  disable 'UnusedResources'
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF
          # 生成主应用模块配置
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.application'
          
          android {
              compileSdk 30
              namespace '$APP_PACKAGE'
              
              defaultConfig {
                  applicationId "$APP_PACKAGE"
                  minSdk 21
                  targetSdk 30
                  versionCode $APP_VERSION_CODE
                  versionName "$APP_VERSION_NAME"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      signingConfig signingConfigs.debug
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
              
              lintOptions {
                  abortOnError false
              }
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
          }
          
          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF
          # 生成混淆规则
          cat > "$APP_DIR/proguard-rules.pro" << EOF
          # 保护WebView相关类
          -keepclassmembers class * extends android.webkit.WebViewClient {
              public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
              public boolean *(android.webkit.WebView, java.lang.String);
          }
          -keepclassmembers class * extends android.webkit.WebChromeClient {
              public void *(android.webkit.WebView, java.lang.String);
          }
          
          # 保护app模块的R资源类
          -keep class $APP_PACKAGE.R { *; }
          -keep class $APP_PACKAGE.R$layout { *; }
          -keep class $APP_PACKAGE.R$id { *; }
          -keep class $APP_PACKAGE.R$string { *; }
          -keep class $APP_PACKAGE.R$drawable { *; }
          -keep class $APP_PACKAGE.R$anim { *; }
          
          # 保护CordovaLib的工具类
          -keep class org.apache.cordova.WebViewHelper { *; }
          -keepclassmembers class org.apache.cordova.WebViewHelper {
              public <init>(android.content.Context, android.webkit.WebView, android.widget.LinearLayout);
              public void setWebViewClient();
              public void loadUrl(java.lang.String);
              public android.webkit.WebView getWebView();
          }
          EOF

          # 编译Release版本APK
          echo "=== 开始编译Release版本APK ==="
          cd "$ANDROID_ROOT" || exit 1
          
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew
          ./gradlew clean :app:assembleRelease --stacktrace --info
          # 检查并复制APK
          APK_SOURCE_SIGNED="$APP_DIR/build/outputs/apk/release/app-release.apk"
          APK_SOURCE_UNSIGNED="$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk"
          APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v$APP_VERSION_NAME.apk"
          
          if [ -f "$APK_SOURCE_SIGNED" ]; then
            cp "$APK_SOURCE_SIGNED" "$APK_DEST"
            echo "✅ 已复制已签名APK：$APK_DEST"
          elif [ -f "$APK_SOURCE_UNSIGNED" ]; then
            cp "$APK_SOURCE_UNSIGNED" "$APK_DEST"
            echo "✅ 已复制未签名APK：$APK_DEST"
          else
            echo "❌ 未找到APK文件"
            ls -R "$APP_DIR/build/outputs"
            exit 1
          fi

          # 验证APK文件完整性
          if [ -f "$APK_DEST" ]; then
            echo "📦 APK文件信息："
            du -h "$APK_DEST"
            echo "✅ APK构建成功，文件大小验证通过"
          else
            echo "❌ APK文件生成失败"
            exit 1
          fi
      - name: 创建并推送Git Tag
        run: |
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          TAG_NAME="v$APP_VERSION_NAME"
          
          # 配置Git用户信息
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 检查是否存在同名Tag，若存在则删除旧Tag
          if git rev-parse --verify --quiet "$TAG_NAME"; then
            echo "⚠️ 检测到旧Tag $TAG_NAME，正在删除..."
            git tag -d "$TAG_NAME"  # 删除本地Tag
            git push origin --delete "$TAG_NAME" 2>/dev/null || true  # 删除远程Tag（忽略删除失败）
          fi
          
          # 创建新Tag并推送
          git tag -a "$TAG_NAME" -m "自定义浏览器应用 $TAG_NAME 版本发布"
          if ! git push origin "$TAG_NAME"; then
            echo "⚠️ 首次推送Tag失败，重试中..."
            git push origin "$TAG_NAME" || exit 1  # 重试失败则终止流程
          fi
          echo "✅ Git Tag推送成功：$TAG_NAME"

          # 验证Tag是否推送成功
          if git ls-remote --tags origin | grep -q "$TAG_NAME"; then
            echo "✅ 远程仓库已同步Tag：$TAG_NAME"
          else
            echo "❌ 远程仓库Tag同步失败"
            exit 1
          fi
      - name: 发布APK到GitHub Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.APP_VERSION_NAME }}"
          name: "自定义浏览器应用 v${{ env.APP_VERSION_NAME }}"
          body: |
            ### 📱 应用信息
            - 应用名称：${{ env.APP_NAME }}
            - 包名：${{ env.APP_PACKAGE }}
            - 支持系统：Android 5.0+（API 21及以上）
            - 版本号：v${{ env.APP_VERSION_NAME }}
            - 内部版本号：${{ env.APP_VERSION_CODE }}
            
            ### ✨ 功能亮点
            - 基于WebView的网页套壳应用
            - 自定义加载动画与过渡效果
            - 返回键退出确认机制（带按钮动画）
            - 支持HTTP/HTTPS链接访问
            - 网页加载超时自动关闭
            
            ### 📥 下载
            点击下方Assets中的APK文件下载安装
            
            ### 📝 更新日志
            - 优化退出确认对话框动画效果
            - 修复网页加载超时处理逻辑
            - 完善资源文件管理
          files: /home/runner/work/webview-app/webview-app/CustomBrowser-v${{ env.APP_VERSION_NAME }}.apk
          draft: false
          prerelease: false

      - name: 验证发布结果
        run: |
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v$APP_VERSION_NAME"
          
          echo "🔍 验证发布结果：$RELEASE_URL"
          if curl -s "$RELEASE_URL" | grep -q "upload_url"; then
            echo "✅ GitHub Release发布成功"
            echo "📌 发布地址：https://github.com/${{ github.repository }}/releases/tag/v$APP_VERSION_NAME"
          else
            echo "❌ GitHub Release发布失败"
            exit 1
          fi
