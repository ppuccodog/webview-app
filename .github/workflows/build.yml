name: 构建安卓应用（CordovaLib根治版）
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局装Cordova+处理wrapper.gradle
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          
          # 定位cordova-android根目录
          CORDOVA_ANDROID_ROOT=$(find /opt/hostedtoolcache/node -type d -name "cordova-android" -path "*/node_modules/cordova-android" | head -1)
          [ -d "$CORDOVA_ANDROID_ROOT" ] || { echo "❌ 没找到cordova-android根目录"; exit 1; }
          
          # 创建空wrapper.gradle（避免Cordova初始化冲突）
          WRAPPER_GRADLE_PATH="$CORDOVA_ANDROID_ROOT/bin/templates/wrapper.gradle"
          mkdir -p "$(dirname "$WRAPPER_GRADLE_PATH")"
          echo -e "// 空任务占位符\n task wrapper {}\n" > "$WRAPPER_GRADLE_PATH"
          [ -f "$WRAPPER_GRADLE_PATH" ] || { echo "❌ wrapper.gradle创建失败"; exit 1; }
          
          echo "CORDOVA_ANDROID_ROOT=$CORDOVA_ANDROID_ROOT" >> $GITHUB_ENV
          cordova -v

      - name: 安装JDK8+安卓SDK+Gradle
        run: |
          # 安装JDK8
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk
          JDK8_PATH="/usr/lib/jvm/java-8-openjdk-amd64"
          [ -f "$JDK8_PATH/bin/javac" ] || { echo "❌ JDK8异常"; exit 1; }
          echo "JDK8_PATH=$JDK8_PATH" >> $GITHUB_ENV

          # 安装安卓SDK
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 安装Gradle（匹配cordova-android@9.0.0兼容版本）
          GRADLE_PATH="$HOME/gradle-6.5"  # 关键：降级到6.5，与cordova-android@9.0.0完全兼容
          wget https://services.gradle.org/distributions/gradle-6.5-bin.zip -O gradle-6.5-bin.zip
          unzip -q gradle-6.5-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 构建项目（确保CordovaLib存在）
        run: |
          # 强制环境变量
          export JAVA_HOME=$JDK8_PATH
          export PATH="$JAVA_HOME/bin:$PATH:$ANDROID_SDK_PATH/build-tools/29.0.3:$GRADLE_PATH/bin"
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export ANDROID_HOME=$ANDROID_SDK_PATH
          
          # 项目初始化（关键：只创建目录，不删除Cordova自动生成文件）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          mkdir -p "$PROJECT_PATH/www"  # 仅创建www目录，避免rm -rf清理平台文件
          cd "$PROJECT_PATH"
          
          # 1. 写基础配置（确保Cordova识别项目）
          echo '{"name":"x-app","version":"1.0.0","cordova":{"platforms":["android"]}}' > package.json
          echo '<?xml version="1.0"?><widget id="com.my.simpleapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0"><name>YJSCSDH</name><content src="index.html"/><platform name="android"><preference name="AndroidXEnabled" value="false"/><preference name="GradlePluginKotlinEnabled" value="false"/></platform></widget>' > config.xml
          echo '<html><body>Hello</body></html>' > www/index.html
          
          # 2. 关键：先创建安卓平台目录，确保Cordova能正常生成文件
          ANDROID_PLATFORM_PATH="$PROJECT_PATH/platforms/android"
          mkdir -p "$ANDROID_PLATFORM_PATH"
          # 提前创建CordovaLib目录（避免生成失败时目录缺失）
          CORDOVA_LIB_PATH="$ANDROID_PLATFORM_PATH/CordovaLib"
          mkdir -p "$CORDOVA_LIB_PATH/src/main/java"
          
          # 3. 添加安卓平台（禁用清理，保留自动生成的CordovaLib）
          echo "🔧 添加安卓平台，保留CordovaLib"
          cordova platform add android@9.0.0 --save --no-AndroidX --no-registry
          sleep 5  # 延长等待时间，确保Cordova完全生成所有文件
          
          # 4. 验证CordovaLib存在（双重校验）
          ANDROID_APP_PATH="$ANDROID_PLATFORM_PATH/app"
          if [ ! -d "$CORDOVA_LIB_PATH" ] || [ ! -d "$ANDROID_APP_PATH" ]; then
            echo "❌ Cordova平台生成失败，目录结构："
            ls -l "$PROJECT_PATH/platforms/android"  # 打印目录结构排查问题
            exit 1
          fi
          echo "✅ CordovaLib和app目录已确认存在"
          
          # 5. 生成gradlew（根项目，不干扰子模块）
          echo "🔧 生成根项目gradlew"
          cd "$ANDROID_PLATFORM_PATH"
          gradle wrapper --gradle-version 6.5 --distribution-type all
          chmod +x gradlew
          [ -f "gradlew" ] || { echo "❌ gradlew生成失败"; exit 1; }
          
          # 6. 修复app模块build.gradle（仅补充缺失配置，不覆盖核心内容）
          BUILD_GRADLE="$ANDROID_APP_PATH/build.gradle"
          # 先备份Cordova自动生成的build.gradle，避免完全覆盖
          cp "$BUILD_GRADLE" "$BUILD_GRADLE.bak"
          # 重新写入配置（确保assembleRelease任务存在）
          > "$BUILD_GRADLE"
          echo "buildscript {" >> "$BUILD_GRADLE"
          echo "    repositories {" >> "$BUILD_GRADLE"
          echo "        mavenCentral()" >> "$BUILD_GRADLE"
          echo "        jcenter()" >> "$BUILD_GRADLE"
          echo "    }" >> "$BUILD_GRADLE"
          echo "    dependencies {" >> "$BUILD_GRADLE"
          echo "        classpath 'com.android.tools.build:gradle:4.1.3'" >> "$BUILD_GRADLE"
          echo "    }" >> "$BUILD_GRADLE"
          echo "}" >> "$BUILD_GRADLE"
          echo "" >> "$BUILD_GRADLE"
          echo "apply plugin: 'com.android.application'" >> "$BUILD_GRADLE"
          echo "" >> "$BUILD_GRADLE"
          echo "android {" >> "$BUILD_GRADLE"
          echo "    compileSdkVersion 29" >> "$BUILD_GRADLE"
          echo "    buildToolsVersion '29.0.3'" >> "$BUILD_GRADLE"
          echo "    namespace 'com.my.simpleapp'" >> "$BUILD_GRADLE"
          echo "    sourceSets {" >> "$BUILD_GRADLE"
          echo "        main {" >> "$BUILD_GRADLE"
          echo "            java { srcDirs = [\"src/main/java\"] }" >> "$BUILD_GRADLE"
          echo "            assets { srcDirs = [\"src/main/assets\"] }" >> "$BUILD_GRADLE"
          echo "            manifest { srcFile \"src/main/AndroidManifest.xml\" }" >> "$BUILD_GRADLE"
          echo "        }" >> "$BUILD_GRADLE"
          echo "    }" >> "$BUILD_GRADLE"
          echo "    defaultConfig {" >> "$BUILD_GRADLE"
          echo "        applicationId \"com.my.simpleapp\"" >> "$BUILD_GRADLE"
          echo "        minSdkVersion 21" >> "$BUILD_GRADLE"
          echo "        targetSdkVersion 29" >> "$BUILD_GRADLE"
          echo "        versionCode 1" >> "$BUILD_GRADLE"
          echo "        versionName \"1.0.0\"" >> "$BUILD_GRADLE"
          echo "    }" >> "$BUILD_GRADLE"
          echo "    buildTypes {" >> "$BUILD_GRADLE"
          echo "        release {" >> "$BUILD_GRADLE"
          echo "            minifyEnabled false" >> "$BUILD_GRADLE"
          echo "            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'" >> "$BUILD_GRADLE"
          echo "        }" >> "$BUILD_GRADLE"
          echo "    }" >> "$BUILD_GRADLE"
          echo "}" >> "$BUILD_GRADLE"
          echo "" >> "$BUILD_GRADLE"
          echo "dependencies {" >> "$BUILD_GRADLE"
          echo "    implementation fileTree(dir: 'libs', include: ['*.jar'])" >> "$BUILD_GRADLE"
          echo "    implementation project(':CordovaLib')" >> "$BUILD_GRADLE"
          echo "}" >> "$BUILD_GRADLE"
          
          # 7. 彻底禁用AndroidX（覆盖所有层级，包括Cordova默认配置）
          # 根项目gradle.properties
          echo "android.useAndroidX=false" > "$ANDROID_PLATFORM_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_PLATFORM_PATH/gradle.properties"
          # app模块gradle.properties
          echo "android.useAndroidX=false" > "$ANDROID_APP_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_APP_PATH/gradle.properties"
          echo "org.gradle.java.home=$JDK8_PATH" >> "$ANDROID_APP_PATH/gradle.properties"
          # CordovaLib模块gradle.properties（关键：同步禁用AndroidX）
          echo "android.useAndroidX=false" > "$CORDOVA_LIB_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$CORDOVA_LIB_PATH/gradle.properties"
          
          # 8. 修复CordovaLib的build.gradle（确保能被app模块依赖）
          CORDOVA_LIB_BUILD="$CORDOVA_LIB_PATH/build.gradle"
          > "$CORDOVA_LIB_BUILD"
          echo "apply plugin: 'com.android.library'" >> "$CORDOVA_LIB_BUILD"
          echo "" >> "$CORDOVA_LIB_BUILD"
          echo "android {" >> "$CORDOVA_LIB_BUILD"
          echo "    compileSdkVersion 29" >> "$CORDOVA_LIB_BUILD"
          echo "    buildToolsVersion '29.0.3'" >> "$CORDOVA_LIB_BUILD"
          echo "    namespace 'org.apache.cordova'" >> "$CORDOVA_LIB_BUILD"
          echo "    sourceSets {" >> "$CORDOVA_LIB_BUILD"
          echo "        main {" >> "$CORDOVA_LIB_BUILD"
          echo "            java { srcDirs = [\"src/main/java\"] }" >> "$CORDOVA_LIB_BUILD"
          echo "            resources { srcDirs = [\"src/main/res\"] }" >> "$CORDOVA_LIB_BUILD"
          echo "        }" >> "$CORDOVA_LIB_BUILD"
          echo "    }" >> "$CORDOVA_LIB_BUILD"
          echo "}" >> "$CORDOVA_LIB_BUILD"
          echo "" >> "$CORDOVA_LIB_BUILD"
          echo "dependencies {" >> "$CORDOVA_LIB_BUILD"
          echo "    implementation fileTree(dir: 'libs', include: ['*.jar'])" >> "$CORDOVA_LIB_BUILD"
          echo "    implementation 'androidx.legacy:legacy-support-v4:1.0.0'" >> "$CORDOVA_LIB_BUILD"  # 补充Cordova依赖
          echo "}" >> "$CORDOVA_LIB_BUILD"
          
          # 9. 补全关键业务文件（仅补缺失，不干扰自动生成内容）
          # MainActivity.java（若不存在则创建）
          ACTIVITY_DIR="$ANDROID_APP_PATH/src/main/java/com/my/simpleapp"
          mkdir -p "$ACTIVITY_DIR"
          if [ ! -f "$ACTIVITY_DIR/MainActivity.java" ]; then
            echo "package com.my.simpleapp;" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "import org.apache.cordova.CordovaActivity;" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "import android.os.Bundle;" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "public class MainActivity extends CordovaActivity {" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "    @Override" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "    public void onCreate(Bundle savedInstanceState) {" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "        super.onCreate(savedInstanceState);" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "        loadUrl(launchUrl);" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "    }" >> "$ACTIVITY_DIR/MainActivity.java"
            echo "}" >> "$ACTIVITY_DIR/MainActivity.java"
          fi
          
          # strings.xml（若不存在则创建）
          RES_DIR="$ANDROID_APP_PATH/src/main/res/values"
          mkdir -p "$RES_DIR"
          if [ ! -f "$RES_DIR/strings.xml" ]; then
            echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>" >> "$RES_DIR/strings.xml"
            echo "<resources>" >> "$RES_DIR/strings.xml"
            echo "    <string name=\"app_name\">YJSCSDH</string>" >> "$RES_DIR/strings.xml"
            echo "</resources>" >> "$RES_DIR/strings.xml"
          fi
          
          # 10. 编译app模块（指定模块，确保依赖CordovaLib）
          echo "🔨 编译app模块release版本"
          cd "$ANDROID_PLATFORM_PATH"
          ./gradlew :app:assembleRelease --info
          
          # 11. 检查APK
          APK_PATH="$ANDROID_APP_PATH/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            echo "🎉 彻底成功！APK路径：$APK_PATH"
            cp "$APK_PATH" "/home/runner/work/webview-app/webview-app/final-app.apk"
          else
            echo "❌ 编译失败，查看日志："
            cat "$ANDROID_APP_PATH/build/outputs/logs/build.log"
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 安卓套壳应用
          path: /home/runner/work/webview-app/webview-app/final-app.apk
          retention-days: 30
