name: Build Android WebView App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JDK11_PATH: /usr/lib/jvm/java-11-openjdk-amd64
      ANDROID_HOME: /home/runner/android-sdk
      ANDROID_SDK_ROOT: /home/runner/android-sdk
      GRADLE_PATH: /home/runner/gradle-7.0.2
      APP_PACKAGE: com.yjsyy.customapp
      APP_NAME: YJSYY_CSDH
      APP_NAME_SAFE: YJSYY_CSDH
      APP_VERSION: 1.0.1
      LOAD_TIMEOUT: 80000
      CUSTOM_URL: http://cs.hs1314.cn
      PROJECT_ROOT: /home/runner/work/webview-app/webview-app/myapp/android-project
      APP_RES_DIR: /home/runner/work/webview-app/webview-app/myapp/android-project/app/src/main/res
      JAVA_DIR: /home/runner/work/webview-app/webview-app/myapp/android-project/app/src/main/java/com/yjsyy/customapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 准备工作目录
        run: |
          mkdir -p "${{ env.PROJECT_ROOT }}"
          mkdir -p "${{ env.APP_RES_DIR }}"
          mkdir -p "${{ env.JAVA_DIR }}"
          echo "工作目录准备完成"

      - name: 安装JDK 11
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          java -version

      - name: 安装Android SDK
        run: |
          # 创建SDK目录
          mkdir -p "${{ env.ANDROID_HOME }}"
          
          # 下载并解压SDK命令行工具
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d "${{ env.ANDROID_HOME }}/cmdline-tools"
          
          # 重命名工具目录
          mv "${{ env.ANDROID_HOME }}/cmdline-tools/cmdline-tools" "${{ env.ANDROID_HOME }}/cmdline-tools/latest"
          
          # 配置环境变量
          echo "ANDROID_HOME=${{ env.ANDROID_HOME }}" >> $GITHUB_ENV
          echo "${{ env.ANDROID_HOME }}/platform-tools" >> $GITHUB_PATH
          echo "${{ env.ANDROID_HOME }}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          
          # 接受SDK许可协议
          yes | sdkmanager --licenses
          
          # 安装必要的SDK组件
          sdkmanager "platforms;android-30" "build-tools;30.0.3" "platform-tools"

      - name: 安装Gradle
        run: |
          wget https://services.gradle.org/distributions/gradle-7.0.2-bin.zip -O gradle.zip
          unzip -q gradle.zip -d /home/runner/
          chmod +x "${{ env.GRADLE_PATH }}/bin/gradle"
          echo "${{ env.GRADLE_PATH }}/bin" >> $GITHUB_PATH
          gradle --version

      - name: 创建项目结构
        run: |
          # 创建项目根目录下的build.gradle
          cat > "${{ env.PROJECT_ROOT }}/build.gradle" << EOF
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          # 创建settings.gradle
          cat > "${{ env.PROJECT_ROOT }}/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          rootProject.name = '${{ env.APP_NAME_SAFE }}'
          EOF

          # 创建app模块的build.gradle
          cat > "${{ env.PROJECT_ROOT }}/app/build.gradle" << EOF
          apply plugin: 'com.android.application'
          
          android {
              compileSdkVersion 30
              buildToolsVersion '30.0.3'
              
              defaultConfig {
                  applicationId '${{ env.APP_PACKAGE }}'
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName '${{ env.APP_VERSION }}'
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.4.1'
              implementation 'com.google.android.material:material:1.5.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
          }
          EOF

          # 创建proguard-rules.pro
          cat > "${{ env.PROJECT_ROOT }}/app/proguard-rules.pro" << EOF
          # 保留WebView相关类
          -keepclassmembers class * extends android.webkit.WebViewClient {
              public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
              public boolean *(android.webkit.WebView, java.lang.String);
          }
          -keepclassmembers class * extends android.webkit.WebChromeClient {
              public void *(android.webkit.WebView, java.lang.String);
          }
          EOF

      - name: 生成项目核心代码
        run: |
          # 1. 生成CordovaActivity
          CORDOVA_ACTIVITY="${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova/CordovaActivity.java"
          mkdir -p $(dirname "$CORDOVA_ACTIVITY")
          cat > "$CORDOVA_ACTIVITY" << 'EOF'
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          
          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = 80000;
          
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();
          
                  // 启用JavaScript和DOM存储
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  
                  // 配置缩放和显示
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
          
                  // 允许混合内容（HTTP+HTTPS）
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
          
                  // 配置WebViewClient处理页面跳转和SSL
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
          
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略SSL错误（生产环境慎用）
                      }
                  });
          
                  // 配置WebChromeClient处理JavaScript对话框
                  webView.setWebChromeClient(new WebChromeClient());
                  setContentView(webView);
          
                  // 加载目标URL
                  webView.loadUrl("http://cs.hs1314.cn");
                  
                  // 设置超时关闭页面
                  new android.os.Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          finish();
                      }
                  }, LOAD_TIMEOUT);
              }
          
              // 支持返回键导航
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
          }
          EOF
          [ -f "$CORDOVA_ACTIVITY" ] && echo "✅ 生成CordovaActivity.java" || exit 1
          
          # 2. 生成app模块的AndroidManifest.xml
          APP_MANIFEST_FILE="${{ env.PROJECT_ROOT }}/app/src/main/AndroidManifest.xml"
          mkdir -p $(dirname "$APP_MANIFEST_FILE")
          cat > "$APP_MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.yjsyy.customapp">
              
              <!-- 必要权限声明 -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
          
              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme">
                  
                  <activity
                      android:name="org.apache.cordova.CordovaActivity"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode"
                      android:label="@string/app_name"
                      android:launchMode="singleTask">
                      
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          [ -f "$APP_MANIFEST_FILE" ] && echo "✅ 生成app模块AndroidManifest.xml" || exit 1
          
          # 3. 生成CordovaLib模块的AndroidManifest.xml
          CORDOVALIB_MANIFEST_DIR="${{ env.PROJECT_ROOT }}/CordovaLib/src/main"
          mkdir -p "$CORDOVALIB_MANIFEST_DIR" || { echo "❌ 创建CordovaLib目录失败"; exit 1; }
          CORDOVALIB_MANIFEST_FILE="$CORDOVALIB_MANIFEST_DIR/AndroidManifest.xml"
          
          cat > "$CORDOVALIB_MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="org.apache.cordova">
              <application
                  android:allowBackup="true"
                  android:supportsRtl="true" />
          </manifest>
          EOF
          
          if [ -f "$CORDOVALIB_MANIFEST_FILE" ] && [ -s "$CORDOVALIB_MANIFEST_FILE" ]; then
            echo "✅ 生成CordovaLib模块AndroidManifest.xml"
          else
            echo "❌ CordovaLib模块AndroidManifest.xml生成失败"
            exit 1
          fi
          
          # 4. 生成CordovaLib模块的build.gradle
          CORDOVALIB_BUILD_GRADLE="${{ env.PROJECT_ROOT }}/CordovaLib/build.gradle"
          mkdir -p $(dirname "$CORDOVALIB_BUILD_GRADLE")
          cat > "$CORDOVALIB_BUILD_GRADLE" << EOF
          apply plugin: 'com.android.library'
          
          android {
              compileSdkVersion 30
          
              defaultConfig {
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "1.0"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              lintOptions {
                  abortOnError true
                  disable 'GradleDependency'
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.4.1'
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.3'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
          }
          EOF
          
          if [ -f "$CORDOVALIB_BUILD_GRADLE" ] && [ -s "$CORDOVALIB_BUILD_GRADLE" ]; then
            echo "✅ 生成CordovaLib模块build.gradle"
          else
            echo "❌ CordovaLib模块build.gradle生成失败"
            exit 1
          fi
          
          # 5. 生成默认应用图标
          MIPMAP_DIR="${{ env.PROJECT_ROOT }}/app/src/main/res/mipmap-anydpi-v26"
          mkdir -p "$MIPMAP_DIR" || { echo "❌ 创建mipmap目录失败"; exit 1; }
          
          LAUNCHER_ICON="$MIPMAP_DIR/ic_launcher.xml"
          cat > "$LAUNCHER_ICON" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="24dp"
              android:height="24dp"
              android:viewportWidth="24.0"
              android:viewportHeight="24.0">
              <path
                  android:name="icon_shape"
                  android:fillColor="#FF0000"
                  android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z" />
          </vector>
          EOF
          
          if [ -f "$LAUNCHER_ICON" ] && [ -s "$LAUNCHER_ICON" ]; then
            echo "✅ 生成默认应用图标"
          else
            echo "❌ 应用图标生成失败"
            exit 1
          fi
          
          # 6. 生成字符串资源
          VALUES_DIR="${{ env.PROJECT_ROOT }}/app/src/main/res/values"
          mkdir -p "$VALUES_DIR" || { echo "❌ 创建values目录失败"; exit 1; }
          STRINGS_FILE="$VALUES_DIR/strings.xml"
          cat > "$STRINGS_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">YJSYY_CSDH</string>
          </resources>
          EOF
          
          if [ -f "$STRINGS_FILE" ] && [ -s "$STRINGS_FILE" ]; then
            echo "✅ 生成字符串资源"
          else
            echo "❌ 字符串资源生成失败"
            exit 1
          fi
          
          # 7. 生成主题资源
          STYLES_FILE="$VALUES_DIR/styles.xml"
          cat > "$STYLES_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="windowNoTitle">true</item>
                  <item name="windowActionBar">false</item>
                  <item name="colorPrimary">#FF0000</item>
                  <item name="colorPrimaryDark">#CC0000</item>
                  <item name="colorAccent">#FF0000</item>
              </style>
          </resources>
          EOF
          
          if [ -f "$STYLES_FILE" ] && [ -s "$STYLES_FILE" ]; then
            echo "✅ 生成主题资源"
          else
            echo "❌ 主题资源生成失败"
            exit 1
          fi
          
          # 8. 添加CordovaLib依赖到app模块
          APP_BUILD_GRADLE="${{ env.PROJECT_ROOT }}/app/build.gradle"
          if ! grep -q "implementation project(':CordovaLib')" "$APP_BUILD_GRADLE"; then
            echo "📝 为app模块添加CordovaLib依赖"
            if grep -q "dependencies {" "$APP_BUILD_GRADLE"; then
              sed -i.bak '/dependencies {/a \    implementation project(":CordovaLib")' "$APP_BUILD_GRADLE"
              rm -f "$APP_BUILD_GRADLE.bak"  # 删除备份文件
            else
              echo -e "\ndependencies {\n    implementation project(\":CordovaLib\")\n}" >> "$APP_BUILD_GRADLE"
            fi
          fi
          echo "✅ 验证app模块build.gradle完成"

      - name: 构建Release版本
        run: |
          cd ${{ env.PROJECT_ROOT }}
          gradle clean assembleRelease --stacktrace

      - name: 上传APK产物
        uses: actions/upload-artifact@v3
        with:
          name: app-release-apk
          path: ${{ env.PROJECT_ROOT }}/app/build/outputs/apk/release/app-release.apk
