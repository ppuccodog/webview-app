name: 安卓自定义APP自动构建（完整修复版）
on:
  workflow_dispatch:  # 手动触发构建
permissions:
  contents: write     # 允许写入Releases

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：拉取代码+安装基础依赖
      ########################################################################
      - name: 拉取GitHub项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装核心依赖工具
        run: |
          sudo apt-get update -y
          sudo apt-get install -y xmlstarlet imagemagick openjdk-11-jdk tree
          # 验证imagemagick安装（图标生成必需）
          if ! convert --version; then
            echo "❌ imagemagick安装失败，无法生成图标"
            exit 1
          fi
          # 配置JDK环境变量
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          
          # 验证关键工具可用性
          java -version && echo "✅ Java环境正常" || { echo "❌ Java环境异常"; exit 1; }
          xmlstarlet --version && echo "✅ XML解析工具正常" || { echo "❌ XML解析工具异常"; exit 1; }

      ########################################################################
      # 步骤2：配置Android SDK+Gradle环境
      ########################################################################
      - name: 配置Android构建环境
        run: |
          export TIMEOUT=300
          # 清理旧环境避免冲突
          rm -rf "$HOME/android-sdk" "$HOME/gradle-7.0.2"
          
          # 配置Android SDK
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools
          SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            echo "❌ 下载SDK Tools失败，重试1次"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          # 正确解压SDK Tools（修复目录结构问题）
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 安装SDK必要组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" \
            "platforms;android-30" \
            "build-tools;30.0.2" \
            "platform-tools" \
            "extras;android;m2repository" \
            "extras;google;m2repository" \
            --verbose --no_https || exit 1

          # 配置Gradle 7.0.2
          GRADLE_VERSION="7.0.2"
          GRADLE_PATH="$HOME/gradle-$GRADLE_VERSION"
          GRADLE_URL="https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip"
          
          # 清理旧Gradle
          rm -rf "$GRADLE_PATH"
          
          # 下载并验证Gradle
          if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
            echo "❌ 下载Gradle失败，重试1次"
            wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
          fi
          
          # 验证压缩包完整性
          unzip -t gradle.zip || {
            echo "❌ Gradle压缩包损坏，重新下载"
            rm gradle.zip
            wget "$GRADLE_URL" -O gradle.zip || exit 1
            unzip -t gradle.zip || { echo "❌ Gradle压缩包再次损坏"; exit 1; }
          }
          
          # 解压并配置权限
          unzip -q gradle.zip -d "$HOME"
          chmod -R 755 "$GRADLE_PATH"
          
          # 验证Gradle安装
          echo "✅ 验证Gradle版本："
          "$GRADLE_PATH/bin/gradle" --version || { echo "❌ Gradle安装失败"; exit 1; }
          
          # 配置环境变量
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      ########################################################################
      # 步骤3：解析配置文件（读取应用信息）
      ########################################################################
      - name: 解析配置文件
        run: |
          # 初始化默认配置
          APP_PACKAGE="com.my.defaultapp"
          APP_NAME="我的应用"
          APP_VERSION="1.0.0"
          LOAD_TIMEOUT="60000"
          CUSTOM_URL="https://www.baidu.com"

          # 显示当前目录文件，确认配置文件是否存在
          echo "📂 当前工作目录文件列表："
          ls -la
          
          # 读取config.xml（若存在）
          if [ -f "config.xml" ]; then
            echo "✅ 发现config.xml，开始解析..."
            # 验证XML格式有效性
            if xmlstarlet val -q "config.xml"; then
              # 读取包名
              CONFIG_PACKAGE=$(xmlstarlet sel -t -v "/widget/@id" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_PACKAGE" ] && [[ "$CONFIG_PACKAGE" =~ ^[a-zA-Z0-9.]+$ ]]; then
                APP_PACKAGE="$CONFIG_PACKAGE"
                echo "📦 包名：$APP_PACKAGE（来自config.xml）"
              fi
              
              # 读取应用名称
              CONFIG_NAME=$(xmlstarlet sel -t -v "/widget/name" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_NAME" ]; then
                APP_NAME="$CONFIG_NAME"
                echo "🏷️ 应用名称：$APP_NAME（来自config.xml）"
              fi
              
              # 读取版本号
              CONFIG_VERSION=$(xmlstarlet sel -t -v "/widget/@version" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_VERSION" ] && [[ "$CONFIG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                APP_VERSION="$CONFIG_VERSION"
                echo "🔢 版本号：$APP_VERSION（来自config.xml）"
              fi
              
              # 读取超时设置
              CONFIG_TIMEOUT=$(xmlstarlet sel -t -v "/widget/platform[@name='android']/preference[@name='LoadUrlTimeoutValue']/@value" "config.xml" 2>/dev/null)
              if [ -n "$CONFIG_TIMEOUT" ] && [[ "$CONFIG_TIMEOUT" =~ ^[0-9]+$ ]]; then
                LOAD_TIMEOUT="$CONFIG_TIMEOUT"
                echo "⏱️ 加载超时：$LOAD_TIMEOUT（来自config.xml）"
              fi
            else
              echo "⚠️ config.xml格式无效，使用默认配置"
            fi
          else
            echo "⚠️ 未找到config.xml，使用默认配置"
          fi

          # 读取config.txt（配置目标网址）
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt | tr -d '\r')
            # 补全HTTPS协议（若缺失）
            [[ ! $CUSTOM_URL =~ ^http ]] && CUSTOM_URL="https://$CUSTOM_URL"
            echo "🌐 目标网址：$CUSTOM_URL（来自config.txt）"
          fi

          # 处理应用名称特殊字符（避免构建错误）
          APP_NAME_SAFE=$(echo "$APP_NAME" | sed 's/[^a-zA-Z0-9_-]/_/g')
          [ -z "$APP_NAME_SAFE" ] && APP_NAME_SAFE="my_app_${RANDOM:0:4}"

          # 输出最终配置（方便调试）
          echo -e "\n📋 最终构建配置："
          echo "   - 应用包名：$APP_PACKAGE"
          echo "   - 应用名称：$APP_NAME（安全名称：$APP_NAME_SAFE）"
          echo "   - 版本号：$APP_VERSION"
          echo "   - 目标网址：$CUSTOM_URL"
          echo "   - 加载超时：$LOAD_TIMEOUT ms"

          # 保存配置到环境变量（后续步骤使用）
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_NAME_SAFE=$APP_NAME_SAFE" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "LOAD_TIMEOUT=$LOAD_TIMEOUT" >> $GITHUB_ENV
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          # 定义项目路径
          echo "PROJECT_ROOT=$GITHUB_WORKSPACE/myapp/android-project" >> $GITHUB_ENV
          echo "APP_RES_DIR=$GITHUB_WORKSPACE/myapp/android-project/app/src/main/res" >> $GITHUB_ENV

      ########################################################################
      # 步骤4：创建项目目录结构
      ########################################################################
      - name: 创建项目目录结构
        run: |
          echo "✅ 开始创建项目目录：${{ env.PROJECT_ROOT }}"
          # 创建核心目录
          mkdir -p "${{ env.PROJECT_ROOT }}/app/src/main"
          mkdir -p "${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova"
          
          # 创建资源目录（含所有分辨率的图标目录）
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-mdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-hdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xxhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/mipmap-xxxhdpi"
          mkdir -p "${{ env.APP_RES_DIR }}/values"
          
          # 创建Java源码目录（按包名分层）
          JAVA_DIR="${{ env.PROJECT_ROOT }}/app/src/main/java/$(echo ${{ env.APP_PACKAGE }} | tr '.' '/')"
          mkdir -p "$JAVA_DIR"
          echo "JAVA_DIR=$JAVA_DIR" >> $GITHUB_ENV

          # 验证目录创建结果
          echo -e "\n📁 项目目录结构（前5层）："
          tree -L 5 "${{ env.PROJECT_ROOT }}"
          # 强制检查图标目录是否存在
          if [ ! -d "${{ env.APP_RES_DIR }}/mipmap-mdpi" ]; then
            echo "❌ 图标目录创建失败，终止构建"
            exit 1
          fi

            ########################################################################
      # 步骤5：生成应用图标和资源文件（修复关联数组注释错误）
      ########################################################################
      - name: 生成应用图标和资源文件
        run: |
          echo "✅ 开始生成资源文件（图标+配置）"
          
          # 1. 生成应用图标（覆盖所有分辨率，三重容错）
          # 修复：移除数组注释中的中文/特殊字符，避免Bash解析错误
          declare -A ICON_SPECS=(
            ["mdpi"]="48x48"    # Base resolution
            ["hdpi"]="72x72"    # High density
            ["xhdpi"]="96x96"   # Extra high density
            ["xxhdpi"]="144x144"# 2x extra high density
            ["xxxhdpi"]="192x192"# 3x extra high density
          )

          for DPI in "${!ICON_SPECS[@]}"; do
            SIZE=${ICON_SPECS[$DPI]}
            DEST_DIR="${{ env.APP_RES_DIR }}/mipmap-$DPI"
            DEST_PATH="$DEST_DIR/ic_launcher.png"
            
            # 方案1：生成带两层圆圈的图标（默认）
            if convert -size "$SIZE" xc:transparent \
              -fill "#2196F3" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE/2)),0" \
              -fill "white" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE*3/10)),0" \
              -fill "#2196F3" -draw "circle $((SIZE/2)),$((SIZE/2)) $((SIZE/10)),0" \
              "$DEST_PATH"; then
              echo "✅ 生成图标（默认方案）：$DEST_PATH"
            else
              # 方案2：生成圆角矩形图标（备选）
              if convert -size "$SIZE" xc:"#2196F3" -roundrectangle 0,0,$SIZE,$SIZE,10,10 "$DEST_PATH"; then
                echo "✅ 生成图标（备选方案1）：$DEST_PATH"
              else
                # 方案3：生成纯色图标（终极容错）
                convert -size "$SIZE" xc:"#2196F3" "$DEST_PATH"
                if [ -f "$DEST_PATH" ] && [ -s "$DEST_PATH" ]; then
                  echo "✅ 生成图标（备选方案2）：$DEST_PATH"
                else
                  echo "❌ 所有图标生成方案失败，终止构建"
                  exit 1
                fi
              fi
            fi

            # 最终验证图标有效性
            if [ ! -f "$DEST_PATH" ] || [ ! -s "$DEST_PATH" ]; then
              echo "❌ 图标无效（不存在或空文件）：$DEST_PATH"
              exit 1
            fi
            ls -lh "$DEST_PATH"
          done

          # 2. 生成strings.xml（应用名称配置）
          STRINGS_FILE="${{ env.APP_RES_DIR }}/values/strings.xml"
          cat > "$STRINGS_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">${{ env.APP_NAME }}</string>
              <string name="launcher_name">${{ env.APP_NAME }}</string>
              <string name="ic_launcher">ic_launcher</string> <!-- 显式关联图标资源 -->
          </resources>
          EOF
          [ -f "$STRINGS_FILE" ] && echo "✅ 生成strings.xml" || { echo "❌ strings.xml生成失败"; exit 1; }

          # 3. 生成styles.xml（应用样式配置）
          STYLES_FILE="${{ env.APP_RES_DIR }}/values/styles.xml"
          cat > "$STYLES_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                  <item name="android:windowNoTitle">true</item>
                  <item name="android:windowActionBar">false</item>
                  <item name="android:windowBackground">@android:color/white</item>
              </style>
          </resources>
          EOF
          [ -f "$STYLES_FILE" ] && echo "✅ 生成styles.xml" || { echo "❌ styles.xml生成失败"; exit 1; }

          # 验证所有资源文件
          echo -e "\n📄 生成的资源文件列表："
          find "${{ env.APP_RES_DIR }}" -type f

      ########################################################################
      # 步骤6：生成项目核心代码和配置
      ########################################################################
      - name: 生成项目核心代码和配置
        run: |
          # 生成CordovaActivity（核心页面逻辑）
          CORDOVA_ACTIVITY="${{ env.PROJECT_ROOT }}/CordovaLib/src/main/java/org/apache/cordova/CordovaActivity.java"
          cat > "$CORDOVA_ACTIVITY" << 'EOF'
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }};

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }

                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }

                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略SSL错误
                      }
                  });

                  webView.setWebChromeClient(new WebChromeClient());
                  setContentView(webView);

                  // 加载目标URL
                  webView.loadUrl("${{ env.CUSTOM_URL }}");
                  
                  // 设置超时
                  new android.os.Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
          }
          EOF
          [ -f "$CORDOVA_ACTIVITY" ] && echo "✅ 生成CordovaActivity.java" || exit 1

          # 生成AndroidManifest.xml（应用配置清单）
          MANIFEST_FILE="${{ env.PROJECT_ROOT }}/app/src/main/AndroidManifest.xml"
          cat > "$MANIFEST_FILE" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="${{ env.APP_PACKAGE }}">
              
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme">
                  
                  <activity
                      android:name="org.apache.cordova.CordovaActivity"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|smallestScreenSize|screenLayout|uiMode"
                      android:label="@string/app_name"
                      android:launchMode="singleTask">
                      
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          [ -f "$MANIFEST_FILE" ] && echo "✅ 生成AndroidManifest.xml" || exit 1

      ########################################################################
      # 步骤7：构建APK
      ########################################################################
      - name: 构建安卓应用
        run: |
          cd ${{ env.PROJECT_ROOT }}
          gradle clean assembleRelease --stacktrace
          
          # 验证APK生成
          APK_PATH=$(find . -name "*.apk" | grep -v "unaligned" | grep -v "unsigned" | head -n 1)
          if [ -z "$APK_PATH" ] || [ ! -f "$APK_PATH" ]; then
            echo "❌ APK构建失败"
            exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "✅ APK构建成功：$APK_PATH"

      ########################################################################
      # 步骤8：上传构建产物到Release
      ########################################################################
      - name: 上传构建产物到Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.APK_PATH }}
          name: ${{ env.APP_NAME_SAFE }}_v${{ env.APP_VERSION }}
          tag_name: v${{ env.APP_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
