      - name: 构建安卓套壳应用（重构模块，消除循环依赖）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取环境变量配置
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"

          # 动态创建项目目录（按包名生成Java目录结构）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          # app模块的Java目录（存放主Activity，引用布局资源）
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          # 布局资源放在app模块（CordovaLib不再依赖）
          APP_LAYOUT_DIR="$APP_DIR/src/main/res/layout"
          
          # 清理旧项目残留并创建新目录
          rm -rf "$PROJECT_PATH"
          mkdir -p "$APP_JAVA_DIR"
          mkdir -p "$APP_LAYOUT_DIR"
          mkdir -p "$APP_DIR/src/main/res/values"
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"

          # 1. 生成加载动画布局（activity_main.xml）- 放在app模块
          cat > "$APP_LAYOUT_DIR/activity_main.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
              
              <!-- WebView：加载目标网页 -->
              <WebView
                  android:id="@+id/webview"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"/>
              
              <!-- 加载动画：网页加载完成前显示 -->
              <LinearLayout
                  android:id="@+id/loading_layout"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:gravity="center"
                  android:orientation="vertical"
                  android:background="#FFFFFF">
                  
                  <!-- 圆形进度条（兼容低版本） -->
                  <ProgressBar
                      android:id="@+id/loading_progress"
                      android:layout_width="50dp"
                      android:layout_height="50dp"
                      android:indeterminate="true"
                      android:indeterminateDrawable="@android:drawable/progress_indeterminate_horizontal"/>
                  
                  <!-- 加载提示文字 -->
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:layout_marginTop="15dp"
                      android:text="加载中..."
                      android:textSize="16sp"
                      android:textColor="#333333"/>
              </LinearLayout>
          </RelativeLayout>
          EOF

          # 2. CordovaLib模块：仅提供通用WebView工具类（无资源依赖）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << EOF
          package org.apache.cordova;
          import android.content.Context;
          import android.os.Handler;
          import android.view.View;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.LinearLayout;
          import android.widget.Toast;

          // 通用WebView工具类：接收外部传入的WebView和加载布局，不直接引用R资源
          public class WebViewHelper {
              private WebView webView;
              private LinearLayout loadingLayout;
              private Context context;
              private static final int LOAD_TIMEOUT = 80000;  // 80秒加载超时

              // 构造方法：从外部传入Context、WebView、加载布局（消除资源依赖）
              public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
                  this.context = context;
                  this.webView = webView;
                  this.loadingLayout = loadingLayout;
                  initWebViewSettings();  // 初始化WebView配置
              }

              // 初始化WebView基础配置
              private void initWebViewSettings() {
                  WebSettings webSettings = webView.getSettings();
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
                  
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
              }

              // 设置WebViewClient（控制加载动画）
              public void setWebViewClient() {
                  webView.setWebViewClient(new WebViewClient() {
                      // 网页开始加载：显示动画
                      @Override
                      public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                          super.onPageStarted(view, url, favicon);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                              loadingLayout.setVisibility(View.VISIBLE);
                          }
                      }
                      
                      // 网页加载完成：隐藏动画
                      @Override
                      public void onPageFinished(WebView view, String url) {
                          super.onPageFinished(view, url);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                      
                      // 链接跳转处理
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      // SSL证书错误处理
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed();
                      }
                      
                      // 加载错误处理
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(context, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                  });
                  
                  // JS弹窗支持
                  webView.setWebChromeClient(new WebChromeClient());
              }

              // 加载目标网址
              public void loadUrl(String url) {
                  webView.loadUrl(url);
                  // 加载超时处理
                  new Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          Toast.makeText(context, "加载超时，即将关闭", Toast.LENGTH_SHORT).show();
                          ((android.app.Activity) context).finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              // 获取WebView实例（供外部调用后退等方法）
              public WebView getWebView() {
                  return webView;
              }
          }
          EOF

          # 3. app模块：主Activity（引用布局资源，调用CordovaLib的工具类）
          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
          package $APP_PACKAGE
          package $APP_PACKAGE;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.WebView;
          import android.widget.LinearLayout;
          // 导入CordovaLib的通用工具类（无资源依赖）
          import org.apache.cordova.WebViewHelper;
          // 仅在app模块引用R资源（CordovaLib不再依赖）
          import $APP_PACKAGE.R;

          public class MainActivity extends Activity {
              private WebViewHelper webViewHelper;  // 通用WebView工具类实例

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  // 加载app模块的布局资源（activity_main.xml）
                  setContentView(R.layout.activity_main);
                  
                  // 从布局中获取WebView和加载动画控件（仅在app模块操作R资源）
                  WebView webView = findViewById(R.id.webview);
                  LinearLayout loadingLayout = findViewById(R.id.loading_layout);
                  
                  // 初始化CordovaLib的工具类：传入Context、WebView、加载布局（消除循环依赖）
                  webViewHelper = new WebViewHelper(this, webView, loadingLayout);
                  webViewHelper.setWebViewClient();  // 设置WebViewClient（控制加载动画）
                  
                  // 加载目标网址（从config.txt读取的配置）
                  webViewHelper.loadUrl("${CUSTOM_URL}");
              }
              
              // 返回键后退逻辑（通过工具类获取WebView实例）
              @Override
              public void onBackPressed() {
                  if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
                      webViewHelper.getWebView().goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
              
              // 页面生命周期处理（通过工具类获取WebView实例）
              @Override
              protected void onPause() {
                  super.onPause();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onPause();
                  }
              }
              
              @Override
              protected void onResume() {
                  super.onResume();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onResume();
                  }
              }
              
              @Override
              protected void onDestroy() {
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF

          # 4. 生成清单文件（AndroidManifest.xml）- 保持原有配置
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="$APP_PACKAGE">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
              
              <application
                  android:label="$APP_NAME"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true">
                  
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
                      android:launchMode="singleTask">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                      <intent-filter>
                          <action android:name="android.intent.action.VIEW"/>
                          <category android:name="android.intent.category.DEFAULT"/>
                          <category android:name="android.intent.category.BROWSABLE"/>
                          <data android:scheme="http"/>
                          <data android:scheme="https"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 5. 生成字符串资源（strings.xml）- 保持原有配置
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">$APP_NAME</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # 6. 生成Gradle基础配置（gradle.properties）- 保持原有配置
          cat > "$ANDROID_ROOT/gradle.properties" << EOF
          # 启用AndroidX支持
          android.useAndroidX=true
          android.enableJetifier=false
          
          # 配置Gradle内存（避免OOM）
          org.gradle.jvmargs=-Xmx1536m
          
          # 启用并行构建（加速）
          org.gradle.parallel=true
          EOF

          # 7. 生成模块依赖配置（settings.gradle）- 保持原有逻辑
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          EOF

          # 8. 生成 CordovaLib 库模块配置（build.gradle）- 移除对app的依赖，消除循环
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.library'
          
          android {
              compileSdk 30
              namespace 'org.apache.cordova'  // 明确库模块命名空间
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
              
              lintOptions { abortOnError false }  // 忽略lint错误（避免构建中断）
          }
          
          dependencies {
              // 仅依赖通用库，不依赖app模块（消除循环依赖）
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 9. 生成主应用模块配置（build.gradle）- 仅app依赖CordovaLib，单向依赖
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.application'
          
          android {
              compileSdk 30
              namespace '$APP_PACKAGE'  // 明确应用模块命名空间
              
              defaultConfig {
                  applicationId "$APP_PACKAGE"
                  minSdk 21
                  targetSdk 30
                  versionCode $APP_VERSION_CODE
                  versionName "$APP_VERSION_NAME"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false  // 关闭混淆（简化调试）
                      signingConfig signingConfigs.debug  // 使用调试签名（便于测试安装）
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
              
              lintOptions { abortOnError false }  // 忽略lint错误（避免构建中断）
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
          }
          
          dependencies {
              // 仅app依赖CordovaLib，单向依赖（无循环）
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 10. 生成混淆规则（proguard-rules.pro）- 仅保留app模块的R资源
          cat > "$APP_DIR/proguard-rules.pro" << EOF
          # 保留WebView相关类（避免混淆导致功能失效）
          -keepclassmembers class * extends android.webkit.WebViewClient {
              public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
              public boolean *(android.webkit.WebView, java.lang.String);
          }
          -keepclassmembers class * extends android.webkit.WebChromeClient {
              public void *(android.webkit.WebView, java.lang.String);
          }
          # 保留app模块的R资源（避免混淆导致资源引用错误）
          -keep class $APP_PACKAGE.R { *; }
          -keep class $APP_PACKAGE.R$layout { *; }
          -keep class $APP_PACKAGE.R$id { *; }
          EOF
          # 11. 编译 Release 版本 APK（增加日志输出，便于问题定位）
          echo "=== 开始编译 Release 版本 APK ==="
          cd "$ANDROID_ROOT" || exit 1  # 进入项目根目录
          
          # 生成 Gradle 包装器（确保版本一致性）
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew  # 赋予执行权限
          
          # 执行清理与编译（--stacktrace+--info 输出详细日志，便于排查错误）
          ./gradlew clean :app:assembleRelease --stacktrace --info
          
          # 检查 APK 是否生成成功，并复制到指定路径（含版本号，便于识别）
          APK_SOURCE1="$APP_DIR/build/outputs/apk/release/app-release.apk"
          APK_SOURCE2="$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk"
          APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v$APP_VERSION_NAME.apk"
          
          if [ -f "$APK_SOURCE1" ]; then
            cp "$APK_SOURCE1" "$APK_DEST"
            echo "✅ 找到已签名 APK，复制路径：$APK_DEST"
          elif [ -f "$APK_SOURCE2" ]; then
            cp "$APK_SOURCE2" "$APK_DEST"
            echo "✅ 找到未签名 APK，复制路径：$APK_DEST"
          else
            echo "❌ 未找到 APK 文件，输出构建目录结构用于排查："
            ls -R "$APP_DIR/build/outputs"  # 打印输出目录结构，协助定位问题
            exit 1  # 构建失败，终止工作流
          fi

      - name: 创建并推送 Git Tag（与版本号关联，标记修复）
        run: |
          # 从环境变量获取版本号（来自 config.txt）
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          TAG_NAME="v$APP_VERSION_NAME"  # Tag 格式：v1.0.0（含修复标识）
          
          # 配置 Git 身份（用于提交 Tag）
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 若 Tag 已存在，先删除旧 Tag（避免版本冲突）
          if git rev-parse --verify --quiet "$TAG_NAME"; then
            echo "⚠️ Tag $TAG_NAME 已存在，删除旧 Tag..."
            git tag -d "$TAG_NAME"  # 删除本地 Tag
            git push origin --delete "$TAG_NAME" 2>/dev/null || true  # 删除远程 Tag（忽略失败）
          fi
          
          # 创建新 Tag 并推送（注明消除循环依赖）
          git tag -a "$TAG_NAME" -m "自定义浏览器应用 $TAG_NAME（消除模块循环依赖）"
          if ! git push origin "$TAG_NAME"; then
            echo "⚠️ Tag 推送失败，重试一次..."
            git push origin "$TAG_NAME" || exit 1  # 重试失败则终止
          fi
          echo "✅ Git Tag 推送成功：$TAG_NAME"

      - name: 发布 APK 到 GitHub Releases（说明修复内容）
        uses: softprops/action-gh-release@v2  # 成熟的 Releases 发布工具
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动注入的仓库令牌（无需手动配置）
        with:
          tag_name: "v${{ env.APP_VERSION_NAME }}"  # 与 Git Tag 保持一致
          name: "自定义浏览器应用 v${{ env.APP_VERSION_NAME }}（修复循环依赖）"  # 标题注明修复
          body: |  # Releases 描述（重点说明修复内容）
            ### 应用信息
            - 应用名称：${{ env.APP_NAME }}
            - 应用包名：${{ env.APP_PACKAGE }}
            - 支持系统：Android 5.0+（API 21 及以上）
            - 构建版本：v${{ env.APP_VERSION_NAME }}（版本号：${{ env.APP_VERSION_CODE }}）
            - 构建时间：${{ github.run_at }}
            - 修复内容：**消除 app ↔ CordovaLib 模块循环依赖**，解决构建失败问题
            
            ### 核心功能
            1. 加载目标网址：${{ env.CUSTOM_URL }}
            2. 网页加载时显示 **圆形进度条+“加载中...”文字**，解决白屏问题
            3. 支持网页内跳转、缩放、JS 交互
            4. 解决混合内容（HTTP/HTTPS）加载问题
            5. 支持返回键网页后退
            6. 加载超时（80秒）自动关闭页面
            
            ### 技术优化
            - 重构模块结构：CordovaLib 仅提供通用 WebView 工具类，不依赖 app 资源
            - 资源引用优化：仅 app 模块操作 R 资源，通过构造方法传入控件实例
            - 依赖关系：app 单向依赖 CordovaLib，无循环依赖
            
            ### 注意事项
            - 此 APK 为调试签名版本，可直接安装测试
            - 生产环境使用需替换为正式签名
          files: /home/runner/work/webview-app/webview-app/CustomBrowser-v${{ env.APP_VERSION_NAME }}.apk  # 待上传的 APK 路径
          draft: false  # 不设为草稿（直接发布）
          prerelease: false  # 不设为预发布（标记为正式版本）
