name: 安卓浏览器式套壳应用构建+自动发版（豆包2号修复版）
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换阿里云Ubuntu镜像源（加速依赖下载）
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11（安卓构建必需）
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools（优先阿里云镜像）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证+安装必要组件（API 30）
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2（独立下载，确保gradle-wrapper可用）
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH
      - name: 读取 config.txt 配置（网址/包名/应用名/版本号）
        run: |
          # 定义默认配置（防止 config.txt 缺失）
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取 config.txt（格式：键=值，每行一个配置）
          if [ -f "config.txt" ]; then
            echo "✅ 读取 config.txt 配置..."
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            echo "⚠️ 未找到 config.txt，使用默认配置..."
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 验证配置有效性
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            echo "⚠️ 包名格式无效，使用默认包名：$DEFAULT_APP_PACKAGE"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            echo "⚠️ 版本号必须为整数，使用默认值：$DEFAULT_APP_VERSION_CODE"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 写入环境变量（供后续步骤使用）
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV
          echo "PROJECT_PATH=/home/runner/work/webview-app/webview-app/myapp" >> $GITHUB_ENV
          echo "ANDROID_ROOT=/home/runner/work/webview-app/webview-app/myapp/android-project" >> $GITHUB_ENV

          # 打印最终配置（便于调试）
          echo -e "\n📋 最终构建配置："
          echo "目标网址：$CUSTOM_URL"
          echo "应用包名：$APP_PACKAGE"
          echo "应用名称：$APP_NAME"
          echo "版本名称：$APP_VERSION_NAME"
          echo "版本号（整数）：$APP_VERSION_CODE"

      - name: 构建安卓套壳应用（集成多分辨率图标+修复gradlew缺失）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取环境变量配置
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"
          ANDROID_ROOT="${{ env.ANDROID_ROOT }}"
          
          # 动态创建项目目录结构（提前创建，确保路径存在）
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          APP_LAYOUT_DIR="$APP_DIR/src/main/res/layout"
          APP_DRAWABLE_DIR="$APP_DIR/src/main/res/drawable"
          
          # 清理旧项目残留并创建完整目录树
          rm -rf "${{ env.PROJECT_PATH }}"
          mkdir -p "$APP_JAVA_DIR" \
                   "$APP_LAYOUT_DIR" \
                   "$APP_DRAWABLE_DIR" \
                   "$APP_DIR/src/main/res/values" \
                   "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova" \
                   "$ANDROID_ROOT/gradle/wrapper"  # 提前创建gradle目录（关键修复）
          
          # 验证核心目录是否创建成功
          if [ ! -d "$ANDROID_ROOT/gradle/wrapper" ]; then
            echo "❌ 关键目录创建失败：$ANDROID_ROOT/gradle/wrapper"
            exit 1
          fi

          # 1. 多分辨率图标处理（独立流程，不影响构建脚本）
          mkdir -p "$APP_DIR/src/main/res/mipmap-mdpi" \
                   "$APP_DIR/src/main/res/mipmap-hdpi" \
                   "$APP_DIR/src/main/res/mipmap-xhdpi" \
                   "$APP_DIR/src/main/res/mipmap-xxhdpi"
          
          declare -A icon_mappings=(
              ["icon/48.png"]="mipmap-mdpi/ic_launcher.png"
              ["icon/72.png"]="mipmap-hdpi/ic_launcher.png"
              ["icon/96.png"]="mipmap-xhdpi/ic_launcher.png"
              ["icon/144.png"]="mipmap-xxhdpi/ic_launcher.png"
          )
          
          missing_icons=0
          for src in "${!icon_mappings[@]}"; do
              dest="$APP_DIR/src/main/res/${icon_mappings[$src]}"
              if [ -f "$src" ]; then
                  cp "$src" "$dest"
                  echo "✅ 已复制图标: $src -> $dest"
              else
                  echo "⚠️ 未找到图标文件: $src，将使用默认图标"
                  missing_icons=1
              fi
          done
          # 生成默认图标（不影响构建脚本路径）
          if [ $missing_icons -eq 1 ]; then
            echo "⚠️ 生成默认图标..."
            for src in "${!icon_mappings[@]}"; do
                dest="$APP_DIR/src/main/res/${icon_mappings[$src]}"
                cat > "$dest" << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="oval">
              <solid android:color="#2196F3"/>
          </shape>
          EOF
            done
          fi

          # 2. 生成应用核心资源文件（布局/动画/字符串）
          cat > "$APP_LAYOUT_DIR/activity_main.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
              <WebView
                  android:id="@+id/webview"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"/>
              <LinearLayout
                  android:id="@+id/loading_layout"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:gravity="center"
                  android:orientation="vertical"
                  android:background="@drawable/loading_bg_gradient">
                  <ProgressBar
                      android:id="@+id/loading_progress"
                      android:layout_width="60dp"
                      android:layout_height="60dp"
                      android:indeterminate="true"
                      android:indeterminateDrawable="@drawable/loading_circle" />
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:layout_marginTop="20dp"
                      android:text="加载中..."
                      android:textSize="18sp"
                      android:textColor="#333333"
                      android:textStyle="bold" />
              </LinearLayout>
          </RelativeLayout>
          EOF

          cat > "$APP_DRAWABLE_DIR/loading_bg_gradient.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <gradient
                  android:angle="90"
                  android:centerColor="#F8F8F8"
                  android:endColor="#FFFFFF"
                  android:startColor="#F0F0F0"
                  android:type="linear" />
          </shape>
          EOF

          cat > "$APP_DRAWABLE_DIR/loading_circle.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
              android:duration="1200"
              android:fromDegrees="0"
              android:pivotX="50%"
              android:pivotY="50%"
              android:toDegrees="360">
              <shape
                  android:innerRadius="20dp"
                  android:shape="ring"
                  android:thickness="6dp"
                  android:useLevel="false">
                  <gradient
                      android:centerColor="#40C4FF"
                      android:endColor="#00BFA5"
                      android:startColor="#2196F3"
                      android:type="sweep" />
              </shape>
          </animated-rotate>
          EOF

          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">$APP_NAME</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # 3. 生成核心Java代码（WebView逻辑+主Activity）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << EOF
          package org.apache.cordova;
          import android.content.Context;
          import android.os.Handler;
          import android.view.View;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.LinearLayout;
          import android.widget.Toast;

          public class WebViewHelper {
              private WebView webView;
              private LinearLayout loadingLayout;
              private Context context;
              private static final int LOAD_TIMEOUT = 80000;

              public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
                  this.context = context;
                  this.webView = webView;
                  this.loadingLayout = loadingLayout;
                  initWebViewSettings();
              }

              private void initWebViewSettings() {
                  WebSettings webSettings = webView.getSettings();
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
              }

              public void setWebViewClient() {
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                          super.onPageStarted(view, url, favicon);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                              loadingLayout.setVisibility(View.VISIBLE);
                          }
                      }
                      
                      @Override
                      public void onPageFinished(WebView view, String url) {
                          super.onPageFinished(view, url);
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                      
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed();
                      }
                      
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(context, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                  });
                  webView.setWebChromeClient(new WebChromeClient());
              }

              public void loadUrl(String url) {
                  webView.loadUrl(url);
                  new Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          Toast.makeText(context, "加载超时，即将关闭", Toast.LENGTH_SHORT).show();
                          ((android.app.Activity) context).finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              public WebView getWebView() {
                  return webView;
              }
          }
          EOF

          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
          package $APP_PACKAGE;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.WebView;
          import android.widget.LinearLayout;
          import org.apache.cordova.WebViewHelper;
          import $APP_PACKAGE.R;

          public class MainActivity extends Activity {
              private WebViewHelper webViewHelper;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_main);
                  
                  WebView webView = findViewById(R.id.webview);
                  LinearLayout loadingLayout = findViewById(R.id.loading_layout);
                  
                  webViewHelper = new WebViewHelper(this, webView, loadingLayout);
                  webViewHelper.setWebViewClient();
                  webViewHelper.loadUrl("$CUSTOM_URL");
              }
              
              @Override
              public void onBackPressed() {
                  if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
                      webViewHelper.getWebView().goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
              
              @Override
              protected void onPause() {
                  super.onPause();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onPause();
                  }
              }
              
              @Override
              protected void onResume() {
                  super.onResume();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onResume();
                  }
              }
              
              @Override
              protected void onDestroy() {
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF
          # 4. 生成构建脚本核心文件（重点修复gradlew缺失问题）
          # 4.1 生成gradle-wrapper.properties（指定Gradle版本，确保依赖正确）
          cat > "$ANDROID_ROOT/gradle/wrapper/gradle-wrapper.properties" << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.0.2-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

          # 4.2 生成gradlew脚本（可执行，解决"找不到gradlew"错误）
          cat > "$ANDROID_ROOT/gradlew" << 'EOF'
          #!/usr/bin/env sh
          ##############################################################################
          #
          #  Gradle start up script for UN*X
          #
          ##############################################################################

          # Set local scope for the variables with windows NT shell
          if [ -n "$OS" ] && [ -z "$CYGWIN" ]; then
              OSC=
              OSE=
          else
              OSC='${'
              OSE='}'
          fi

          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS="-Xmx64m -Xms64m"

          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD=maximum
          if [ "$MAX_FD" = "maximum" ] || [ "$MAX_FD" = "max" ]; then
              # Get max file descriptor limit
              MAX_FD=$(ulimit -H -n)
              if [ $? -ne 0 ]; then
                  echo "Warning: Unable to query maximum file descriptor limit"
                  MAX_FD=1024
              fi
          fi

          # For Cygwin, ensure paths are in UNIX format before anything is touched
          if [ "$(uname)" = "CYGWIN" ] || [ "$(uname)" = "MINGW" ] || [ "$(uname)" = "MSYS" ]; then
              [ -n "$JAVA_HOME" ] && JAVA_HOME=$(cygpath --unix "$JAVA_HOME")
          fi

          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ]; do
              ls=$(ls -ld "$PRG")
              link=$(expr "$ls" : '.*-> \(.*\)$')
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=$(dirname "$PRG")"/$link"
              fi
          done
          SAVED="$(pwd)"
          cd "$(dirname "$PRG")" > /dev/null
          APP_HOME="$(pwd -P)"
          cd "$SAVED" > /dev/null

          # Find java.exe
          if [ -n "$JAVA_HOME" ]; then
              JAVACMD="$JAVA_HOME/bin/java"
              if [ ! -x "$JAVACMD" ]; then
                  echo "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
                  echo "Please set the JAVA_HOME variable in your environment to match the"
                  echo "location of your Java installation."
                  exit 1
              fi
          else
              JAVACMD="java"
              if ! command -v java > /dev/null 2>&1; then
                  echo "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
                  echo "Please set the JAVA_HOME variable in your environment to match the"
                  echo "location of your Java installation."
                  exit 1
              fi
          fi

          # Increase the maximum file descriptors if we can
          if [ "$MAX_FD" -gt 1024 ]; then
              if [ "$(uname)" = "Darwin" ]; then
                  # macOS only supports ulimit -n up to the hard limit
                  HARD_MAX_FD=$(ulimit -H -n)
                  if [ "$HARD_MAX_FD" -lt "$MAX_FD" ]; then
                      echo "Warning: The hard limit for file descriptors ($HARD_MAX_FD) is less than the requested maximum ($MAX_FD)"
                      MAX_FD="$HARD_MAX_FD"
                  fi
              fi
              ulimit -n "$MAX_FD"
              if [ $? -ne 0 ]; then
                  echo "Warning: Unable to set maximum file descriptor limit to $MAX_FD"
              fi
          fi

          # Collect all arguments for the java command, following the shell quoting and substitution rules
          eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$@"

          # Execute the java command
          exec "$JAVACMD" "$@"
          EOF

          # 4.3 赋予gradlew可执行权限（关键步骤，避免权限不足）
          chmod +x "$ANDROID_ROOT/gradlew"
          echo "✅ 已生成gradlew并赋予可执行权限，路径：$ANDROID_ROOT/gradlew"

          # 4.4 生成AndroidManifest.xml（修复语法错误，确保编译通过）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="$APP_PACKAGE">
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />

              <application
                  android:name="android.app.Application"
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true">

                  <activity
                      android:name="$APP_PACKAGE.MainActivity"
                      android:exported="true"
                      android:launchMode="singleTask"
                      android:configChanges="orientation|keyboardHidden|screenSize">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <activity
                      android:name="org.apache.cordova.engine.SystemWebViewActivity"
                      android:configChanges="orientation|keyboardHidden|screenSize"
                      android:exported="false" />

                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="$APP_PACKAGE.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>
              </application>
          </manifest>
          EOF

          # 5. 生成项目构建配置文件（确保编译依赖正确）
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          rootProject.name = '$APP_NAME'
          EOF

          cat > "$ANDROID_ROOT/build.gradle" << EOF
          buildscript {
              repositories {
                  mavenCentral()
                  google()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:4.2.2'
              }
          }

          allprojects {
              repositories {
                  mavenCentral()
                  google()
              }
          }

          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          cat > "$APP_DIR/build.gradle" << EOF
          apply plugin: 'com.android.application'

          android {
              compileSdkVersion 30
              buildToolsVersion "30.0.2"

              defaultConfig {
                  applicationId "$APP_PACKAGE"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode $APP_VERSION_CODE
                  versionName "$APP_VERSION_NAME"
                  multiDexEnabled true
              }

              buildTypes {
                  release {
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.debug
                  }
              }

              lintOptions {
                  abortOnError false
                  checkReleaseBuilds false
              }

              packagingOptions {
                  exclude 'META-INF/LICENSE'
                  exclude 'META-INF/LICENSE.txt'
                  exclude 'META-INF/NOTICE'
                  exclude 'META-INF/NOTICE.txt'
              }
          }

          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.3.1'
              implementation 'androidx.multidex:multidex:2.0.1'
              implementation 'androidx.core:core:1.6.0'
          }
          EOF

          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          apply plugin: 'com.android.library'

          android {
              compileSdkVersion 30
              buildToolsVersion "30.0.2"

              defaultConfig {
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "1.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }

              lintOptions {
                  abortOnError false
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.3.1'
              implementation 'androidx.legacy:legacy-support-v4:1.0.0'
          }
          EOF

          # 6. 执行编译（添加路径验证，确保gradlew可正常调用）
          echo "🔨 开始编译安卓应用，验证项目目录..."
          if [ ! -d "$ANDROID_ROOT" ]; then
              echo "❌ 项目根目录不存在: $ANDROID_ROOT"
              exit 1
          fi
          cd "$ANDROID_ROOT" || exit 1

          # 验证gradlew是否存在且可执行
          if [ ! -f "gradlew" ]; then
              echo "❌ gradlew文件缺失，路径: $(pwd)"
              exit 1
          fi
          if [ ! -x "gradlew" ]; then
              echo "⚠️ gradlew无执行权限，重新赋予权限..."
              chmod +x "gradlew"
          fi

          # 执行编译命令
          ./gradlew clean :app:assembleRelease --stacktrace

          # 7. 处理编译产物（APK+源码包）
          APK_PATH="$APP_DIR/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
              APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v$APP_VERSION_NAME.apk"
              cp "$APK_PATH" "$APK_DEST"
              echo "✅ APK编译成功: $APK_DEST"
              echo "APK_PATH=$APK_DEST" >> $GITHUB_ENV
          else
              echo "❌ APK编译失败，未找到输出文件"
              exit 1
          fi

          # 打包源码（排除编译产物）
          SOURCE_ZIP_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-source-v$APP_VERSION_NAME.zip"
          zip -q -r "$SOURCE_ZIP_DEST" "$ANDROID_ROOT" \
              -x "*/build/*" "*/.gradle/*" "*/gradle/*" "*/.idea/*"
          echo "✅ 源码打包成功: $SOURCE_ZIP_DEST"
          echo "SOURCE_ZIP_PATH=$SOURCE_ZIP_DEST" >> $GITHUB_ENV

      - name: 发布到GitHub Releases
        run: |
          RELEASE_TAG="v${{ env.APP_VERSION_NAME }}"
          RELEASE_TITLE="Custom Browser v${{ env.APP_VERSION_NAME }}"
          RELEASE_BODY=$(cat << EOF
          ## 自定义浏览器应用 v${{ env.APP_VERSION_NAME }}
          - 目标网址：${{ env.CUSTOM_URL }}
          - 应用包名：${{ env.APP_PACKAGE }}
          - 支持系统：Android 5.0+
          - 修复内容：解决gradlew缺失导致的编译失败问题
          EOF
          )

          # 推送Tag并创建Release
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "$RELEASE_TAG" -m "$RELEASE_TITLE"
          git push origin "$RELEASE_TAG"

          sudo apt-get install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$RELEASE_TAG" \
              --title "$RELEASE_TITLE" \
              --body "$RELEASE_BODY" \
              "${{ env.APK_PATH }}" \
              "${{ env.SOURCE_ZIP_PATH }}"

      - name: 清理构建产物
        run: |
          rm -rf "${{ env.ANDROID_ROOT }}"
          rm -rf "${{ env.PROJECT_PATH }}"
          echo "✅ 清理完成"
