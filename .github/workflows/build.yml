name: 构建安卓套壳应用（自动发版到Releases）
on:
  workflow_dispatch:  # 支持手动触发构建

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取代码仓库
      - name: 拉取代码
        uses: actions/checkout@v4

      # 步骤2：安装安卓构建工具链（修复SDK路径冲突）
      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 1. 安装并验证 JDK 11
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          JDK11_PATH="/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JDK11_PATH=$JDK11_PATH" >> $GITHUB_ENV

          # 2. 清理旧SDK路径变量（关键：避免冲突）
          echo "⚠️ 清理可能存在的旧SDK环境变量..."
          unset ANDROID_HOME
          unset ANDROID_SDK_ROOT
          # 强制删除系统默认SDK路径的软链接（避免干扰）
          if [ -d "/usr/local/lib/android/sdk" ]; then
            sudo rm -rf /usr/local/lib/android/sdk
          fi

          # 3. 配置唯一SDK路径（确保全局唯一）
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          echo "✅ 配置唯一SDK路径：$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 4. 下载并解压 SDK Tools（新版目录结构）
          SDK_TOOLS_URL="https://mirrors.tuna.tsinghua.edu.cn/android/repository/commandlinetools-linux-9477386_latest.zip"
          wget --timeout=$TIMEOUT --tries=3 $SDK_TOOLS_URL -O sdk-tools.zip || {
            echo "⚠️ 清华镜像失败，重试官方源"
            wget --timeout=$TIMEOUT --tries=2 https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip || exit 1
          }
          mkdir -p $ANDROID_SDK_PATH/cmdline-tools/latest
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools/latest
          mv $ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/* $ANDROID_SDK_PATH/cmdline-tools/latest/
          rm -rf $ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools

          # 5. 配置SDK镜像（加速下载）
          mkdir -p "$ANDROID_SDK_PATH/.android"
          cat > "$ANDROID_SDK_PATH/.android/repositories.cfg" << EOF
          [main]
          enabledRepositories=
              https\://mirrors.tuna.tsinghua.edu.cn/android/repository/
              https\://dl.google.com/android/repository/
          EOF

          # 6. 自动接受SDK许可证
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x $SDK_MANAGER
          echo "🔓 自动接受所有SDK许可证..."
          yes | $SDK_MANAGER --sdk_root=$ANDROID_SDK_PATH --licenses || true
          
          # 安装SDK核心组件（指定 --sdk_root 确保路径正确）
          $SDK_MANAGER --sdk_root=$ANDROID_SDK_PATH \
            "platforms;android-30" "build-tools;30.0.2" "platform-tools" \
            --verbose --no_https || {
              echo "⚠️ 镜像安装失败，重试官方源"
              rm -f "$ANDROID_SDK_PATH/.android/repositories.cfg"
              yes | $SDK_MANAGER --sdk_root=$ANDROID_SDK_PATH --licenses || true
              $SDK_MANAGER --sdk_root=$ANDROID_SDK_PATH \
                "platforms;android-30" "build-tools;30.0.2" "platform-tools" \
                --verbose --no_https || exit 1
            }

          # 7. 安装Gradle 7.0.2（避免构建时超时）
          GRADLE_PATH="$HOME/gradle-7.0.2"
          GRADLE_URL="https://mirrors.huaweicloud.com/gradle/gradle-7.0.2-bin.zip"
          if [ ! -d "$GRADLE_PATH" ]; then
            wget --timeout=$TIMEOUT --tries=3 $GRADLE_URL -O gradle-7.0.2-bin.zip || exit 1
            unzip -q gradle-7.0.2-bin.zip -d $HOME
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

          # 8. 验证SDK路径（确保配置生效）
          echo "✅ 最终SDK路径验证："
          echo "ANDROID_HOME: $ANDROID_SDK_PATH"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_PATH"
          echo "SDK工具路径存在性：$(ls $ANDROID_SDK_PATH/build-tools/30.0.2/aapt > /dev/null 2>&1 && echo '是' || echo '否')"

      # 步骤3：构建安卓套壳应用（确保SDK路径统一 + 修复编译截断问题）
      - name: 构建安卓套壳应用
        run: |
          # 强制加载统一的SDK路径（覆盖任何可能的冲突变量）
          export JAVA_HOME=$JDK11_PATH
          export ANDROID_HOME=$ANDROID_SDK_PATH
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export PATH="$JAVA_HOME/bin:$PATH:$ANDROID_SDK_PATH/build-tools/30.0.2:$ANDROID_SDK_PATH/platform-tools:$GRADLE_PATH/bin"
          
          # 再次验证环境（关键：确保构建时路径无冲突）
          echo "✅ 构建阶段环境验证："
          echo "Java路径：$JAVA_HOME"
          echo "Java版本：$(java -version 2>&1)"
          echo "Gradle版本：$(gradle -v | head -n 1)"
          echo "ANDROID_HOME：$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT：$ANDROID_SDK_ROOT"
          echo "Build Tools版本：$(ls $ANDROID_SDK_PATH/build-tools/ | head -n 1)"

          # 项目目录初始化（避免路径嵌套导致SDK路径被误识别）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH"
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH" || exit 1

          # 创建项目结构
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          WWW_DIR="$PROJECT_PATH/www"
          mkdir -p "$APP_DIR/src/main/java/com/my/simpleapp" \
                   "$APP_DIR/src/main/res/values" \
                   "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova" \
                   "$WWW_DIR"

          # 1. 编写WebView套壳页面
          cat > "$WWW_DIR/index.html" << EOF
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>安卓套壳应用</title>
              <style>
                  body { margin: 0; padding: 2rem; background: #f5f5f5; text-align: center; font-family: sans-serif; }
                  h1 { color: #2196F3; margin-bottom: 1.5rem; }
                  p { color: #666; font-size: 1.1rem; }
              </style>
          </head>
          <body>
              <h1>✅ 安卓套壳应用构建成功！</h1>
              <p>基于WebView的套壳应用</p>
              <p>构建时间：$(date +"%Y-%m-%d %H:%M:%S")</p>
          </body>
          </html>
          EOF

          # 2. 编写Cordova核心类（WebView逻辑）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.widget.LinearLayout;

          public class CordovaActivity extends Activity {
              protected WebView webView;
              protected String launchUrl = "file:///android_asset/www/index.html";

              @Override
              public void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  
                  LinearLayout layout = new LinearLayout(this);
                  layout.addView(webView);
                  setContentView(layout);
                  webView.loadUrl(launchUrl);
              }
          }
          EOF

          # 3. 配置CordovaLib模块（AndroidX依赖）
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          apply plugin: 'com.android.library'

          android {
              compileSdkVersion 30
              namespace 'org.apache.cordova'

              sourceSets {
                  main {
                      java { srcDirs = ['src/main/java'] }
                      res { srcDirs = ['src/main/res'] }
                  }
              }

              lintOptions {
                  checkReleaseBuilds false
                  abortOnError false
              }
          }

          repositories {
              maven { url 'https://maven.aliyun.com/repository/google' }
              maven { url 'https://maven.aliyun.com/repository/public' }
              mavenCentral()
          }

          dependencies {
              implementation fileTree(dir: 'libs', include: ['*.jar'])
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 4. 配置App模块（同步AndroidX + 修复注释语法错误）
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }

          apply plugin: 'com.android.application'

          android {
              compileSdkVersion 30
              namespace 'com.my.simpleapp'

              sourceSets {
                  main {
                      java { srcDirs = ['src/main/java'] }
                      res { srcDirs = ['src/main/res'] }
                      assets { srcDirs = ['src/main/assets', '../../www'] }
                      manifest { srcFile 'src/main/AndroidManifest.xml' }
                  }
              }

              defaultConfig {
                  applicationId "com.my.simpleapp"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "1.0.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }

              // 修复原脚本中#注释语法错误（Gradle用//注释）
              sdk.dir = System.getenv("ANDROID_HOME")
          }

          repositories {
              maven { url 'https://maven.aliyun.com/repository/google' }
              maven { url 'https://maven.aliyun.com/repository/public' }
          }

          dependencies {
              implementation fileTree(dir: 'libs', include: ['*.jar'])
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 5. 编写MainActivity（继承CordovaActivity）
          cat > "$APP_DIR/src/main/java/com/my/simpleapp/MainActivity.java" << EOF
          package com.my.simpleapp;
          import org.apache.cordova.CordovaActivity;
          import android.os.Bundle;

          public class MainActivity extends CordovaActivity {
              @Override
              public void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
              }
          }
          EOF

          # 6. 编写AndroidManifest.xml（权限配置）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="com.my.simpleapp">

              <uses-sdk
                  android:minSdkVersion="21"
                  android:targetSdkVersion="30" />

              <uses-permission android:name="android.permission.INTERNET" />

              <application
                  android:allowBackup="true"
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true">

                  <activity
                      android:name=".MainActivity"
                      android:label="@string/app_name"
                      android:configChanges="orientation|keyboardHidden|screenSize">

                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 7. 编写字符串资源（主题+应用名）
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">YJSCSDH</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                  <item name="colorPrimary">#2196F3</item>
                  <item name="colorPrimaryDark">#1976D2</item>
                  <item name="colorAccent">#03A9F4</item>
              </style>
          </resources>
          EOF

          # 8. 配置模块关联（settings.gradle）
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app'
          include ':CordovaLib'
          EOF

          # 9. 配置项目根目录Gradle（统一仓库）
          cat > "$ANDROID_ROOT/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }

          allprojects {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
          }

          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          # 10. 配置gradle.properties（核心修复AndroidX+SDK路径）
          cat > "$ANDROID_ROOT/gradle.properties" << EOF
          # 启用AndroidX
          android.useAndroidX=true
          android.enableJetifier=true
          # 显式指定SDK路径（覆盖任何模块级冲突）
          android.sdk.dir=$ANDROID_SDK_PATH
          # JDK路径配置
          org.gradle.java.home=$JDK11_PATH
          # 优化Gradle构建速度
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          EOF

          # 11. 生成Gradle wrapper并编译APK（修复原脚本截断问题，补充完整编译逻辑）
          cd "$ANDROID_ROOT" || exit 1
          # 生成wrapper时显式传递SDK路径
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew
          # 执行Release版APK编译
          echo "🔨 开始编译Release版APK..."
          ./gradlew :app:assembleRelease --info

          # 验证APK生成结果并复制到
