name: 构建安卓应用（项目内直接创建Activity，最终方案）
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局装Cordova+定位基础资源
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          # 找到cordova-android根目录（用于复制其他模板）
          CORDOVA_ANDROID_ROOT=$(find /opt/hostedtoolcache/node -type d -name "cordova-android" -path "*/node_modules/cordova-android" | head -1)
          [ -d "$CORDOVA_ANDROID_ROOT" ] || { echo "❌ 没找到cordova-android根目录"; exit 1; }
          echo "CORDOVA_ANDROID_ROOT=$CORDOVA_ANDROID_ROOT" >> $GITHUB_ENV
          cordova -v

      - name: 安装JDK 8
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk -y
          echo "JDK8_PATH=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV

      - name: 安装安卓SDK
        run: |
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

      - name: 安装Gradle 6.9
        run: |
          GRADLE_PATH="$HOME/gradle-6.9"
          wget https://services.gradle.org/distributions/gradle-6.9-bin.zip -O gradle-6.9-bin.zip
          unzip -q gradle-6.9-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 构建项目（在项目内直接创建Activity）
        run: |
          export JAVA_HOME=$JDK8_PATH
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export GRADLE_HOME=$GRADLE_PATH
          
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH"
          mkdir -p "$PROJECT_PATH/www"
          sudo chmod -R 777 "$PROJECT_PATH"
          
          # 1. 创建项目配置（包名必须与后续Activity一致）
          echo '{"name":"x-app","version":"1.0.0","cordova":{"platforms":["android"]}}' > "$PROJECT_PATH/package.json"
          echo '<?xml version="1.0"?><widget id="com.my.simpleapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0"><name>YJSCSDH</name><content src="index.html"/></widget>' > "$PROJECT_PATH/config.xml"
          echo '<html><body>Hello</body></html>' > "$PROJECT_PATH/www/index.html"
          
          cd "$PROJECT_PATH"
          
          # 2. 添加安卓平台（先创建基础工程结构）
          cordova platform add android@9.0.0
          sleep 5
          
          # 3. 补全模板资源（platform_www、strings.xml、AndroidManifest.xml）
          # 3.1 补platform_www
          ASSETS_WWW_PATH=$(find "$CORDOVA_ANDROID_ROOT" -type d -name "www" -path "*/templates/project/assets/www" | head -1)
          TARGET_PLATFORM_WWW="$PROJECT_PATH/platforms/android/platform_www"
          mkdir -p "$TARGET_PLATFORM_WWW"
          cp -r "$ASSETS_WWW_PATH"/* "$TARGET_PLATFORM_WWW/"
          # 3.2 补strings.xml
          STRINGS_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "strings.xml" -path "*/templates/project/res/values/strings.xml" | head -1)
          TARGET_STRINGS_DIR="$PROJECT_PATH/platforms/android/app/src/main/res/values"
          mkdir -p "$TARGET_STRINGS_DIR"
          cp "$STRINGS_XML_PATH" "$TARGET_STRINGS_DIR/strings.xml"
          # 3.3 补AndroidManifest.xml
          MANIFEST_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "AndroidManifest.xml" -path "*/templates/project/AndroidManifest.xml" | head -1)
          TARGET_MANIFEST_DIR="$PROJECT_PATH/platforms/android/app/src/main"
          cp "$MANIFEST_XML_PATH" "$TARGET_MANIFEST_DIR/AndroidManifest.xml"
          
          # 4. 关键：在项目源码目录直接创建MainActivity.java（确保Gradle能找到）
          # 包名路径：com/my/simpleapp（与config.xml的id一致）
          ACTIVITY_DIR="$PROJECT_PATH/platforms/android/app/src/main/java/com/my/simpleapp"
          mkdir -p "$ACTIVITY_DIR"
          # 写入标准CordovaActivity子类代码
          cat > "$ACTIVITY_DIR/MainActivity.java" << EOF
package com.my.simpleapp;

import org.apache.cordova.CordovaActivity;
import android.os.Bundle;

public class MainActivity extends CordovaActivity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 加载config.xml中指定的index.html
        loadUrl(launchUrl);
    }
}
EOF
          echo "✅ 已在项目源码目录创建MainActivity.java：$ACTIVITY_DIR/MainActivity.java"
          # 验证文件内容
          cat "$ACTIVITY_DIR/MainActivity.java"
          
          # 5. 补全Cordova核心配置
          API_JS_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "Api.js" -path "*/cordova/Api.js" | head -1)
          DEFAULTS_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "defaults.xml" -path "*/cordova/defaults.xml" | head -1)
          CORDOVA_DIR="$PROJECT_PATH/platforms/android/cordova"
          mkdir -p "$CORDOVA_DIR"
          cp "$API_JS_PATH" "$CORDOVA_DIR/Api.js"
          cp "$DEFAULTS_XML_PATH" "$CORDOVA_DIR/defaults.xml"
          
          # 6. 强制配置Gradle（禁用AndroidX）
          ANDROID_APP_PATH="$PROJECT_PATH/platforms/android/app"
          echo "android.useAndroidX=false" > "$ANDROID_APP_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_APP_PATH/gradle.properties"
          echo "org.gradle.java.home=$JDK8_PATH" >> "$ANDROID_APP_PATH/gradle.properties"
          
          # 7. 编译APK（此时Activity文件在项目内，Gradle必能识别）
          echo "🔨 开始编译APK"
          cordova build android --release
          
          # 8. 检查APK
          APK_PATH="$ANDROID_APP_PATH/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "🎉 彻底成功！APK路径：$APK_PATH"
            cp "$APK_PATH" "/home/runner/work/webview-app/webview-app/final-app.apk"
          else
            echo "❌ 编译失败，日志："
            cat "$PROJECT_PATH/platforms/android/build/outputs/logs/build.log" 2>/dev/null
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 安卓套壳应用（最终成功版）
          path: /home/runner/work/webview-app/webview-app/final-app.apk
          retention-days: 30
