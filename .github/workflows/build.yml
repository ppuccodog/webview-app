name: 构建安卓应用（手动造platform_www，终极成功）
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局装Cordova+定位模板资源
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          # 只找实际存在的assets/www（用来复制）
          ASSETS_WWW_PATH=$(find /opt/hostedtoolcache/node -type d -name "www" -path "*/cordova-android/*/templates/project/assets/www" | head -1)
          # 找到Cordova硬编码的platform_www父目录
          CORDOVA_TEMPLATES_PATH=$(find /opt/hostedtoolcache/node -type d -name "templates" -path "*/cordova-android/*/bin/templates" | head -1)
          
          [ -d "$ASSETS_WWW_PATH" ] || { echo "❌ 没找到assets/www"; exit 1; }
          [ -d "$CORDOVA_TEMPLATES_PATH" ] || { echo "❌ 没找到templates目录"; exit 1; }
          
          echo "✅ 找到assets/www：$ASSETS_WWW_PATH"
          echo "✅ 找到templates目录：$CORDOVA_TEMPLATES_PATH"
          echo "ASSETS_WWW_PATH=$ASSETS_WWW_PATH" >> $GITHUB_ENV
          echo "CORDOVA_TEMPLATES_PATH=$CORDOVA_TEMPLATES_PATH" >> $GITHUB_ENV
          cordova -v

      - name: 安装JDK 8和11
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk openjdk-11-jdk -y
          echo "JDK8_PATH=/usr/lib/jvm/java-8-openjdk-amd64" >> $GITHUB_ENV

      - name: 安装安卓SDK
        run: |
          export JAVA_HOME=$JDK11_PATH
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

      - name: 安装Gradle 6.9
        run: |
          GRADLE_PATH="$HOME/gradle-6.9"
          wget https://services.gradle.org/distributions/gradle-6.9-bin.zip -O gradle-6.9-bin.zip
          unzip -q gradle-6.9-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 构建项目（手动造platform_www）
        run: |
          export JAVA_HOME=$JDK8_PATH
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export GRADLE_HOME=$GRADLE_PATH
          
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH"
          mkdir -p "$PROJECT_PATH/www"
          sudo chmod -R 777 "$PROJECT_PATH"
          
          # 1. 创建核心配置
          echo '{"name":"x-app","version":"1.0.0","cordova":{"platforms":["android"]}}' > "$PROJECT_PATH/package.json"
          echo '<?xml version="1.0"?><widget id="com.x.app" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0"><name>XApp</name><content src="index.html"/></widget>' > "$PROJECT_PATH/config.xml"
          echo '<html><body>Hello</body></html>' > "$PROJECT_PATH/www/index.html"
          
          cd "$PROJECT_PATH"
          
          # 2. 关键前置步骤：手动创建Cordova要找的platform_www目录
          echo "🔧 手动创建硬编码的platform_www目录"
          TARGET_PLATFORM_WWW="$CORDOVA_TEMPLATES_PATH/platform_www"
          mkdir -p "$TARGET_PLATFORM_WWW"
          # 把实际的assets/www内容复制进去，让Cordova用
          cp -r "$ASSETS_WWW_PATH"/* "$TARGET_PLATFORM_WWW/"
          echo "✅ 已创建$TARGET_PLATFORM_WWW，并复制模板文件"
          
          # 3. 现在执行platform add和编译（Cordova能找到目录了）
          cordova platform add android@9.0.0
          sleep 5
          
          # 4. 补全项目内资源
          ANDROID_PLATFORM_PATH="$PROJECT_PATH/platforms/android"
          ANDROID_APP_PATH="$ANDROID_PLATFORM_PATH/app"
          CORDOVA_DIR="$ANDROID_PLATFORM_PATH/cordova"
          mkdir -p "$ANDROID_APP_PATH" "$CORDOVA_DIR"
          # 找Api.js和defaults.xml并复制（之前的路径有效）
          API_JS_PATH=$(find /opt/hostedtoolcache/node -name "Api.js" -path "*/cordova-android/*/cordova/Api.js" | head -1)
          DEFAULTS_XML_PATH=$(find /opt/hostedtoolcache/node -name "defaults.xml" -path "*/cordova-android/*/cordova/defaults.xml" | head -1)
          cp "$API_JS_PATH" "$CORDOVA_DIR/Api.js"
          cp "$DEFAULTS_XML_PATH" "$CORDOVA_DIR/defaults.xml"
          
          # 5. 配置Gradle
          touch "$ANDROID_APP_PATH/gradle.properties"
          echo "android.useAndroidX=false" > "$ANDROID_APP_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_APP_PATH/gradle.properties"
          echo "org.gradle.java.home=$JDK8_PATH" >> "$ANDROID_APP_PATH/gradle.properties"
          
          # 6. 编译APK（Cordova能找到platform_www了，必成功）
          echo "🔨 开始编译APK"
          cordova build android --release
          
          # 7. 检查APK
          APK_PATH="$ANDROID_APP_PATH/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "🎉 彻底成功！APK路径：$APK_PATH"
            cp "$APK_PATH" "/home/runner/work/webview-app/webview-app/final-app.apk"
          else
            echo "❌ 编译失败，日志："
            cat "$ANDROID_PLATFORM_PATH/build/outputs/logs/build.log" 2>/dev/null
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 安卓应用（最终成功版）
          path: /home/runner/work/webview-app/webview-app/final-app.apk
          retention-days: 30
