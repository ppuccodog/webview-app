name: 安卓自定义APP自动构建（修复资源合并问题）
on:
  workflow_dispatch:  # 手动触发构建
permissions:
  contents: write     # 允许写入Releases

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：拉取代码+安装依赖
      ########################################################################
      - name: 拉取GitHub项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装依赖工具（增强版）
        run: |
          # 安装基础工具
          sudo apt-get update -y
          sudo apt-get install -y xmlstarlet imagemagick openjdk-11-jdk tree
          
          # 配置JDK环境
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

      ########################################################################
      # 步骤2：下载Android SDK+Gradle（构建环境）
      ########################################################################
      - name: 配置Android构建环境
        run: |
          export TIMEOUT=300
          # 1. 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 2. 下载SDK Tools（优先阿里云镜像）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          # 解压SDK Tools
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 3. 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" \
            "platforms;android-30" \
            "build-tools;30.0.2" \
            "platform-tools" \
            "extras;android;m2repository" \
            --verbose --no_https || exit 1

          # 4. 下载Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      ########################################################################
      # 步骤3：解析配置文件（带XML语法校验）
      ########################################################################
      - name: 解析配置文件
        run: |
          # 初始化默认配置
          APP_PACKAGE="com.my.defaultapp"
          APP_NAME="默认应用"
          APP_VERSION="1.0.0"
          LOAD_TIMEOUT="60000"

          if [ -f "config.xml" ]; then
            # 校验XML语法
            if ! xmlstarlet val -q config.xml; then
              echo "❌ config.xml语法错误，使用默认配置"
            else
              # 解析配置
              APP_PACKAGE=$(xmlstarlet sel -t -v "/widget/@id" config.xml)
              APP_NAME=$(xmlstarlet sel -t -v "/widget/name" config.xml)
              APP_VERSION=$(xmlstarlet sel -t -v "/widget/@version" config.xml)
              LOAD_TIMEOUT=$(xmlstarlet sel -t -v "/widget/platform[@name='android']/preference[@name='LoadUrlTimeoutValue']/@value" config.xml)
            fi
          else
            echo "⚠️ 未找到config.xml，使用默认配置"
          fi

          # 补全默认值
          APP_PACKAGE=${APP_PACKAGE:-"com.my.defaultapp"}
          APP_NAME=${APP_NAME:-"默认应用"}
          APP_VERSION=${APP_VERSION:-"1.0.0"}
          LOAD_TIMEOUT=${LOAD_TIMEOUT:-"60000"}

          # 解析网址
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt | tr -d '\r')
            if [[ ! $CUSTOM_URL =~ ^http ]]; then
              CUSTOM_URL="https://$CUSTOM_URL"
            fi
          else
            CUSTOM_URL="https://www.baidu.com"
          fi

          # 处理应用名称特殊字符
          APP_NAME_SAFE=$(echo "$APP_NAME" | sed 's/[^a-zA-Z0-9_-]/_/g')
          
          # 保存到环境变量
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_NAME_SAFE=$APP_NAME_SAFE" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "LOAD_TIMEOUT=$LOAD_TIMEOUT" >> $GITHUB_ENV
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV

      ########################################################################
      # 步骤4：处理应用图标（强化版资源校验）
      ########################################################################
      - name: 处理应用图标（解决资源合并问题）
        run: |
          # 1. 初始化路径+彻底清理旧资源
          RES_DIR="/home/runner/work/webview-app/webview-app/myapp/android-project/app/src/main/res"
          rm -rf "$RES_DIR/mipmap-"*"/ic_launcher"* 2>/dev/null || true
          rm -rf "$RES_DIR/drawable-"*"/"* 2>/dev/null || true
          mkdir -p "$RES_DIR/mipmap-mdpi" "$RES_DIR/mipmap-hdpi" "$RES_DIR/mipmap-xhdpi" "$RES_DIR/mipmap-xxhdpi" "$RES_DIR/mipmap-xxxhdpi"
          mkdir -p "$RES_DIR/values"
          
          # 2. 图标映射表（标准化命名）
          declare -A ICON_MAP=(
            ["icon/icon_mdpi.png"]="$RES_DIR/mipmap-mdpi/ic_launcher.png:48x48"
            ["icon/icon_hdpi.png"]="$RES_DIR/mipmap-hdpi/ic_launcher.png:72x72"
            ["icon/icon_xhdpi.png"]="$RES_DIR/mipmap-xhdpi/ic_launcher.png:96x96"
            ["icon/icon_xxhdpi.png"]="$RES_DIR/mipmap-xxhdpi/ic_launcher.png:144x144"
            ["icon/icon_xxxhdpi.png"]="$RES_DIR/mipmap-xxxhdpi/ic_launcher.png:192x192"
          )

          # 3. 处理图标（强化版）
          for USER_ICON in "${!ICON_MAP[@]}"; do
            DEST_INFO=${ICON_MAP[$USER_ICON]}
            DEST_PATH=${DEST_INFO%%:*}
            DEST_SIZE=${DEST_INFO#*:}
            
            # 严格清理文件名（只保留字母、数字、下划线和.png）
            DEST_FILENAME=$(basename "$DEST_PATH")
            CLEAN_FILENAME=$(echo "$DEST_FILENAME" | sed -E 's/[^a-zA-Z0-9_.]//g')
            DEST_PATH=$(dirname "$DEST_PATH")"/$CLEAN_FILENAME"
            
            # 生成/处理图标
            USER_ICON_COMPAT=$(echo "$USER_ICON" | sed 's/-/_/g')
            if [ -f "$USER_ICON_COMPAT" ]; then
              convert "$USER_ICON_COMPAT" -resize "$DEST_SIZE!" "$DEST_PATH"
              echo "✅ 处理自定义图标：$USER_ICON_COMPAT → $DEST_PATH"
            elif [ -f "$USER_ICON" ]; then
              convert "$USER_ICON" -resize "$DEST_SIZE!" "$DEST_PATH"
              echo "✅ 处理自定义图标：$USER_ICON → $DEST_PATH"
            else
              # 生成标准默认图标
              convert -size "$DEST_SIZE" xc:#2196F3 -fill white -font Arial -pointsize 16 -gravity center "label:APP" "$DEST_PATH"
              echo "⚠️ 生成默认图标 → $DEST_PATH"
            fi

            # 确保是PNG格式
            if [[ "$DEST_PATH" != *.png ]]; then
              mv "$DEST_PATH" "$DEST_PATH.png"
              DEST_PATH="$DEST_PATH.png"
            fi
          done

          # 4. 校验PNG文件有效性
          echo "🔍 校验PNG文件有效性"
          find "$RES_DIR" -type f -name "*.png" | while read -r PNG_FILE; do
            if ! identify "$PNG_FILE" >/dev/null 2>&1; then
              echo "❌ 修复无效PNG：$PNG_FILE"
              # 尝试修复损坏的PNG
              convert "$PNG_FILE" -strip "$PNG_FILE" || {
                echo "   无法修复，删除文件"
                rm -f "$PNG_FILE"
              }
            fi
          done

          # 5. 检查重复资源
          echo "🔍 检查重复资源文件"
          find "$RES_DIR" -type f -name "*.png" | awk -F'/' '{print $NF}' | sort | uniq -d | while read -r DUPLICATE; do
            echo "❌ 发现重复资源：$DUPLICATE"
            # 保留第一个，删除其余重复文件
            find "$RES_DIR" -type f -name "$DUPLICATE" | tail -n +2 | xargs rm -f
          done

          # 6. 输出资源目录结构（用于调试）
          echo "📁 资源目录结构："
          tree "$RES_DIR"

          echo "RES_DIR=$RES_DIR" >> $GITHUB_ENV

      ########################################################################
      # 步骤5：生成安卓项目代码
      ########################################################################
      - name: 生成安卓项目代码
        run: |
          # 初始化路径
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          JAVA_DIR="$APP_DIR/src/main/java/$(echo ${{ env.APP_PACKAGE }} | tr '.' '/')"
          RES_DIR="${{ env.RES_DIR }}"
          
          # 创建必要目录
          mkdir -p "$JAVA_DIR" "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova" "$APP_DIR/src/main/assets/www"

          # 1. 核心WebView代码（CordovaActivity.java）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }};

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  // 基础配置
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  // 允许HTTP/HTTPS混合内容
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }

                  // 模拟浏览器User-Agent
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");

                  // 处理链接跳转和证书错误
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }

                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略证书错误（调试用）
                      }

                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(CordovaActivity.this, "加载失败: " + description, Toast.LENGTH_LONG).show();
                      }
                  });

                  // 支持JS弹窗
                  webView.setWebChromeClient(new WebChromeClient());

                  // 加载目标网址
                  webView.loadUrl("${{ env.CUSTOM_URL }}");
                  setContentView(webView);
              }

              // 返回键后退功能
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }

              // 生命周期管理
              @Override
              protected void onPause() {
                  super.onPause();
                  webView.onPause();
              }

              @Override
              protected void onResume() {
                  super.onResume();
                  webView.onResume();
              }

              @Override
              protected void onDestroy() {
                  if (webView != null) {
                      webView.destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF

          # 2. 主活动代码（MainActivity.java）
          cat > "$JAVA_DIR/MainActivity.java" << EOF
          package ${{ env.APP_PACKAGE }};
          import org.apache.cordova.CordovaActivity;
          public class MainActivity extends CordovaActivity {}
          EOF

          # 3. AndroidManifest.xml（权限配置）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="${{ env.APP_PACKAGE }}">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <!-- 必要权限 -->
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              
              <application
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true"
                  android:icon="@mipmap/ic_launcher">
                  
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
                      android:launchMode="singleTask">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 4. 字符串资源（strings.xml）
          cat > "$RES_DIR/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">${{ env.APP_NAME }}</string>
          </resources>
          EOF

          # 5. 样式配置（styles.xml）
          cat > "$RES_DIR/values/styles.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
                  <item name="android:windowNoTitle">true</item>
                  <item name="android:windowActionBar">false</item>
              </style>
          </resources>
          EOF

          # 6. Gradle配置文件
          # 项目级build.gradle
          cat > "$ANDROID_ROOT/build.gradle" << 'EOF'
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          allprojects {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
          }
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          # 模块级settings.gradle
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          EOF

          # CordovaLib模块配置
          cat > "$CORDOVA_LIB_DIR/build.gradle" << 'EOF'
          apply plugin: 'com.android.library'
          android {
              compileSdk 30
              namespace 'org.apache.cordova'
              defaultConfig {
                  minSdkVersion 21
                  targetSdkVersion 30
              }
              lintOptions { abortOnError false }
          }
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # App模块配置
          cat > "$APP_DIR/build.gradle" << EOF
          apply plugin: 'com.android.application'
          android {
              compileSdk 30
              namespace '${{ env.APP_PACKAGE }}'
              defaultConfig {
                  applicationId "${{ env.APP_PACKAGE }}"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "${{ env.APP_VERSION }}"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      signingConfig signingConfigs.debug
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
              lintOptions { 
                  abortOnError false 
                  checkReleaseBuilds false
              }
              // 增加资源处理配置
              aaptOptions {
                  cruncherEnabled = false
                  useNewCruncher = false
              }
          }
          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 生成Gradle wrapper文件
          mkdir -p "$ANDROID_ROOT/gradle/wrapper"
          cat > "$ANDROID_ROOT/gradle/wrapper/gradle-wrapper.properties" << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https://services.gradle.org/distributions/gradle-7.0.2-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # 生成gradlew执行文件
          cat > "$ANDROID_ROOT/gradlew" << 'EOF'
          #!/usr/bin/env sh
          GRADLE_HOME="$(cd "$(dirname "$0")" && pwd)/gradle/wrapper/dists/gradle-7.0.2-bin/38n860s67z6j367w9081p5n5m/gradle-7.0.2"
          if [ ! -d "$GRADLE_HOME" ]; then
              echo "Downloading Gradle 7.0.2..."
              mkdir -p "$(dirname "$GRADLE_HOME")"
              wget -q https://services.gradle.org/distributions/gradle-7.0.2-bin.zip -O "$GRADLE_HOME.zip"
              unzip -q "$GRADLE_HOME.zip" -d "$(dirname "$GRADLE_HOME")"
              rm "$GRADLE_HOME.zip"
          fi
          export GRADLE_HOME
          exec "$GRADLE_HOME/bin/gradle" "$@"
          EOF
          chmod +x "$ANDROID_ROOT/gradlew"

      ########################################################################
      # 步骤6：编译APK并发布（带详细日志）
      ########################################################################
      - name: 编译APK（带详细日志）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          cd /home/runner/work/webview-app/webview-app/myapp/android-project || exit 1
          
          # 确认构建环境
          echo "Java版本: $(java -version 2>&1 | head -n 1)"
          echo "Gradle版本: $(./gradlew --version | grep Gradle | awk '{print $2}')"
          echo "Android SDK路径: $ANDROID_HOME"
          
          # 执行编译（带详细日志）
          echo "开始编译APK..."
          ./gradlew clean :app:assembleRelease --stacktrace --debug || {
            echo "❌ 编译失败，资源目录结构："
            tree "$RES_DIR"
            echo "❌ 构建输出目录结构："
            tree "$APP_DIR/build/outputs"
            exit 1
          }

          # 查找APK文件
          echo "查找生成的APK文件..."
          APK_SOURCE=$(find "$(pwd)/app/build/outputs/apk/release" -name "*.apk" | head -n 1)
          
          if [ -z "$APK_SOURCE" ]; then
            echo "❌ 未找到APK文件，构建输出目录："
            tree "$APP_DIR/build/outputs"
            exit 1
          fi
          
          # 复制APK到工作目录
          APK_DEST="/home/runner/work/webview-app/webview-app/${{ env.APP_NAME_SAFE }}-v${{ env.APP_VERSION }}.apk"
          cp "$APK_SOURCE" "$APK_DEST"
          
          echo "✅ APK生成成功：$APK_DEST"
          echo "APK_PATH=$APK_DEST" >> $GITHUB_ENV

      - name: 验证APK文件
        run: |
          if [ ! -f "${{ env.APK_PATH }}" ]; then
            echo "❌ APK文件不存在"
            exit 1
          else
            echo "✅ APK信息："
            echo "文件名: $(basename ${{ env.APK_PATH }})"
            echo "大小: $(du -h ${{ env.APK_PATH }})"
            echo "MD5: $(md5sum ${{ env.APK_PATH }} | awk '{print $1}')"
          fi

      - name: 发布APK到Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.APP_VERSION }}"
          name: "${{ env.APP_NAME }} v${{ env.APP_VERSION }}"
          body: |
            ### 构建信息
            - 应用名称: ${{ env.APP_NAME }}
            - 版本: ${{ env.APP_VERSION }}
            - 包名: ${{ env.APP_PACKAGE }}
            - 目标网址: ${{ env.CUSTOM_URL }}
            - 构建时间: ${{ github.run_at }}
          files: ${{ env.APK_PATH }}
          draft: false
          prerelease: false
    
