name: 构建安卓应用（手动创建目录+强制同步版）
on:
  workflow_dispatch:

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 安装Cordova环境
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          cordova -v
          node -v
          npm -v

      - name: 安装安卓构建工具链
        run: |
          # 安装JDK8
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk
          JDK8_PATH="/usr/lib/jvm/java-8-openjdk-amd64"
          echo "JDK8_PATH=$JDK8_PATH" >> $GITHUB_ENV

          # 安装安卓SDK（API 29）
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 安装Gradle 6.5（与cordova-android@9.0.0兼容）
          GRADLE_PATH="$HOME/gradle-6.5"
          wget https://services.gradle.org/distributions/gradle-6.5-bin.zip -O gradle-6.5-bin.zip
          unzip -q gradle-6.5-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 手动创建目录+编译APK（终极解决方案）
        run: |
          # 加载环境变量
          export JAVA_HOME=$JDK8_PATH
          export PATH="$JAVA_HOME/bin:$PATH:$ANDROID_SDK_PATH/build-tools/29.0.3:$GRADLE_PATH/bin"
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export ANDROID_HOME=$ANDROID_SDK_PATH

          # 1. 项目基础配置（完全手动，不依赖Cordova自动生成）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH"  # 彻底清理
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH" || exit 1

          # 2. 手动创建Cordova核心目录结构（解决命令生成失败问题）
          mkdir -p platforms/android/{app,CordovaLib,gradle/wrapper}
          mkdir -p www
          echo '<html><body>Hello</body></html>' > www/index.html

          # 3. 手动复制CordovaLib核心代码（从全局安装目录获取，确保文件存在）
          # 定位全局cordova-android模板目录
          GLOBAL_CORDOVA_ANDROID=$(npm root -g)/cordova-android
          if [ ! -d "$GLOBAL_CORDOVA_ANDROID" ]; then
            echo "❌ 全局cordova-android目录不存在: $GLOBAL_CORDOVA_ANDROID"
            exit 1
          fi
          # 复制CordovaLib代码到项目目录
          cp -r "$GLOBAL_CORDOVA_ANDROID/CordovaLib/src" platforms/android/CordovaLib/
          cp -r "$GLOBAL_CORDOVA_ANDROID/CordovaLib/res" platforms/android/CordovaLib/
          echo "✅ 从全局目录复制CordovaLib代码完成"

          # 4. 手动编写关键配置文件（避免Cordova命令生成错误）
          # package.json
          cat > package.json << EOF
          {
            "name": "x-app",
            "version": "1.0.0",
            "dependencies": {
              "cordova-android": "9.0.0"
            },
            "cordova": {
              "platforms": ["android"]
            }
          }
          EOF

          # config.xml
          cat > config.xml << EOF
          <?xml version="1.0"?>
          <widget id="com.my.simpleapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
            <name>YJSCSDH</name>
            <content src="index.html"/>
            <platform name="android">
              <preference name="AndroidXEnabled" value="false"/>
              <preference name="GradlePluginKotlinEnabled" value="false"/>
            </platform>
          </widget>
          EOF

          # 5. 配置安卓平台目录（app模块+CordovaLib）
          ANDROID_PLATFORM_DIR="$PROJECT_PATH/platforms/android"
          APP_DIR="$ANDROID_PLATFORM_DIR/app"
          CORDOVA_LIB_DIR="$ANDROID_PLATFORM_DIR/CordovaLib"

          # 5.1 手动编写CordovaLib的build.gradle
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          apply plugin: 'com.android.library'

          android {
            compileSdkVersion 29
            buildToolsVersion '29.0.3'
            namespace 'org.apache.cordova'
            sourceSets {
              main {
                java { srcDirs = ["src/main/java"] }
                res { srcDirs = ["src/main/res"] }
              }
            }
          }

          dependencies {
            implementation fileTree(dir: 'libs', include: ['*.jar'])
            implementation 'androidx.legacy:legacy-support-v4:1.0.0'
          }
          EOF

          # 5.2 手动编写app模块的build.gradle
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
            repositories {
              mavenCentral()
              jcenter()
            }
            dependencies {
              classpath 'com.android.tools.build:gradle:4.1.3'
            }
          }

          apply plugin: 'com.android.application'

          android {
            compileSdkVersion 29
            buildToolsVersion '29.0.3'
            namespace 'com.my.simpleapp'
            sourceSets {
              main {
                java { srcDirs = ["src/main/java"] }
                assets { srcDirs = ["src/main/assets", "../../www"] }  # 关联www目录
                manifest { srcFile "src/main/AndroidManifest.xml" }
              }
            }
            defaultConfig {
              applicationId "com.my.simpleapp"
              minSdkVersion 21
              targetSdkVersion 29
              versionCode 1
              versionName "1.0.0"
            }
            buildTypes {
              release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
              }
            }
          }

          dependencies {
            implementation fileTree(dir: 'libs', include: ['*.jar'])
            implementation project(':CordovaLib')
          }
          EOF

          # 5.3 手动编写AndroidManifest.xml
          mkdir -p "$APP_DIR/src/main"
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.my.simpleapp" android:versionCode="1" android:versionName="1.0.0">
            <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="29"/>
            <application android:label="@string/app_name">
              <activity android:name=".MainActivity" android:label="@string/app_name" android:configChanges="orientation|keyboardHidden|keyboard|screenSize">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN"/>
                  <category android:name="android.intent.category.LAUNCHER"/>
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          # 5.4 手动编写MainActivity.java
          mkdir -p "$APP_DIR/src/main/java/com/my/simpleapp"
          cat > "$APP_DIR/src/main/java/com/my/simpleapp/MainActivity.java" << EOF
          package com.my.simpleapp;
          import org.apache.cordova.CordovaActivity;
          import android.os.Bundle;
          public class MainActivity extends CordovaActivity {
            @Override
            public void onCreate(Bundle savedInstanceState) {
              super.onCreate(savedInstanceState);
              loadUrl(launchUrl);
            }
          }
          EOF

          # 5.5 手动编写strings.xml
          mkdir -p "$APP_DIR/src/main/res/values"
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
            <string name="app_name">YJSCSDH</string>
          </resources>
          EOF

          # 6. 配置Gradle（禁用AndroidX+生成wrapper）
          # 6.1 根目录gradle.properties
          cat > "$ANDROID_PLATFORM_DIR/gradle.properties" << EOF
          android.useAndroidX=false
          android.enableJetifier=false
          org.gradle.java.home=$JDK8_PATH
          EOF

          # 6.2 生成gradlew（确保可执行）
          cd "$ANDROID_PLATFORM_DIR" || exit 1
          gradle wrapper --gradle-version 6.5 --distribution-type all
          chmod +x gradlew
          [ -f "gradlew" ] || { echo "❌ gradlew生成失败"; exit 1; }

          # 7. 编译APK（直接执行Gradle命令，不依赖Cordova）
          echo "🔨 开始编译Release版APK..."
          ./gradlew :app:assembleRelease --info

          # 8. 验证APK并复制
          APK_SOURCE="$APP_DIR/build/outputs/apk/release/app-release.apk"
          APK_DEST="$PROJECT_PATH/final-app.apk"
          if [ -f "$APK_SOURCE" ]; then
            echo "🎉 APK编译成功！路径：$APK_SOURCE"
            cp "$APK_SOURCE" "$APK_DEST"
          else
            echo "❌ APK编译失败，查看详细日志："
            cat "$APP_DIR/build/outputs/logs/build.log"
            exit 1
          fi

      - name: 上传APK工件
        uses: actions/upload-artifact@v4
        with:
          name: 安卓应用-Release版
          path: /home/runner/work/webview-app/webview-app/myapp/final-app.apk
          retention-days: 30
