name: 安卓自定义APP自动构建（支持config.xml+图标）
on:
  workflow_dispatch:  # 手动触发构建
permissions:
  contents: write     # 允许写入Releases

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：拉取代码+安装依赖
      ########################################################################
      - name: 拉取GitHub项目代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装依赖工具（XML解析+图片处理）
        run: |
          # 安装XML解析、图片处理工具和JDK
          sudo apt-get update -y
          sudo apt-get install -y xmlstarlet imagemagick openjdk-11-jdk
          
          # 配置JDK环境
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          ########################################################################
          # 步骤2：下载Android SDK+Gradle（构建环境）
          ########################################################################
          export TIMEOUT=300
          # 1. 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 2. 下载SDK Tools（优先阿里云镜像）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          # 解压SDK Tools
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 3. 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" \
            "platforms;android-30" \
            "build-tools;30.0.2" \
            "platform-tools" \
            "extras;android;m2repository" \
            --verbose --no_https || exit 1

          # 4. 下载Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      ########################################################################
      # 步骤3：解析配置文件（带XML语法校验）
      ########################################################################
      - name: 解析配置文件（config.xml + config.txt）
        run: |
          # -------------------------- 1. 校验并解析config.xml --------------------------
          echo "📝 校验并解析config.xml配置"
          # 初始化默认配置
          APP_PACKAGE="com.my.defaultapp"
          APP_NAME="默认应用"
          APP_VERSION="1.0.0"
          LOAD_TIMEOUT="60000"

          if [ -f "config.xml" ]; then
            # 校验XML语法
            if ! xmlstarlet val -q config.xml; then
              echo "❌ config.xml语法错误！请检查："
              echo "   - 标签属性内不能写注释（如id=\"xxx\" <!-- 注释 --> 是错误的）"
              echo "   - 确保所有标签正确闭合（如<platform>对应</platform>）"
              echo "   - 保存为UTF-8编码"
              echo "   ⚠️ 将使用默认配置继续构建"
            else
              # 语法正确，解析配置
              echo "✅ config.xml语法正确，开始解析"
              APP_PACKAGE=$(xmlstarlet sel -t -v "/widget/@id" config.xml)
              APP_NAME=$(xmlstarlet sel -t -v "/widget/name" config.xml)
              APP_VERSION=$(xmlstarlet sel -t -v "/widget/@version" config.xml)
              LOAD_TIMEOUT=$(xmlstarlet sel -t -v "/widget/platform[@name='android']/preference[@name='LoadUrlTimeoutValue']/@value" config.xml)
            fi
          else
            echo "⚠️ 未找到config.xml，使用默认配置"
          fi

          # 补全默认值（处理空值）
          APP_PACKAGE=${APP_PACKAGE:-"com.my.defaultapp"}
          APP_NAME=${APP_NAME:-"默认应用"}
          APP_VERSION=${APP_VERSION:-"1.0.0"}
          LOAD_TIMEOUT=${LOAD_TIMEOUT:-"60000"}

          # -------------------------- 2. 解析config.txt网址 --------------------------
          echo "🌐 解析目标网址"
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt | tr -d '\r')  # 移除Windows换行符
            if [[ ! $CUSTOM_URL =~ ^http ]]; then
              CUSTOM_URL="https://$CUSTOM_URL"
              echo "⚠️ 网址缺少http/https前缀，自动补全为：$CUSTOM_URL"
            fi
          else
            CUSTOM_URL="https://www.baidu.com"
            echo "⚠️ 未找到config.txt，使用默认网址：$CUSTOM_URL"
          fi

          # -------------------------- 3. 输出配置信息 --------------------------
          echo -e "\n✅ 最终配置："
          echo "   - 包名：$APP_PACKAGE"
          echo "   - 应用名称：$APP_NAME"
          echo "   - 版本：$APP_VERSION"
          echo "   - 加载超时：$LOAD_TIMEOUT ms"
          echo "   - 目标网址：$CUSTOM_URL"

          # 保存到环境变量
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "LOAD_TIMEOUT=$LOAD_TIMEOUT" >> $GITHUB_ENV
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV

      ########################################################################
      # 步骤4：处理应用图标（修复后缀错误+强校验）
      ########################################################################
      - name: 处理应用图标（规范命名+后缀校验）
        run: |
          # 1. 初始化路径+彻底清理旧图标（避免残留错误文件）
          RES_DIR="/home/runner/work/webview-app/webview-app/myapp/android-project/app/src/main/res"
          # 删除所有mipmap目录下的非规范图标（匹配ic_launcher_*_png这类错误格式）
          rm -rf "$RES_DIR/mipmap-"*"/ic_launcher"*"_png" 2>/dev/null || true
          rm -rf "$RES_DIR/mipmap-"*"/ic_launcher"*".png" 2>/dev/null || true
          # 重新创建干净的资源目录
          mkdir -p "$RES_DIR/mipmap-mdpi" "$RES_DIR/mipmap-hdpi" "$RES_DIR/mipmap-xhdpi" "$RES_DIR/mipmap-xxhdpi" "$RES_DIR/mipmap-xxxhdpi"
          mkdir -p "$RES_DIR/values"  # 用于存放strings.xml和styles.xml
          
          # 2. 图标映射表（明确指定正确后缀：.png）
          # 格式：用户图标路径 → 安卓目标路径（带正确后缀）:尺寸
          declare -A ICON_MAP=(
            ["icon/icon_mdpi.png"]="$RES_DIR/mipmap-mdpi/ic_launcher.png:48x48"
            ["icon/icon_hdpi.png"]="$RES_DIR/mipmap-hdpi/ic_launcher.png:72x72"
            ["icon/icon_xhdpi.png"]="$RES_DIR/mipmap-xhdpi/ic_launcher.png:96x96"
            ["icon/icon_xxhdpi.png"]="$RES_DIR/mipmap-xxhdpi/ic_launcher.png:144x144"
            ["icon/icon_xxxhdpi.png"]="$RES_DIR/mipmap-xxxhdpi/ic_launcher.png:192x192"
          )

          # 3. 处理图标（支持用户自定义+默认生成，强制校验后缀）
          for USER_ICON in "${!ICON_MAP[@]}"; do
            DEST_INFO=${ICON_MAP[$USER_ICON]}
            DEST_PATH=${DEST_INFO%%:*}
            DEST_SIZE=${DEST_INFO#*:}
            
            # 兼容用户可能用横杠命名的图标（自动将横杠→下划线）
            USER_ICON_COMPAT=$(echo "$USER_ICON" | sed 's/-/_/g')
            # 生成图标（确保输出路径后缀为.png）
            if [ -f "$USER_ICON_COMPAT" ]; then
              convert "$USER_ICON_COMPAT" -resize "$DEST_SIZE!" "$DEST_PATH"
              echo "✅ 处理自定义图标：$USER_ICON_COMPAT → $DEST_PATH"
            elif [ -f "$USER_ICON" ]; then
              convert "$USER_ICON" -resize "$DEST_SIZE!" "$DEST_PATH"
              echo "✅ 处理自定义图标：$USER_ICON → $DEST_PATH"
            else
              # 生成默认图标（蓝色背景+白色APP文字，强制.png后缀）
              convert -size "$DEST_SIZE" xc:#2196F3 -fill white -font Arial -pointsize 16 -gravity center "label:APP" "$DEST_PATH"
              echo "⚠️ 未找到$USER_ICON，生成默认图标 → $DEST_PATH"
            fi

            # 强制校验后缀：如果生成的文件没有.png后缀，手动添加
            if [[ ! "$DEST_PATH" =~ \.png$ ]]; then
              mv "$DEST_PATH" "${DEST_PATH}.png"
              DEST_PATH="${DEST_PATH}.png"
              echo "🔧 修复图标后缀：${DEST_PATH%.*} → $DEST_PATH"
            fi
          done

          # 4. 二次强校验：确保所有图标都是.png格式（删除非.png文件）
          echo -e "\n🔍 强校验图标文件格式"
          find "$RES_DIR/mipmap-"* -type f | while read -r ICON_FILE; do
            ICON_FILENAME=$(basename "$ICON_FILE")
            # 只保留.png后缀的文件，其他格式直接删除
            if [[ ! "$ICON_FILENAME" =~ \.png$ ]]; then
              rm -f "$ICON_FILE"
              echo "❌ 删除非法格式图标：$ICON_FILENAME（仅允许.png）"
            else
              # 同时校验文件名是否符合规范（仅a-z、0-9、_）
              if [[ ! "$ICON_FILENAME" =~ ^[a-z0-9_]+\.png$ ]]; then
                NEW_FILENAME=$(echo "$ICON_FILENAME" | sed 's/[^a-z0-9_]/_/g')
                NEW_PATH=$(dirname "$ICON_FILE")"/$NEW_FILENAME"
                mv "$ICON_FILE" "$NEW_PATH"
                echo "⚠️ 修复非法文件名：$ICON_FILENAME → $NEW_FILENAME"
              else
                echo "✅ 合法图标：$ICON_FILENAME"
              fi
            fi
          done

          echo "RES_DIR=$RES_DIR" >> $GITHUB_ENV

      ########################################################################
      # 步骤5：生成安卓项目代码
      ########################################################################
      - name: 生成安卓项目代码
        run: |
          # 初始化路径
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          JAVA_DIR="$APP_DIR/src/main/java/$(echo ${{ env.APP_PACKAGE }} | tr '.' '/')"
          RES_DIR="${{ env.RES_DIR }}"
          
          # 创建必要目录
          mkdir -p "$JAVA_DIR" "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova" "$APP_DIR/src/main/assets/www"

          # -------------------------- 1. 核心WebView代码（CordovaActivity.java） --------------------------
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;
              private static final int LOAD_TIMEOUT = ${{ env.LOAD_TIMEOUT }};

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();

                  // 基础配置（支持JS、缩放、混合内容）
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);

                  // 允许HTTP/HTTPS混合内容
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }

                  // 模拟浏览器User-Agent
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");

                  // 处理链接跳转和证书错误
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }

                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 忽略证书错误（调试用）
                      }

                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(CordovaActivity.this, "加载失败: " + description, Toast.LENGTH_LONG).show();
                      }
                  });

                  // 支持JS弹窗
                  webView.setWebChromeClient(new WebChromeClient());

                  // 加载目标网址
                  webView.loadUrl("${{ env.CUSTOM_URL }}");
                  setContentView(webView);
              }

              // 返回键后退功能
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }

              // 生命周期管理
              @Override
              protected void onPause() {
                  super.onPause();
                  webView.onPause();
              }

              @Override
              protected void onResume() {
                  super.onResume();
                  webView.onResume();
              }

              @Override
              protected void onDestroy() {
                  if (webView != null) {
                      webView.destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF
