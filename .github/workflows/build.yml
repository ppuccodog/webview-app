name: 构建安卓应用（彻底解决Node缓存+无报错版）
on:
  workflow_dispatch:

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取代码
      - name: 拉取代码
        uses: actions/checkout@v4

      # 步骤2：安装Node.js 14（移除npm缓存，避免锁文件错误）
      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14
          # 关键：删除cache: 'npm'配置，因项目初始化后才生成锁文件，提前缓存无意义

      # 步骤3：全局安装Cordova（直接安装，不依赖缓存）
      - name: 安装Cordova环境
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          # 验证安装
          cordova -v
          node -v
          npm -v

      # 步骤4：安装安卓构建工具链（JDK8+SDK+Gradle）
      - name: 安装安卓构建工具链
        run: |
          # 安装JDK8
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk
          JDK8_PATH="/usr/lib/jvm/java-8-openjdk-amd64"
          echo "JDK8_PATH=$JDK8_PATH" >> $GITHUB_ENV

          # 安装安卓SDK（API 29）
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 安装Gradle 6.5
          GRADLE_PATH="$HOME/gradle-6.5"
          wget https://services.gradle.org/distributions/gradle-6.5-bin.zip -O gradle-6.5-bin.zip
          unzip -q gradle-6.5-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      # 步骤5：初始化项目+编译APK（核心步骤，无冗余）
      - name: 初始化Cordova项目并编译APK
        run: |
          # 加载环境变量
          export JAVA_HOME=$JDK8_PATH
          export PATH="$JAVA_HOME/bin:$PATH:$ANDROID_SDK_PATH/build-tools/29.0.3:$GRADLE_PATH/bin"
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export ANDROID_HOME=$ANDROID_SDK_PATH

          # 项目路径（确保与仓库结构一致）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          # 彻底清理旧项目
          rm -rf "$PROJECT_PATH"
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"

          # 1. 官方命令创建Cordova项目（自动生成正确目录结构）
          cordova create . com.my.simpleapp YJSCSDH

          # 2. 强制清理并添加安卓平台（解决重复添加问题）
          cordova platform rm android --nosave || true
          rm -rf platforms/android node_modules/cordova-android
          npm install cordova-android@9.0.0 --save-exact
          cordova platform add android@9.0.0 --save

          # 3. 生成gradlew（解决文件不存在）
          cd platforms/android
          gradle wrapper --gradle-version 6.5
          chmod +x gradlew
          [ -f "gradlew" ] || { echo "❌ gradlew生成失败"; exit 1; }

          # 4. 禁用AndroidX（解决配置冲突）
          echo "android.useAndroidX=false" > gradle.properties
          echo "android.enableJetifier=false" >> gradle.properties

          # 5. 编译APK（指定app模块）
          echo "🔨 编译APK..."
          ./gradlew :app:assembleRelease --info

          # 6. 验证并复制APK
          APK_SOURCE="app/build/outputs/apk/release/app-release.apk"
          APK_DEST="../../final-app.apk"
          if [ -f "$APK_SOURCE" ]; then
            echo "🎉 APK编译成功！"
            cp "$APK_SOURCE" "$APK_DEST"
          else
            echo "❌ APK不存在，查看日志："
            cat build/outputs/logs/build.log
            exit 1
          fi

      # 步骤6：上传APK
      - name: 上传APK工件
        uses: actions/upload-artifact@v4
        with:
          name: 安卓应用-Release版
          path: /home/runner/work/webview-app/webview-app/myapp/final-app.apk
          retention-days: 30
