name: 构建安卓应用
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1：拉取仓库代码
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      # 步骤2：安装Node.js
      - name: 安装Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      # 步骤3：切换国内npm镜像+安装Cordova
      - name: 切换国内npm镜像并安装Cordova
        run: |
          npm config set registry https://registry.npmmirror.com/
          npm cache clean -f
          echo "第一次尝试安装Cordova..."
          npm install -g cordova@11.0.0
          cordova -v && echo "✅ Cordova安装成功" || echo "❌ 第一次安装失败，重试一次"
          
          if ! command -v cordova &> /dev/null; then
            echo "正在重试安装Cordova..."
            npm install -g cordova@11.0.0
            cordova -v && echo "✅ 重试后Cordova安装成功" || (echo "❌ 两次安装均失败" && exit 1)
          fi

      # 步骤4：安装安卓SDK
      - name: 安装安卓SDK
        uses: android-actions/setup-android@v3

      # 步骤5：创建项目+安装安卓平台（明确路径）
      - name: 创建项目并安装安卓平台
        run: |
          # 创建Cordova项目（myapp目录）
          cordova create myapp com.my.simpleapp "我的网页APP"
          
          # 进入myapp目录安装安卓平台（gradlew会生成在这里）
          cd myapp
          npm config set registry https://registry.npmmirror.com/
          echo "正在安装安卓平台..."
          cordova platform add android@10.1.2 --verbose
          
          # 确认myapp内的platforms文件夹是否存在（这次绝对正确）
          if [ -d "platforms/android" ]; then
            echo "✅ 安卓平台安装成功！路径：myapp/platforms/android"
          else
            echo "❌ 安卓平台安装失败"
            exit 1
          fi
          cd ..  # 回到根目录

      # 步骤6：创建目标文件夹（用myapp内的路径）
      - name: 创建文件复制所需的目标文件夹
        run: |
          mkdir -p myapp/platforms/android/app/src/main/assets/
          mkdir -p myapp/platforms/android/app/src/main/res/xml/
          mkdir -p myapp/platforms/android/app/src/main/assets/www/
          echo "✅ 所有目标文件夹创建完成"

      # 步骤7：复制文件（目标路径：myapp内的platforms）
      - name: 复制项目文件到安卓目录
        run: |
          cp -r www/* myapp/platforms/android/app/src/main/assets/www/
          cp config.xml myapp/platforms/android/app/src/main/res/xml/
          cp config.txt myapp/platforms/android/app/src/main/assets/www/
          echo "✅ 所有文件复制完成"

      # 步骤8：配置Gradle版本（进入myapp内的platforms）
      - name: 配置Gradle 7.5版本
        run: |
          cd myapp/platforms/android
          mkdir -p gradle/wrapper
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip" > gradle/wrapper/gradle-wrapper.properties
          echo "✅ Gradle版本配置完成"
          cd ../../..  # 回到根目录

      # 步骤9：编译APK（关键！进入myapp目录用Cordova命令编译，gradlew一定存在）
      - name: 编译生成APK（最终正确步骤）
        run: |
          # 进入myapp目录（gradlew在这里，Cordova命令也需要在这里执行）
          cd myapp
          echo "开始编译APK，首次编译可能需要10-15分钟..."
          # 用Cordova自带命令编译，自动调用gradlew，不会找不到文件
          cordova build android --release
          
          # 检查APK是否生成（路径：myapp/platforms/android/...）
          if [ -f "platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "✅ APK编译成功！终于搞定了！"
          else
            echo "❌ APK编译失败"
            exit 1
          fi

      # 步骤10：保存APK（路径正确）
      - name: 上传APK文件供下载
        uses: actions/upload-artifact@v4
        with:
          name: 我的安卓应用
          path: myapp/platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk
