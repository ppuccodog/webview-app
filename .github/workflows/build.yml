name: 安卓浏览器式套壳应用构建+自动发版（豆包2号）
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换阿里云Ubuntu镜像源（加速依赖下载）
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11（安卓构建必需）
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools（优先阿里云镜像）
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证+安装必要组件（API 30）
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH
      - name: 读取 config.txt 配置（网址/包名/应用名/版本号）
        run: |
          # 定义默认配置（防止 config.txt 缺失）
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取 config.txt（格式：键=值，每行一个配置）
          if [ -f "config.txt" ]; then
            echo "✅ 读取 config.txt 配置..."
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            echo "⚠️ 未找到 config.txt，使用默认配置..."
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 验证配置有效性
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            echo "⚠️ 包名格式无效，使用默认包名：$DEFAULT_APP_PACKAGE"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            echo "⚠️ 版本号必须为整数，使用默认值：$DEFAULT_APP_VERSION_CODE"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 写入环境变量（供后续步骤使用）
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV
          echo "PROJECT_PATH=/home/runner/work/webview-app/webview-app/myapp" >> $GITHUB_ENV
          echo "ANDROID_ROOT=/home/runner/work/webview-app/webview-app/myapp/android-project" >> $GITHUB_ENV

          # 打印最终配置（便于调试）
          echo -e "\n📋 最终构建配置："
          echo "目标网址：$CUSTOM_URL"
          echo "应用包名：$APP_PACKAGE"
          echo "应用名称：$APP_NAME"
          echo "版本名称：$APP_VERSION_NAME"
          echo "版本号（整数）：$APP_VERSION_CODE"

      - name: 构建安卓套壳应用（集成多分辨率图标）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取环境变量配置
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"
          ANDROID_ROOT="${{ env.ANDROID_ROOT }}"
          
          # 动态创建项目目录结构
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"  # 按包名生成Java目录
          APP_LAYOUT_DIR="$APP_DIR/src/main/res/layout"  # 布局文件目录
          APP_DRAWABLE_DIR="$APP_DIR/src/main/res/drawable"  # 图片资源目录
          
          # 清理旧项目残留并创建新目录
          rm -rf "${{ env.PROJECT_PATH }}"
          mkdir -p "$APP_JAVA_DIR"
          mkdir -p "$APP_LAYOUT_DIR"
          mkdir -p "$APP_DRAWABLE_DIR"
          mkdir -p "$APP_DIR/src/main/res/values"  # 字符串/样式资源目录
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"  # CordovaLib工具类目录

          # 1. 创建多分辨率图标目录并处理图标文件
          mkdir -p "$APP_DIR/src/main/res/mipmap-mdpi"
          mkdir -p "$APP_DIR/src/main/res/mipmap-hdpi"
          mkdir -p "$APP_DIR/src/main/res/mipmap-xhdpi"
          mkdir -p "$APP_DIR/src/main/res/mipmap-xxhdpi"
          
          # 图标路径映射（用户图标→安卓标准目录）
          declare -A icon_mappings=(
              ["icon/48.png"]="mipmap-mdpi/ic_launcher.png"
              ["icon/72.png"]="mipmap-hdpi/ic_launcher.png"
              ["icon/96.png"]="mipmap-xhdpi/ic_launcher.png"
              ["icon/144.png"]="mipmap-xxhdpi/ic_launcher.png"
          )
          
          # 复制用户图标（缺失时生成默认图标）
          missing_icons=0
          for src in "${!icon_mappings[@]}"; do
              dest="$APP_DIR/src/main/res/${icon_mappings[$src]}"
              if [ -f "$src" ]; then
                  cp "$src" "$dest"
                  echo "✅ 已复制图标: $src -> $dest"
              else
                  echo "⚠️ 未找到图标文件: $src，将使用默认图标"
                  missing_icons=1
              fi
          done
          # 生成默认图标（蓝色圆形XML图标，适配所有分辨率）
          if [ $missing_icons -eq 1 ]; then
            echo "⚠️ 生成默认图标..."
            for src in "${!icon_mappings[@]}"; do
                dest="$APP_DIR/src/main/res/${icon_mappings[$src]}"
                cat > "$dest" << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="oval">
              <solid android:color="#2196F3"/>
          </shape>
          EOF
            done
          fi

          # 2. 生成主布局文件（WebView+加载动画）
          cat > "$APP_LAYOUT_DIR/activity_main.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent">

              <!-- WebView核心：加载目标网址 -->
              <WebView
                  android:id="@+id/webview"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"/>

              <!-- 加载动画容器（渐变背景+居中显示） -->
              <LinearLayout
                  android:id="@+id/loading_layout"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:gravity="center"
                  android:orientation="vertical"
                  android:background="@drawable/loading_bg_gradient">

                  <!-- 自定义圆形旋转进度条 -->
                  <ProgressBar
                      android:id="@+id/loading_progress"
                      android:layout_width="60dp"
                      android:layout_height="60dp"
                      android:indeterminate="true"
                      android:indeterminateDrawable="@drawable/loading_circle" />

                  <!-- 加载提示文字 -->
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:layout_marginTop="20dp"
                      android:text="加载中..."
                      android:textSize="18sp"
                      android:textColor="#333333"
                      android:textStyle="bold" />

              </LinearLayout>
          </RelativeLayout>
          EOF

          # 3. 生成加载动画渐变背景
          cat > "$APP_DRAWABLE_DIR/loading_bg_gradient.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <shape xmlns:android="http://schemas.android.com/apk/res/android"
              android:shape="rectangle">
              <gradient
                  android:angle="90"
                  android:centerColor="#F8F8F8"
                  android:endColor="#FFFFFF"
                  android:startColor="#F0F0F0"
                  android:type="linear" />
          </shape>
          EOF

          # 4. 生成自定义圆形加载动画
          cat > "$APP_DRAWABLE_DIR/loading_circle.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <animated-rotate xmlns:android="http://schemas.android.com/apk/res/android"
              android:duration="1200"
              android:fromDegrees="0"
              android:pivotX="50%"
              android:pivotY="50%"
              android:toDegrees="360">

              <shape
                  android:innerRadius="20dp"
                  android:shape="ring"
                  android:thickness="6dp"
                  android:useLevel="false">

                  <gradient
                      android:centerColor="#40C4FF"
                      android:endColor="#00BFA5"
                      android:startColor="#2196F3"
                      android:type="sweep" />
              </shape>
          </animated-rotate>
          EOF

          # 5. 生成字符串资源文件（应用名称+主题）
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">$APP_NAME</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # 6. 生成CordovaLib模块：WebView工具类（封装核心逻辑）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/WebViewHelper.java" << EOF
          package org.apache.cordova;
          import android.content.Context;
          import android.os.Handler;
          import android.view.View;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.LinearLayout;
          import android.widget.Toast;

          public class WebViewHelper {
              private WebView webView;
              private LinearLayout loadingLayout;
              private Context context;
              private static final int LOAD_TIMEOUT = 80000;  // 加载超时时间（80秒）

              public WebViewHelper(Context context, WebView webView, LinearLayout loadingLayout) {
                  this.context = context;
                  this.webView = webView;
                  this.loadingLayout = loadingLayout;
                  initWebViewSettings();  // 初始化WebView配置
              }

              // 初始化WebView基础设置
              private void initWebViewSettings() {
                  WebSettings webSettings = webView.getSettings();
                  webSettings.setJavaScriptEnabled(true);  // 启用JavaScript
                  webSettings.setDomStorageEnabled(true);  // 启用DOM存储
                  webSettings.setAllowFileAccess(true);  // 允许访问文件
                  webSettings.setAllowContentAccess(true);  // 允许内容访问
                  
                  // 适配Android 5.0+混合内容（HTTP+HTTPS）
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  // 缩放配置（支持缩放但隐藏缩放控件）
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);  // 自适应屏幕
                  webSettings.setUseWideViewPort(true);  // 启用宽视图端口
                  
                  // 自定义UserAgent（模拟Chrome浏览器）
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
              }

              // 设置WebViewClient（处理页面加载状态、URL跳转、SSL错误）
              public void setWebViewClient() {
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public void onPageStarted(WebView view, String url, android.graphics.Bitmap favicon) {
                          super.onPageStarted(view, url, favicon);
                          // 页面开始加载时显示加载动画
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.GONE) {
                              loadingLayout.setVisibility(View.VISIBLE);
                          }
                      }
                      
                      @Override
                      public void onPageFinished(WebView view, String url) {
                          super.onPageFinished(view, url);
                          // 页面加载完成后隐藏加载动画
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                      
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          // 拦截URL跳转，在当前WebView中打开
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          // 忽略SSL证书错误（仅用于测试，生产环境需谨慎）
                          handler.proceed();
                      }
                      
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          // 资源加载错误时提示用户
                          Toast.makeText(context, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                          if (loadingLayout != null && loadingLayout.getVisibility() == View.VISIBLE) {
                              loadingLayout.setVisibility(View.GONE);
                          }
                      }
                  });
                  
                  // 设置WebChromeClient（处理网页标题、进度等）
                  webView.setWebChromeClient(new WebChromeClient());
              }

              // 加载目标URL（含超时处理）
              public void loadUrl(String url) {
                  webView.loadUrl(url);
                  // 超时处理：超过80秒未加载完成则关闭页面
                  new Handler().postDelayed(() -> {
                      if (webView.getProgress() < 100) {
                          Toast.makeText(context, "加载超时，即将关闭", Toast.LENGTH_SHORT).show();
                          ((android.app.Activity) context).finish();
                      }
                  }, LOAD_TIMEOUT);
              }

              // 获取WebView实例（供外部调用）
              public WebView getWebView() {
                  return webView;
              }
          }
          EOF

          # 7. 生成主Activity（应用入口）
          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
          package $APP_PACKAGE;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.WebView;
          import android.widget.LinearLayout;
          import org.apache.cordova.WebViewHelper;
          import $APP_PACKAGE.R;

          public class MainActivity extends Activity {
              private WebViewHelper webViewHelper;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_main);  // 加载主布局
                  
                  // 初始化控件
                  WebView webView = findViewById(R.id.webview);
                  LinearLayout loadingLayout = findViewById(R.id.loading_layout);
                  
                  // 初始化WebViewHelper并加载目标URL
                  webViewHelper = new WebViewHelper(this, webView, loadingLayout);
                  webViewHelper.setWebViewClient();
                  webViewHelper.loadUrl("$CUSTOM_URL");
              }
              
              // 重写返回键：优先返回上一页，无历史则退出
              @Override
              public void onBackPressed() {
                  if (webViewHelper != null && webViewHelper.getWebView().canGoBack()) {
                      webViewHelper.getWebView().goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
              
              // 生命周期管理：暂停WebView
              @Override
              protected void onPause() {
                  super.onPause();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onPause();
                  }
              }
              
              // 生命周期管理：恢复WebView
              @Override
              protected void onResume() {
                  super.onResume();
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().onResume();
                  }
              }
              
              // 生命周期管理：销毁WebView（防止内存泄漏）
              @Override
              protected void onDestroy() {
                  if (webViewHelper != null) {
                      webViewHelper.getWebView().destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF
          # 8. 生成AndroidManifest.xml（修复原语法错误，规范属性格式）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="$APP_PACKAGE">

              <!-- 应用所需权限 -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />

              <!-- 应用配置（修复图标属性语法，确保属性间空格分隔） -->
              <application
                  android:name="android.app.Application"
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true">

                  <!-- 主Activity配置（设置为启动页） -->
                  <activity
                      android:name="$APP_PACKAGE.MainActivity"
                      android:exported="true"
                      android:launchMode="singleTask"
                      android:configChanges="orientation|keyboardHidden|screenSize">

                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <!-- 配置WebView优化参数 -->
                  <activity
                      android:name="org.apache.cordova.engine.SystemWebViewActivity"
                      android:configChanges="orientation|keyboardHidden|screenSize"
                      android:exported="false" />

                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="$APP_PACKAGE.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>
              </application>

          </manifest>
          EOF

          # 9. 生成CordovaLib模块的build.gradle
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  mavenCentral()
                  google()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:4.2.2'
              }
          }

          apply plugin: 'com.android.library'

          android {
              compileSdkVersion 30
              buildToolsVersion "30.0.2"

              defaultConfig {
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "1.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }

              lintOptions {
                  abortOnError false
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.3.1'
              implementation 'androidx.legacy:legacy-support-v4:1.0.0'
          }
          EOF

          # 10. 生成App模块的build.gradle
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  mavenCentral()
                  google()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:4.2.2'
              }
          }

          apply plugin: 'com.android.application'

          android {
              compileSdkVersion 30
              buildToolsVersion "30.0.2"

              defaultConfig {
                  applicationId "$APP_PACKAGE"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode $APP_VERSION_CODE
                  versionName "$APP_VERSION_NAME"
                  multiDexEnabled true
              }

              buildTypes {
                  release {
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.debug  // 测试环境使用debug签名，生产环境需替换为正式签名
                  }
              }

              lintOptions {
                  abortOnError false
                  checkReleaseBuilds false
              }

              packagingOptions {
                  exclude 'META-INF/LICENSE'
                  exclude 'META-INF/LICENSE.txt'
                  exclude 'META-INF/NOTICE'
                  exclude 'META-INF/NOTICE.txt'
              }
          }

          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.3.1'
              implementation 'androidx.multidex:multidex:2.0.1'
              implementation 'androidx.core:core:1.6.0'
          }
          EOF

          # 11. 生成项目根目录settings.gradle
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          rootProject.name = '$APP_NAME'
          EOF

          # 12. 生成项目根目录build.gradle
          cat > "$ANDROID_ROOT/build.gradle" << EOF
          buildscript {
              repositories {
                  mavenCentral()
                  google()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:4.2.2'
              }
          }

          allprojects {
              repositories {
                  mavenCentral()
                  google()
              }
          }

          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          # 13. 生成混淆规则文件（保护资源引用不被混淆）
          cat > "$APP_DIR/proguard-rules.pro" << EOF
          # 基础混淆配置
          -optimizationpasses 5
          -dontusemixedcaseclassnames
          -dontskipnonpubliclibraryclasses
          -dontpreverify
          -verbose
          -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*

          # 保护Android基础组件
          -keep public class * extends android.app.Activity
          -keep public class * extends android.app.Application
          -keep public class * extends android.app.Service
          -keep public class * extends android.content.BroadcastReceiver
          -keep public class * extends android.content.ContentProvider
          -keep public class * extends android.app.backup.BackupAgentHelper
          -keep public class * extends android.preference.Preference

          # 保护WebView相关类
          -keep public class * extends android.webkit.WebView
          -keep public class * extends android.webkit.WebViewClient
          -keep public class * extends android.webkit.WebChromeClient
          -keep class org.apache.cordova.** { *; }

          # 保护资源引用（防止图标/布局引用被混淆）
          -keep class $APP_PACKAGE.R$drawable { *; }
          -keep class $APP_PACKAGE.R$layout { *; }
          -keep class $APP_PACKAGE.R$mipmap { *; }
          -keep class $APP_PACKAGE.R$string { *; }
          -keep class $APP_PACKAGE.R$style { *; }

          # 保护Activity生命周期方法
          -keepclassmembers public class * extends android.app.Activity {
              public void *(android.view.View);
              public void onBackPressed();
              public void onCreate(android.os.Bundle);
              public void onPause();
              public void onResume();
              public void onDestroy();
          }
          EOF

          # 14. 执行编译（生成Release版APK）
          echo "🔨 开始编译安卓应用..."
          cd "$ANDROID_ROOT"
          chmod +x gradlew
          ./gradlew clean :app:assembleRelease --stacktrace

          # 验证APK是否生成成功
          APK_PATH="$APP_DIR/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
              echo "✅ APK编译成功！路径：$APK_PATH"
              # 重命名APK（含版本信息，便于识别）
              APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v$APP_VERSION_NAME.apk"
              cp "$APK_PATH" "$APK_DEST"
              echo "✅ APK重命名完成：$APK_DEST"
              echo "APK_PATH=$APK_DEST" >> $GITHUB_ENV
          else
              echo "❌ APK编译失败！未找到输出文件"
              exit 1
          fi

          # 15. 打包安卓源码（排除编译产物，仅保留纯净源码）
          echo "📦 开始打包安卓源码..."
          SOURCE_ZIP_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-source-v$APP_VERSION_NAME.zip"
          # 排除build、.gradle等临时目录，仅保留核心源码文件
          zip -q -r "$SOURCE_ZIP_DEST" "$ANDROID_ROOT" \
              -x "*/build/*" "*/.gradle/*" "*/gradle/*" "*/.idea/*" "*/.gitignore" "*/local.properties"
          
          if [ -f "$SOURCE_ZIP_DEST" ]; then
              echo "✅ 源码打包成功！路径：$SOURCE_ZIP_DEST"
              echo "SOURCE_ZIP_PATH=$SOURCE_ZIP_DEST" >> $GITHUB_ENV
          else
              echo "❌ 源码打包失败！"
              exit 1
          fi

      - name: 发布到GitHub Releases
        run: |
          # 准备发布参数
          RELEASE_TAG="v${{ env.APP_VERSION_NAME }}"
          RELEASE_TITLE="Custom Browser v${{ env.APP_VERSION_NAME }}"
          RELEASE_BODY=$(cat << EOF
          ## 自定义浏览器应用 v${{ env.APP_VERSION_NAME }}
          
          ### 构建信息
          - 目标网址：${{ env.CUSTOM_URL }}
          - 应用包名：${{ env.APP_PACKAGE }}
          - 支持系统：Android 5.0+（API 21+）
          - 构建时间：$(date +"%Y-%m-%d %H:%M:%S")
          
          ### 包含文件
          1. APK安装包：直接安装到安卓设备
          2. 源码压缩包：可二次开发（含完整项目结构）
          
          ### 功能说明
          - 加载指定网址（支持JavaScript、DOM存储）
          - 自定义加载动画（渐变背景+圆形进度条）
          - 多分辨率图标适配（支持用户自定义图标）
          - 返回键导航（优先返回上一页，无历史则退出）
          - 加载超时处理（80秒超时自动关闭）
          EOF
          )

          # 创建Git Tag并推送
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "$RELEASE_TAG" -m "$RELEASE_TITLE"
          git push origin "$RELEASE_TAG"

          # 安装GitHub CLI工具（用于创建Release）
          sudo apt-get install -y gh

          # 登录GitHub CLI（使用Actions密钥）
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # 创建Release并上传文件
          gh release create "$RELEASE_TAG" \
              --title "$RELEASE_TITLE" \
              --body "$RELEASE_BODY" \
              --draft=false \
              --prerelease=false \
              "${{ env.APK_PATH }}" \
              "${{ env.SOURCE_ZIP_PATH }}"

          echo "✅ 发布成功！可访问：https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"

      - name: 清理构建产物（可选，节省存储空间）
        run: |
          echo "🧹 开始清理构建产物..."
          rm -rf "${{ env.ANDROID_ROOT }}"
          rm -rf "${{ env.PROJECT_PATH }}"
          rm -rf "${{ env.GRADLE_PATH }}"
          rm -rf "${{ env.ANDROID_HOME }}"
          echo "✅ 清理完成！"
