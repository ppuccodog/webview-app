name: 构建安卓应用
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局安装所有依赖
        run: |
          npm config set registry https://registry.npmjs.org/
          npm install -g cordova@10.0.0
          npm install -g properties-parser@0.6.0 string.prototype.codepointat@1.0.1
          cordova -v

      - name: 安装JDK 8（Cordova必须）
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      - name: 手动安装安卓SDK（确保sdkmanager可用）
        run: |
          # 1. 创建SDK目录并下载工具
          mkdir -p $HOME/android-sdk
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $HOME/android-sdk
          
          # 2. 手动创建正确的目录结构（sdkmanager必须的路径）
          mkdir -p $HOME/android-sdk/cmdline-tools/latest
          mv $HOME/android-sdk/cmdline-tools/* $HOME/android-sdk/cmdline-tools/latest/
          
          # 3. 手动添加环境变量并立即生效
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
          export PATH=$ANDROID_SDK_ROOT/platform-tools:$PATH
          
          # 4. 验证sdkmanager是否存在（关键步骤）
          if [ -f "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "✅ sdkmanager找到！路径：$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          else
            echo "❌ sdkmanager未找到，列出目录内容："
            ls -R $HOME/android-sdk
            exit 1
          fi
          
          # 5. 接受许可证+安装必要包（用绝对路径执行，避免环境变量问题）
          echo "y" | SKIP_JDK_VERSION_CHECK=1 $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          SKIP_JDK_VERSION_CHECK=1 $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          
          # 6. 保存环境变量到全局（供后续步骤使用）
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: 安装Gradle 7.0（兼容JDK 8）
        run: |
          wget https://services.gradle.org/distributions/gradle-7.0-bin.zip -O gradle-7.0-bin.zip
          unzip -q gradle-7.0-bin.zip
          echo "GRADLE_HOME=$(pwd)/gradle-7.0" >> $GITHUB_ENV
          echo "$(pwd)/gradle-7.0/bin" >> $GITHUB_PATH
          gradle --version

      - name: 创建项目+添加平台
        run: |
          cordova create myapp com.my.simpleapp "我的网页APP"
          cd myapp
          # 用绝对路径指定SDK，确保不迷路
          ANDROID_SDK_ROOT=$HOME/android-sdk cordova platform add android@9.0.0
          # 重写config.xml（无插件）
          echo '<?xml version="1.0" encoding="utf-8"?>
          <widget id="com.my.simpleapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
            <name>我的网页APP</name>
            <content src="index.html" />
            <access origin="*" />
          </widget>' > config.xml
          cd ..

      - name: 复制网页文件
        run: |
          cp -rf www/* myapp/www/
          cp config.txt myapp/www/

      - name: 编译APK（绝对路径兜底）
        run: |
          cd myapp
          echo "🔥 绝对路径执行，确保工具都能找到！"
          # 所有路径都用绝对路径，彻底避免环境变量问题
          ANDROID_SDK_ROOT=$HOME/android-sdk GRADLE_HOME=$(pwd)/../gradle-7.0 cordova build android --release
          
          if [ -f "platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "🎉 终于成功了！APK生成了！"
          else
            echo "❌ 查看日志"
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 我的安卓应用
          path: myapp/platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk
          retention-days: 30
