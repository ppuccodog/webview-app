name: 构建安卓应用（固定JDK8路径，终极成功）
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14
        uses: actions/setup-node@v4
        with:
          node-version: 14

      - name: 全局装Cordova+定位核心资源
        run: |
          npm config set registry https://registry.npmjs.org/
          npm cache clean --force
          npm install -g cordova@10.0.0 cordova-android@9.0.0
          # 定位核心目录和文件
          CORDOVA_ANDROID_ROOT=$(find /opt/hostedtoolcache/node -type d -name "cordova-android" -path "*/node_modules/cordova-android" | head -1)
          ASSETS_WWW_PATH=$(find "$CORDOVA_ANDROID_ROOT" -type d -name "www" -path "*/templates/project/assets/www" | head -1)
          STRINGS_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "strings.xml" -path "*/templates/project/res/values/strings.xml" | head -1)
          MANIFEST_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "AndroidManifest.xml" -path "*/templates/project/AndroidManifest.xml" | head -1)
          
          # 定义全局模板路径
          GLOBAL_PLATFORM_WWW="$CORDOVA_ANDROID_ROOT/bin/templates/platform_www"
          GLOBAL_APP_RES_DIR="$CORDOVA_ANDROID_ROOT/bin/templates/app/src/main/res/values"
          GLOBAL_APP_MANIFEST_DIR="$CORDOVA_ANDROID_ROOT/bin/templates/app/src/main"
          
          # 验证基础资源
          [ -d "$CORDOVA_ANDROID_ROOT" ] || { echo "❌ 没找到cordova-android根目录"; exit 1; }
          [ -d "$ASSETS_WWW_PATH" ] || { echo "❌ 没找到assets/www"; exit 1; }
          [ -f "$STRINGS_XML_PATH" ] || { echo "❌ 没找到strings.xml"; exit 1; }
          [ -f "$MANIFEST_XML_PATH" ] || { echo "❌ 没找到AndroidManifest.xml"; exit 1; }
          
          # 记录环境变量
          echo "CORDOVA_ANDROID_ROOT=$CORDOVA_ANDROID_ROOT" >> $GITHUB_ENV
          echo "ASSETS_WWW_PATH=$ASSETS_WWW_PATH" >> $GITHUB_ENV
          echo "STRINGS_XML_PATH=$STRINGS_XML_PATH" >> $GITHUB_ENV
          echo "MANIFEST_XML_PATH=$MANIFEST_XML_PATH" >> $GITHUB_ENV
          echo "GLOBAL_PLATFORM_WWW=$GLOBAL_PLATFORM_WWW" >> $GITHUB_ENV
          echo "GLOBAL_APP_RES_DIR=$GLOBAL_APP_RES_DIR" >> $GITHUB_ENV
          echo "GLOBAL_APP_MANIFEST_DIR=$GLOBAL_APP_MANIFEST_DIR" >> $GITHUB_ENV
          cordova -v

      - name: 安装JDK8（直接用固定路径）
        run: |
          # 安装JDK8（不卸载其他，避免依赖冲突）
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jdk
          # Ubuntu系统JDK8固定路径（从日志和系统默认路径推导）
          JDK8_PATH="/usr/lib/jvm/java-8-openjdk-amd64"
          # 验证路径存在且是JDK8
          if [ ! -d "$JDK8_PATH" ]; then
            echo "❌ JDK8路径不存在，尝试自动查找..."
            JDK8_PATH=$(find /usr/lib/jvm -name "java-8-openjdk*" | head -1)
            [ -d "$JDK8_PATH" ] || { echo "❌ 未找到JDK8安装目录"; exit 1; }
          fi
          # 验证Java版本（必须是1.8）
          "$JDK8_PATH/bin/java" -version 2>&1 | grep -q "1.8.0" || { echo "❌ 路径不是JDK8"; "$JDK8_PATH/bin/java" -version; exit 1; }
          echo "✅ JDK8安装验证通过，路径：$JDK8_PATH"
          echo "JDK8_PATH=$JDK8_PATH" >> $GITHUB_ENV

      - name: 安装安卓SDK
        run: |
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p $ANDROID_SDK_PATH
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk-tools.zip
          unzip -q sdk-tools.zip -d $ANDROID_SDK_PATH/cmdline-tools
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/cmdline-tools/bin/sdkmanager"
          yes | $SDK_MANAGER --licenses || true
          $SDK_MANAGER "platforms;android-29" "build-tools;29.0.3" "platform-tools"
          echo "ANDROID_SDK_PATH=$ANDROID_SDK_PATH" >> $GITHUB_ENV

      - name: 安装Gradle 6.9
        run: |
          GRADLE_PATH="$HOME/gradle-6.9"
          wget https://services.gradle.org/distributions/gradle-6.9-bin.zip -O gradle-6.9-bin.zip
          unzip -q gradle-6.9-bin.zip -d $HOME
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 构建项目（强制JDK8）
        run: |
          # 强制指定JDK8路径，覆盖所有环境变量
          export JAVA_HOME=$JDK8_PATH
          export PATH="$JAVA_HOME/bin:$PATH"
          export JRE_HOME="$JAVA_HOME/jre"
          # 再次验证Java版本（确保编译前环境正确）
          echo "🔍 验证当前Java版本："
          java -version 2>&1 | grep -q "1.8.0" || { echo "❌ 未使用JDK8"; java -version; exit 1; }
          # 配置安卓SDK
          export ANDROID_SDK_ROOT=$ANDROID_SDK_PATH
          export GRADLE_HOME=$GRADLE_PATH
          
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          rm -rf "$PROJECT_PATH"
          mkdir -p "$PROJECT_PATH/www"
          sudo chmod -R 777 "$PROJECT_PATH"
          
          # 1. 补全全局模板资源
          echo "🔧 补全全局模板资源"
          mkdir -p "$GLOBAL_PLATFORM_WWW" "$GLOBAL_APP_RES_DIR" "$GLOBAL_APP_MANIFEST_DIR"
          cp -r "$ASSETS_WWW_PATH"/* "$GLOBAL_PLATFORM_WWW/"
          cp "$STRINGS_XML_PATH" "$GLOBAL_APP_RES_DIR/strings.xml"
          cp "$MANIFEST_XML_PATH" "$GLOBAL_APP_MANIFEST_DIR/AndroidManifest.xml"
          echo "✅ 全局模板资源补全完成"
          
          # 2. 创建项目基础配置
          echo '{"name":"x-app","version":"1.0.0","cordova":{"platforms":["android"]}}' > "$PROJECT_PATH/package.json"
          echo '<?xml version="1.0"?><widget id="com.my.simpleapp" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0"><name>YJSCSDH</name><content src="index.html"/></widget>' > "$PROJECT_PATH/config.xml"
          echo '<html><body>Hello</body></html>' > "$PROJECT_PATH/www/index.html"
          
          cd "$PROJECT_PATH"
          
          # 3. 添加安卓平台
          cordova platform add android@9.0.0
          sleep 5
          
          # 4. 清理项目
          cordova clean android
          
          # 5. 补全项目内资源
          ANDROID_PLATFORM_PATH="$PROJECT_PATH/platforms/android"
          ANDROID_APP_PATH="$ANDROID_PLATFORM_PATH/app"
          # 5.1 补项目内platform_www
          PROJECT_PLATFORM_WWW="$ANDROID_PLATFORM_PATH/platform_www"
          mkdir -p "$PROJECT_PLATFORM_WWW"
          cp -r "$ASSETS_WWW_PATH"/* "$PROJECT_PLATFORM_WWW/"
          # 5.2 补项目内strings.xml
          PROJECT_APP_RES_DIR="$ANDROID_APP_PATH/src/main/res/values"
          mkdir -p "$PROJECT_APP_RES_DIR"
          cp "$STRINGS_XML_PATH" "$PROJECT_APP_RES_DIR/strings.xml"
          # 5.3 补项目内AndroidManifest.xml
          cp "$MANIFEST_XML_PATH" "$ANDROID_APP_PATH/src/main/AndroidManifest.xml"
          
          # 6. 创建并验证MainActivity.java
          ACTIVITY_DIR="$ANDROID_APP_PATH/src/main/java/com/my/simpleapp"
          mkdir -p "$ACTIVITY_DIR"
          echo -e "package com.my.simpleapp;\n\nimport org.apache.cordova.CordovaActivity;\nimport android.os.Bundle;\n\npublic class MainActivity extends CordovaActivity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        loadUrl(launchUrl);\n    }\n}" > "$ACTIVITY_DIR/MainActivity.java"
          # 验证文件
          [ -f "$ACTIVITY_DIR/MainActivity.java" ] || { echo "❌ Activity文件未创建"; exit 1; }
          grep -q "extends CordovaActivity" "$ACTIVITY_DIR/MainActivity.java" || { echo "❌ Activity继承错误"; exit 1; }
          echo "✅ 项目内Activity验证通过"
          
          # 7. 配置Gradle源码目录
          BUILD_GRADLE_PATH="$ANDROID_APP_PATH/build.gradle"
          cp "$BUILD_GRADLE_PATH" "$BUILD_GRADLE_PATH.bak"
          sed -i '/android {/a \    sourceSets {\n        main {\n            java {\n                srcDirs = ["src/main/java"]\n            }\n        }\n    }' "$BUILD_GRADLE_PATH"
          
          # 8. 补Cordova核心配置
          API_JS_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "Api.js" -path "*/cordova/Api.js" | head -1)
          DEFAULTS_XML_PATH=$(find "$CORDOVA_ANDROID_ROOT" -name "defaults.xml" -path "*/cordova/defaults.xml" | head -1)
          CORDOVA_DIR="$ANDROID_PLATFORM_PATH/cordova"
          mkdir -p "$CORDOVA_DIR"
          cp "$API_JS_PATH" "$CORDOVA_DIR/Api.js"
          cp "$DEFAULTS_XML_PATH" "$CORDOVA_DIR/defaults.xml"
          
          # 9. 强制Gradle使用JDK8并禁用AndroidX
          echo "android.useAndroidX=false" > "$ANDROID_APP_PATH/gradle.properties"
          echo "android.enableJetifier=false" >> "$ANDROID_APP_PATH/gradle.properties"
          echo "org.gradle.java.home=$JDK8_PATH" >> "$ANDROID_APP_PATH/gradle.properties"
          
          # 10. 编译APK
          echo "🔨 开始编译APK"
          cordova build android --release
          
          # 11. 检查APK
          APK_PATH="$ANDROID_APP_PATH/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "🎉 彻底成功！APK路径：$APK_PATH"
            cp "$APK_PATH" "/home/runner/work/webview-app/webview-app/final-app.apk"
          else
            echo "❌ 编译失败，日志："
            cat "$ANDROID_PLATFORM_PATH/build/outputs/logs/build.log" 2>/dev/null
            exit 1
          fi

      - name: 上传APK
        uses: actions/upload-artifact@v4
        with:
          name: 安卓套壳应用（最终成功版）
          path: /home/runner/work/webview-app/webview-app/final-app.apk
          retention-days: 30
