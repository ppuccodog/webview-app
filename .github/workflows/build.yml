name: 安卓浏览器式套壳壳应用构建+自动发版
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换为阿里云Ubuntu镜像源（解决卡包问题）
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 读取 config.txt 配置（网址/包名/应用名/版本号）
        run: |
          # 定义默认配置（防止 config.txt 缺失）
          DEFAULT_CUSTOM_URL="https://www.baidu.com"
          DEFAULT_APP_PACKAGE="com.my.browserapp"
          DEFAULT_APP_NAME="自定义浏览器"
          DEFAULT_APP_VERSION_NAME="1.0.0"
          DEFAULT_APP_VERSION_CODE="1"

          # 读取 config.txt（格式：键=值，每行一个配置）
          if [ -f "config.txt" ]; then
            echo "✅ 读取 config.txt 配置..."
            # 逐行解析配置，优先使用 config.txt 中的值，无则用默认
            CUSTOM_URL=$(grep -E "^CUSTOM_URL=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_CUSTOM_URL")
            APP_PACKAGE=$(grep -E "^APP_PACKAGE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_PACKAGE")
            APP_NAME=$(grep -E "^APP_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_NAME")
            APP_VERSION_NAME=$(grep -E "^APP_VERSION_NAME=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_NAME")
            APP_VERSION_CODE=$(grep -E "^APP_VERSION_CODE=" config.txt | cut -d'=' -f2- | sed 's/^[ \t]*//;s/[ \t]*$//' || echo "$DEFAULT_APP_VERSION_CODE")
          else
            echo "⚠️ 未找到 config.txt，使用默认配置..."
            CUSTOM_URL="$DEFAULT_CUSTOM_URL"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
            APP_NAME="$DEFAULT_APP_NAME"
            APP_VERSION_NAME="$DEFAULT_APP_VERSION_NAME"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 验证配置有效性（包名必须符合Android规范，版本号必须为整数）
          if ! echo "$APP_PACKAGE" | grep -qE '^[a-z0-9_]+\.[a-z0-9_]+\.[a-z0-9_]+$'; then
            echo "⚠️ 包名格式无效（需如 com.xxx.yyy），使用默认包名：$DEFAULT_APP_PACKAGE"
            APP_PACKAGE="$DEFAULT_APP_PACKAGE"
          fi
          if ! echo "$APP_VERSION_CODE" | grep -qE '^[0-9]+$'; then
            echo "⚠️ 版本号（APP_VERSION_CODE）必须为整数，使用默认值：$DEFAULT_APP_VERSION_CODE"
            APP_VERSION_CODE="$DEFAULT_APP_VERSION_CODE"
          fi

          # 将配置写入环境变量（供后续步骤使用）
          echo "CUSTOM_URL=$CUSTOM_URL" >> $GITHUB_ENV
          echo "APP_PACKAGE=$APP_PACKAGE" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_NAME=$APP_VERSION_NAME" >> $GITHUB_ENV
          echo "APP_VERSION_CODE=$APP_VERSION_CODE" >> $GITHUB_ENV

          # 打印最终配置（确认生效）
          echo -e "\n📋 最终构建配置："
          echo "目标网址：$CUSTOM_URL"
          echo "应用包名：$APP_PACKAGE"
          echo "应用名称：$APP_NAME"
          echo "版本名称：$APP_VERSION_NAME"
          echo "版本号（整数）：$APP_VERSION_CODE"
      - name: 构建安卓套壳应用（使用 config.txt 配置）
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 从环境变量读取 config.txt 解析后的配置
          CUSTOM_URL="${{ env.CUSTOM_URL }}"
          APP_PACKAGE="${{ env.APP_PACKAGE }}"
          APP_NAME="${{ env.APP_NAME }}"
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          APP_VERSION_CODE="${{ env.APP_VERSION_CODE }}"

          # 动态创建项目目录（按包名生成Java目录结构）
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          APP_JAVA_DIR="$APP_DIR/src/main/java/$(echo "$APP_PACKAGE" | tr '.' '/')"
          
          # 清理旧项目残留并创建新目录
          rm -rf "$PROJECT_PATH"
          mkdir -p "$APP_JAVA_DIR"
          mkdir -p "$APP_DIR/src/main/res/values"
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"

          # 1. 生成 WebView 核心逻辑（CordovaActivity.java）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  webView = new WebView(this);
                  WebSettings webSettings = webView.getSettings();
                  
                  webSettings.setJavaScriptEnabled(true);
                  webSettings.setDomStorageEnabled(true);
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
                  
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
                  
                  webView.setWebViewClient(new WebViewClient() {
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed();
                      }
                      
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(CordovaActivity.this, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                      }
                  });
                  
                  webView.setWebChromeClient(new WebChromeClient());

                  webView.loadUrl("$CUSTOM_URL");
                  setContentView(webView);
              }
              
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
              
              @Override
              protected void onPause() {
                  super.onPause();
                  webView.onPause();
              }
              
              @Override
              protected void onResume() {
                  super.onResume();
                  webView.onResume();
              }
              
              @Override
              protected void onDestroy() {
                  if (webView != null) {
                      webView.destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF

          # 2. 生成主活动（MainActivity.java）
          cat > "$APP_JAVA_DIR/MainActivity.java" << EOF
          package $APP_PACKAGE;
          import org.apache.cordova.CordovaActivity;
          public class MainActivity extends CordovaActivity {}
          EOF

          # 3. 生成清单文件（AndroidManifest.xml）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="$APP_PACKAGE">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
              
              <application
                  android:label="$APP_NAME"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true">
                  
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
                      android:launchMode="singleTask">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                      <intent-filter>
                          <action android:name="android.intent.action.VIEW"/>
                          <category android:name="android.intent.category.DEFAULT"/>
                          <category android:name="android.intent.category.BROWSABLE"/>
                          <data android:scheme="http"/>
                          <data android:scheme="https"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 4. 生成字符串资源（strings.xml）
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">$APP_NAME</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # 5. 生成Gradle基础配置（gradle.properties）- 注释单独成行（核心修复）
          cat > "$ANDROID_ROOT/gradle.properties" << EOF
          # 启用AndroidX支持
          android.useAndroidX=true
          android.enableJetifier=false
          
          # 配置Gradle内存（避免OOM）
          org.gradle.jvmargs=-Xmx1536m
          
          # 启用并行构建（加速）
          org.gradle.parallel=true
          EOF

          # 6. 生成模块依赖配置（settings.gradle）
          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          EOF

          # 7. 生成 CordovaLib 库模块配置（build.gradle）
          cat > "$CORDOVA_LIB_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.library'
          
          android {
              compileSdk 30
              namespace 'org.apache.cordova'
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
              
              lintOptions { abortOnError false }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 8. 生成主应用模块配置（build.gradle）
          cat > "$APP_DIR/build.gradle" << EOF
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.application'
          
          android {
              compileSdk 30
              namespace '$APP_PACKAGE'
              
              defaultConfig {
                  applicationId "$APP_PACKAGE"
                  minSdk 21
                  targetSdk 30
                  versionCode $APP_VERSION_CODE
                  versionName "$APP_VERSION_NAME"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      signingConfig signingConfigs.debug
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
              
              lintOptions { abortOnError false }
              
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
          }
          
          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 9. 生成混淆规则（proguard-rules.pro）
          cat > "$APP_DIR/proguard-rules.pro" << EOF
          # 保留WebView相关类
          -keepclassmembers class * extends android.webkit.WebViewClient {
              public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
              public boolean *(android.webkit.WebView, java.lang.String);
          }
          -keepclassmembers class * extends android.webkit.WebChromeClient {
              public void *(android.webkit.WebView, java.lang.String);
          }
          EOF
          # 10. 编译 Release 版本 APK
          echo "=== 开始编译 Release 版本 APK ==="
          cd "$ANDROID_ROOT" || exit 1  # 进入项目根目录
          
          # 生成 Gradle 包装器（确保版本一致性）
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew  # 赋予执行权限
          
          # 执行清理与编译（--stacktrace 便于排查错误）
          ./gradlew clean :app:assembleRelease --stacktrace --info
          
          # 检查 APK 是否生成成功，并复制到指定路径
          APK_SOURCE1="$APP_DIR/build/outputs/apk/release/app-release.apk"
          APK_SOURCE2="$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk"
          APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v$APP_VERSION_NAME.apk"  # 文件名包含版本号
          
          if [ -f "$APK_SOURCE1" ]; then
            cp "$APK_SOURCE1" "$APK_DEST"
            echo "✅ 找到已签名 APK，复制路径：$APK_DEST"
          elif [ -f "$APK_SOURCE2" ]; then
            cp "$APK_SOURCE2" "$APK_DEST"
            echo "✅ 找到未签名 APK，复制路径：$APK_DEST"
          else
            echo "❌ 未找到 APK 文件，输出构建目录结构用于排查："
            ls -R "$APP_DIR/build/outputs"  # 打印输出目录结构
            exit 1  # 构建失败，终止工作流
          fi

      - name: 创建并推送 Git Tag（与版本号关联）
        run: |
          # 从环境变量获取版本号（来自 config.txt）
          APP_VERSION_NAME="${{ env.APP_VERSION_NAME }}"
          TAG_NAME="v$APP_VERSION_NAME"  # Tag 格式：v1.0.0
          
          # 配置 Git 身份（用于提交 Tag）
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 若 Tag 已存在，先删除旧 Tag（避免冲突）
          if git rev-parse --verify --quiet "$TAG_NAME"; then
            echo "⚠️ Tag $TAG_NAME 已存在，删除旧 Tag..."
            git tag -d "$TAG_NAME"  # 删除本地 Tag
            git push origin --delete "$TAG_NAME" 2>/dev/null || true  # 删除远程 Tag（忽略删除失败）
          fi
          
          # 创建新 Tag 并推送
          git tag -a "$TAG_NAME" -m "自定义浏览器应用 $TAG_NAME"  # 带注释的 Tag
          if ! git push origin "$TAG_NAME"; then
            echo "⚠️ Tag 推送失败，重试一次..."
            git push origin "$TAG_NAME" || exit 1  # 重试失败则终止
          fi
          echo "✅ Git Tag 推送成功：$TAG_NAME"

      - name: 发布 APK 到 GitHub Releases
        uses: softprops/action-gh-release@v2  # 成熟的 Releases 发布工具
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动注入的仓库令牌（无需手动配置）
        with:
          tag_name: "v${{ env.APP_VERSION_NAME }}"  # 与 Git Tag 保持一致
          name: "自定义浏览器应用 v${{ env.APP_VERSION_NAME }}"  # Releases 标题
          body: |  # Releases 描述（包含关键信息）
            ### 应用信息
            - 应用名称：${{ env.APP_NAME }}
            - 应用包名：${{ env.APP_PACKAGE }}
            - 支持系统：Android 5.0+（API 21 及以上）
            - 构建版本：v${{ env.APP_VERSION_NAME }}（版本号：${{ env.APP_VERSION_CODE }}）
            - 构建时间：${{ github.run_at }}
            
            ### 核心功能
            - 加载目标网址：${{ env.CUSTOM_URL }}
            - 支持网页内跳转、缩放、JS 交互
            - 解决混合内容（HTTP/HTTPS）加载问题
            - 支持返回键网页后退
            
            ### 注意事项
            - 此 APK 为调试签名版本，可直接安装测试
            - 生产环境使用需替换为正式签名
          files: /home/runner/work/webview-app/webview-app/CustomBrowser-v${{ env.APP_VERSION_NAME }}.apk  # 待上传的 APK 路径
          draft: false  # 不设为草稿（直接发布）
          prerelease: false  # 不设为预发布（标记为正式版本）
