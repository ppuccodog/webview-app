name: 安卓浏览器式套壳应用构建+自动发版
on:
  workflow_dispatch:
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 安装安卓构建依赖
        run: |
          export TIMEOUT=300
          
          # 替换为阿里云Ubuntu镜像源（解决卡包问题）
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << EOF
          deb http://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverse
          deb http://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiverse
          EOF
          
          # 安装JDK 11
          sudo apt-get update -o Acquire::ForceIPv4=true
          sudo apt-get install -y -qq openjdk-11-jdk
          echo "JDK11_PATH=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV

          # 配置Android SDK路径
          ANDROID_SDK_PATH="$HOME/android-sdk"
          mkdir -p "$ANDROID_SDK_PATH"
          echo "ANDROID_HOME=$ANDROID_SDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_PATH" >> $GITHUB_ENV

          # 下载SDK Tools
          SDK_TOOLS_URL="https://mirrors.aliyun.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          if ! wget --timeout=$TIMEOUT --tries=3 "$SDK_TOOLS_URL" -O sdk-tools.zip; then
            SDK_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
            wget --timeout=$TIMEOUT --tries=2 "$SDK_TOOLS_URL" -O sdk-tools.zip || exit 1
          fi
          mkdir -p "$ANDROID_SDK_PATH/cmdline-tools/latest"
          unzip -q sdk-tools.zip -d "$ANDROID_SDK_PATH/cmdline-tools/latest"
          mv "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_PATH/cmdline-tools/latest/" 2>/dev/null || true
          rm -rf "$ANDROID_SDK_PATH/cmdline-tools/latest/cmdline-tools"

          # 接受SDK许可证+安装组件
          SDK_MANAGER="$ANDROID_SDK_PATH/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "$SDK_MANAGER"
          yes | "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" --licenses || true
          if ! "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https; then
            "$SDK_MANAGER" --sdk_root="$ANDROID_SDK_PATH" "platforms;android-30" "build-tools;30.0.2" "platform-tools" --verbose --no_https || exit 1
          fi

          # 安装Gradle 7.0.2
          GRADLE_PATH="$HOME/gradle-7.0.2"
          if [ ! -d "$GRADLE_PATH" ]; then
            GRADLE_URL="https://mirrors.aliyun.com/gradle/gradle-7.0.2-bin.zip"
            if ! wget --timeout=$TIMEOUT --tries=3 "$GRADLE_URL" -O gradle.zip; then
              GRADLE_URL="https://services.gradle.org/distributions/gradle-7.0.2-bin.zip"
              wget --timeout=$TIMEOUT --tries=2 "$GRADLE_URL" -O gradle.zip || exit 1
            fi
            unzip -q gradle.zip -d "$HOME"
          fi
          echo "GRADLE_PATH=$GRADLE_PATH" >> $GITHUB_ENV
          echo "$GRADLE_PATH/bin" >> $GITHUB_PATH

      - name: 构建安卓套壳应用
        run: |
          export JAVA_HOME="${{ env.JDK11_PATH }}"
          export ANDROID_HOME="${{ env.ANDROID_HOME }}"
          export GRADLE_PATH="${{ env.GRADLE_PATH }}"
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/build-tools/30.0.2:$ANDROID_HOME/platform-tools:$GRADLE_PATH/bin:$PATH"

          # 读取自定义网址（从config.txt）
          if [ -f "config.txt" ]; then
            CUSTOM_URL=$(cat config.txt)
            echo "✅ 从config.txt读取到网址：$CUSTOM_URL"
          else
            # 如果没有config.txt，使用默认网址
            CUSTOM_URL="https://www.baidu.com"
            echo "⚠️ 未找到config.txt，使用默认网址：$CUSTOM_URL"
          fi

          # 创建项目目录
          PROJECT_PATH="/home/runner/work/webview-app/webview-app/myapp"
          ANDROID_ROOT="$PROJECT_PATH/android-project"
          APP_DIR="$ANDROID_ROOT/app"
          CORDOVA_LIB_DIR="$ANDROID_ROOT/CordovaLib"
          
          rm -rf "$PROJECT_PATH"
          mkdir -p "$APP_DIR/src/main/java/com/my/browserapp"
          mkdir -p "$APP_DIR/src/main/res/values"
          mkdir -p "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova"

          # 编写核心Java代码（修复外部CSS加载问题）
          cat > "$CORDOVA_LIB_DIR/src/main/java/org/apache/cordova/CordovaActivity.java" << EOF
          package org.apache.cordova;
          import android.app.Activity;
          import android.os.Bundle;
          import android.webkit.SslErrorHandler;
          import android.webkit.WebChromeClient;
          import android.webkit.WebResourceRequest;
          import android.webkit.WebSettings;
          import android.webkit.WebView;
          import android.webkit.WebViewClient;
          import android.net.http.SslError;
          import android.widget.Toast;

          public class CordovaActivity extends Activity {
              private WebView webView;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  // 初始化WebView
                  webView = new WebView(this);
                  
                  // 配置WebView支持外部资源和跨域
                  WebSettings webSettings = webView.getSettings();
                  
                  // 启用JavaScript（必须，多数网站和CSS动效依赖）
                  webSettings.setJavaScriptEnabled(true);
                  
                  // 支持DOM存储（用于JS相关功能）
                  webSettings.setDomStorageEnabled(true);
                  
                  // 允许文件访问
                  webSettings.setAllowFileAccess(true);
                  webSettings.setAllowContentAccess(true);
                  
                  // 关键：允许混合内容（HTTP资源在HTTPS页面中加载）
                  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
                      webSettings.setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);
                  }
                  
                  // 支持缩放和屏幕适配
                  webSettings.setSupportZoom(true);
                  webSettings.setBuiltInZoomControls(true);
                  webSettings.setDisplayZoomControls(false);
                  webSettings.setLoadWithOverviewMode(true);
                  webSettings.setUseWideViewPort(true);
                  
                  // 模拟标准浏览器User-Agent，避免被识别为WebView
                  webSettings.setUserAgentString("Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.101 Mobile Safari/537.36");
                  
                  // 关键：处理链接跳转和SSL证书问题
                  webView.setWebViewClient(new WebViewClient() {
                      // 所有链接在当前WebView中打开
                      @Override
                      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                          view.loadUrl(request.getUrl().toString());
                          return true;
                      }
                      
                      // 忽略SSL证书错误（解决HTTPS资源加载失败）
                      @Override
                      public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                          handler.proceed(); // 继续加载（调试用，生产环境需验证证书）
                      }
                      
                      // 资源加载错误提示
                      @Override
                      public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
                          Toast.makeText(CordovaActivity.this, "资源加载失败: " + description, Toast.LENGTH_LONG).show();
                      }
                  });
                  
                  // 支持JavaScript弹窗
                  webView.setWebChromeClient(new WebChromeClient());

                  // 加载初始网址
                  webView.loadUrl("$CUSTOM_URL");
                  setContentView(webView);
              }
              
              // 支持返回键后退
              @Override
              public void onBackPressed() {
                  if (webView.canGoBack()) {
                      webView.goBack();
                  } else {
                      super.onBackPressed();
                  }
              }
              
              // 暂停网页
              @Override
              protected void onPause() {
                  super.onPause();
                  webView.onPause();
              }
              
              // 恢复网页
              @Override
              protected void onResume() {
                  super.onResume();
                  webView.onResume();
              }
              
              // 销毁WebView
              @Override
              protected void onDestroy() {
                  if (webView != null) {
                      webView.destroy();
                  }
                  super.onDestroy();
              }
          }
          EOF

          # 主活动代码
          cat > "$APP_DIR/src/main/java/com/my/browserapp/MainActivity.java" << EOF
          package com.my.browserapp;
          import org.apache.cordova.CordovaActivity;
          public class MainActivity extends CordovaActivity {}
          EOF

          # AndroidManifest.xml（完整权限配置）
          cat > "$APP_DIR/src/main/AndroidManifest.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
                    package="com.my.browserapp">
              <uses-sdk android:minSdkVersion="21" android:targetSdkVersion="30"/>
              
              <!-- 浏览器必要权限 -->
              <uses-permission android:name="android.permission.INTERNET"/>
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
              <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
              
              <application
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:usesCleartextTraffic="true">
                  
                  <activity 
                      android:name=".MainActivity"
                      android:configChanges="orientation|screenSize|keyboard|keyboardHidden|navigation"
                      android:launchMode="singleTask">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                      <!-- 支持处理网页链接 -->
                      <intent-filter>
                          <action android:name="android.intent.action.VIEW"/>
                          <category android:name="android.intent.category.DEFAULT"/>
                          <category android:name="android.intent.category.BROWSABLE"/>
                          <data android:scheme="http"/>
                          <data android:scheme="https"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

          # 字符串资源
          cat > "$APP_DIR/src/main/res/values/strings.xml" << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">自定义浏览器</string>
              <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar"/>
          </resources>
          EOF

          # Gradle配置
          cat > "$ANDROID_ROOT/gradle.properties" << EOF
          android.useAndroidX=true
          android.enableJetifier=false
          org.gradle.jvmargs=-Xmx1536m
          org.gradle.parallel=true
          EOF

          cat > "$ANDROID_ROOT/settings.gradle" << EOF
          include ':app', ':CordovaLib'
          EOF

          # CordovaLib模块配置
          cat > "$CORDOVA_LIB_DIR/build.gradle" << 'EOF'
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.library'
          android {
              compileSdk 30
              namespace 'org.apache.cordova'
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
              lintOptions { abortOnError false }
          }
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # App模块配置
          cat > "$APP_DIR/build.gradle" << 'EOF'
          buildscript {
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
                  maven { url 'https://maven.aliyun.com/repository/google' }
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
              }
          }
          apply plugin: 'com.android.application'
          android {
              compileSdk 30
              namespace 'com.my.browserapp'
              defaultConfig {
                  applicationId "com.my.browserapp"
                  minSdk 21
                  targetSdk 30
                  versionCode 1
                  versionName "1.0.0"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      signingConfig signingConfigs.debug
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
              lintOptions { abortOnError false }
              repositories {
                  maven { url 'https://maven.aliyun.com/repository/google' }
                  maven { url 'https://maven.aliyun.com/repository/public' }
              }
          }
          dependencies {
              implementation project(':CordovaLib')
              implementation 'androidx.appcompat:appcompat:1.0.2'
          }
          EOF

          # 编译APK
          cd "$ANDROID_ROOT" || exit 1
          gradle wrapper --gradle-version 7.0.2
          chmod +x gradlew
          echo "=== 开始编译Release APK ==="
          ./gradlew clean :app:assembleRelease --stacktrace --info

          # 复制APK
          APK_DEST="/home/runner/work/webview-app/webview-app/CustomBrowser-v1.0.0.apk"
          if [ -f "$APP_DIR/build/outputs/apk/release/app-release.apk" ]; then
            cp "$APP_DIR/build/outputs/apk/release/app-release.apk" "$APK_DEST"
          elif [ -f "$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            cp "$APP_DIR/build/outputs/apk/release/app-release-unsigned.apk" "$APK_DEST"
          else
            echo "❌ 未找到APK文件，输出构建目录结构："
            ls -R "$APP_DIR/build/outputs"
            exit 1
          fi
          echo "✅ APK复制成功，路径：$APK_DEST"

      - name: 创建并推送Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          TAG_NAME="v1.0.0"

          if git rev-parse --verify --quiet "$TAG_NAME"; then
            git tag -d "$TAG_NAME"
            git push origin --delete "$TAG_NAME" 2>/dev/null || true
          fi

          git tag -a "$TAG_NAME" -m "自定义浏览器应用v1.0.0"
          if ! git push origin "$TAG_NAME"; then
            echo "Tag推送失败，重试一次"
            git push origin "$TAG_NAME" || exit 1
          fi
          echo "✅ Tag推送成功：$TAG_NAME"

      - name: 发布APK到Releases
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v1.0.0"
          name: "自定义浏览器应用v1.0.0"
          body: |
            ### 安卓自定义浏览器应用
            - 支持系统：Android 5.0+（API 21+）
            - 功能：访问指定网址并支持页面内跳转
            - 修复：已解决外部CSS和跨域资源加载问题
            - 构建时间：${{ github.run_at }}
            - 应用包名：com.my.browserapp
          files: /home/runner/work/webview-app/webview-app/CustomBrowser-v1.0.0.apk
          draft: false
          prerelease: false
